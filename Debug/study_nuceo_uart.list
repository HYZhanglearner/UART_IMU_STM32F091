
study_nuceo_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800466c  0800466c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800466c  0800466c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800466c  0800466c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  080046e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  080046e4  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a10c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b8a  00000000  00000000  0002a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002bd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae2a  00000000  00000000  0002cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa20  00000000  00000000  00047982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0a24  00000000  00000000  000523a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2dc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf8  00000000  00000000  000f2e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004544 	.word	0x08004544

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08004544 	.word	0x08004544

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_dmul>:
 8000240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000242:	4657      	mov	r7, sl
 8000244:	464e      	mov	r6, r9
 8000246:	4645      	mov	r5, r8
 8000248:	46de      	mov	lr, fp
 800024a:	b5e0      	push	{r5, r6, r7, lr}
 800024c:	4698      	mov	r8, r3
 800024e:	030c      	lsls	r4, r1, #12
 8000250:	004b      	lsls	r3, r1, #1
 8000252:	0006      	movs	r6, r0
 8000254:	4692      	mov	sl, r2
 8000256:	b087      	sub	sp, #28
 8000258:	0b24      	lsrs	r4, r4, #12
 800025a:	0d5b      	lsrs	r3, r3, #21
 800025c:	0fcf      	lsrs	r7, r1, #31
 800025e:	2b00      	cmp	r3, #0
 8000260:	d100      	bne.n	8000264 <__aeabi_dmul+0x24>
 8000262:	e15c      	b.n	800051e <__aeabi_dmul+0x2de>
 8000264:	4ad9      	ldr	r2, [pc, #868]	; (80005cc <__aeabi_dmul+0x38c>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d100      	bne.n	800026c <__aeabi_dmul+0x2c>
 800026a:	e175      	b.n	8000558 <__aeabi_dmul+0x318>
 800026c:	0f42      	lsrs	r2, r0, #29
 800026e:	00e4      	lsls	r4, r4, #3
 8000270:	4314      	orrs	r4, r2
 8000272:	2280      	movs	r2, #128	; 0x80
 8000274:	0412      	lsls	r2, r2, #16
 8000276:	4314      	orrs	r4, r2
 8000278:	4ad5      	ldr	r2, [pc, #852]	; (80005d0 <__aeabi_dmul+0x390>)
 800027a:	00c5      	lsls	r5, r0, #3
 800027c:	4694      	mov	ip, r2
 800027e:	4463      	add	r3, ip
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2300      	movs	r3, #0
 8000284:	4699      	mov	r9, r3
 8000286:	469b      	mov	fp, r3
 8000288:	4643      	mov	r3, r8
 800028a:	4642      	mov	r2, r8
 800028c:	031e      	lsls	r6, r3, #12
 800028e:	0fd2      	lsrs	r2, r2, #31
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	4650      	mov	r0, sl
 8000294:	4690      	mov	r8, r2
 8000296:	0b36      	lsrs	r6, r6, #12
 8000298:	0d5b      	lsrs	r3, r3, #21
 800029a:	d100      	bne.n	800029e <__aeabi_dmul+0x5e>
 800029c:	e120      	b.n	80004e0 <__aeabi_dmul+0x2a0>
 800029e:	4acb      	ldr	r2, [pc, #812]	; (80005cc <__aeabi_dmul+0x38c>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d100      	bne.n	80002a6 <__aeabi_dmul+0x66>
 80002a4:	e162      	b.n	800056c <__aeabi_dmul+0x32c>
 80002a6:	49ca      	ldr	r1, [pc, #808]	; (80005d0 <__aeabi_dmul+0x390>)
 80002a8:	0f42      	lsrs	r2, r0, #29
 80002aa:	468c      	mov	ip, r1
 80002ac:	9900      	ldr	r1, [sp, #0]
 80002ae:	4463      	add	r3, ip
 80002b0:	00f6      	lsls	r6, r6, #3
 80002b2:	468c      	mov	ip, r1
 80002b4:	4316      	orrs	r6, r2
 80002b6:	2280      	movs	r2, #128	; 0x80
 80002b8:	449c      	add	ip, r3
 80002ba:	0412      	lsls	r2, r2, #16
 80002bc:	4663      	mov	r3, ip
 80002be:	4316      	orrs	r6, r2
 80002c0:	00c2      	lsls	r2, r0, #3
 80002c2:	2000      	movs	r0, #0
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	9900      	ldr	r1, [sp, #0]
 80002c8:	4643      	mov	r3, r8
 80002ca:	3101      	adds	r1, #1
 80002cc:	468c      	mov	ip, r1
 80002ce:	4649      	mov	r1, r9
 80002d0:	407b      	eors	r3, r7
 80002d2:	9301      	str	r3, [sp, #4]
 80002d4:	290f      	cmp	r1, #15
 80002d6:	d826      	bhi.n	8000326 <__aeabi_dmul+0xe6>
 80002d8:	4bbe      	ldr	r3, [pc, #760]	; (80005d4 <__aeabi_dmul+0x394>)
 80002da:	0089      	lsls	r1, r1, #2
 80002dc:	5859      	ldr	r1, [r3, r1]
 80002de:	468f      	mov	pc, r1
 80002e0:	4643      	mov	r3, r8
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	0034      	movs	r4, r6
 80002e6:	0015      	movs	r5, r2
 80002e8:	4683      	mov	fp, r0
 80002ea:	465b      	mov	r3, fp
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d016      	beq.n	800031e <__aeabi_dmul+0xde>
 80002f0:	2b03      	cmp	r3, #3
 80002f2:	d100      	bne.n	80002f6 <__aeabi_dmul+0xb6>
 80002f4:	e203      	b.n	80006fe <__aeabi_dmul+0x4be>
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d000      	beq.n	80002fc <__aeabi_dmul+0xbc>
 80002fa:	e0cd      	b.n	8000498 <__aeabi_dmul+0x258>
 80002fc:	2200      	movs	r2, #0
 80002fe:	2400      	movs	r4, #0
 8000300:	2500      	movs	r5, #0
 8000302:	9b01      	ldr	r3, [sp, #4]
 8000304:	0512      	lsls	r2, r2, #20
 8000306:	4322      	orrs	r2, r4
 8000308:	07db      	lsls	r3, r3, #31
 800030a:	431a      	orrs	r2, r3
 800030c:	0028      	movs	r0, r5
 800030e:	0011      	movs	r1, r2
 8000310:	b007      	add	sp, #28
 8000312:	bcf0      	pop	{r4, r5, r6, r7}
 8000314:	46bb      	mov	fp, r7
 8000316:	46b2      	mov	sl, r6
 8000318:	46a9      	mov	r9, r5
 800031a:	46a0      	mov	r8, r4
 800031c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031e:	2400      	movs	r4, #0
 8000320:	2500      	movs	r5, #0
 8000322:	4aaa      	ldr	r2, [pc, #680]	; (80005cc <__aeabi_dmul+0x38c>)
 8000324:	e7ed      	b.n	8000302 <__aeabi_dmul+0xc2>
 8000326:	0c28      	lsrs	r0, r5, #16
 8000328:	042d      	lsls	r5, r5, #16
 800032a:	0c2d      	lsrs	r5, r5, #16
 800032c:	002b      	movs	r3, r5
 800032e:	0c11      	lsrs	r1, r2, #16
 8000330:	0412      	lsls	r2, r2, #16
 8000332:	0c12      	lsrs	r2, r2, #16
 8000334:	4353      	muls	r3, r2
 8000336:	4698      	mov	r8, r3
 8000338:	0013      	movs	r3, r2
 800033a:	002f      	movs	r7, r5
 800033c:	4343      	muls	r3, r0
 800033e:	4699      	mov	r9, r3
 8000340:	434f      	muls	r7, r1
 8000342:	444f      	add	r7, r9
 8000344:	46bb      	mov	fp, r7
 8000346:	4647      	mov	r7, r8
 8000348:	000b      	movs	r3, r1
 800034a:	0c3f      	lsrs	r7, r7, #16
 800034c:	46ba      	mov	sl, r7
 800034e:	4343      	muls	r3, r0
 8000350:	44da      	add	sl, fp
 8000352:	9302      	str	r3, [sp, #8]
 8000354:	45d1      	cmp	r9, sl
 8000356:	d904      	bls.n	8000362 <__aeabi_dmul+0x122>
 8000358:	2780      	movs	r7, #128	; 0x80
 800035a:	027f      	lsls	r7, r7, #9
 800035c:	46b9      	mov	r9, r7
 800035e:	444b      	add	r3, r9
 8000360:	9302      	str	r3, [sp, #8]
 8000362:	4653      	mov	r3, sl
 8000364:	0c1b      	lsrs	r3, r3, #16
 8000366:	469b      	mov	fp, r3
 8000368:	4653      	mov	r3, sl
 800036a:	041f      	lsls	r7, r3, #16
 800036c:	4643      	mov	r3, r8
 800036e:	041b      	lsls	r3, r3, #16
 8000370:	0c1b      	lsrs	r3, r3, #16
 8000372:	4698      	mov	r8, r3
 8000374:	003b      	movs	r3, r7
 8000376:	4443      	add	r3, r8
 8000378:	9304      	str	r3, [sp, #16]
 800037a:	0c33      	lsrs	r3, r6, #16
 800037c:	0436      	lsls	r6, r6, #16
 800037e:	0c36      	lsrs	r6, r6, #16
 8000380:	4698      	mov	r8, r3
 8000382:	0033      	movs	r3, r6
 8000384:	4343      	muls	r3, r0
 8000386:	4699      	mov	r9, r3
 8000388:	4643      	mov	r3, r8
 800038a:	4343      	muls	r3, r0
 800038c:	002f      	movs	r7, r5
 800038e:	469a      	mov	sl, r3
 8000390:	4643      	mov	r3, r8
 8000392:	4377      	muls	r7, r6
 8000394:	435d      	muls	r5, r3
 8000396:	0c38      	lsrs	r0, r7, #16
 8000398:	444d      	add	r5, r9
 800039a:	1945      	adds	r5, r0, r5
 800039c:	45a9      	cmp	r9, r5
 800039e:	d903      	bls.n	80003a8 <__aeabi_dmul+0x168>
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	025b      	lsls	r3, r3, #9
 80003a4:	4699      	mov	r9, r3
 80003a6:	44ca      	add	sl, r9
 80003a8:	043f      	lsls	r7, r7, #16
 80003aa:	0c28      	lsrs	r0, r5, #16
 80003ac:	0c3f      	lsrs	r7, r7, #16
 80003ae:	042d      	lsls	r5, r5, #16
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	0c27      	lsrs	r7, r4, #16
 80003b4:	0424      	lsls	r4, r4, #16
 80003b6:	0c24      	lsrs	r4, r4, #16
 80003b8:	0003      	movs	r3, r0
 80003ba:	0020      	movs	r0, r4
 80003bc:	4350      	muls	r0, r2
 80003be:	437a      	muls	r2, r7
 80003c0:	4691      	mov	r9, r2
 80003c2:	003a      	movs	r2, r7
 80003c4:	4453      	add	r3, sl
 80003c6:	9305      	str	r3, [sp, #20]
 80003c8:	0c03      	lsrs	r3, r0, #16
 80003ca:	469a      	mov	sl, r3
 80003cc:	434a      	muls	r2, r1
 80003ce:	4361      	muls	r1, r4
 80003d0:	4449      	add	r1, r9
 80003d2:	4451      	add	r1, sl
 80003d4:	44ab      	add	fp, r5
 80003d6:	4589      	cmp	r9, r1
 80003d8:	d903      	bls.n	80003e2 <__aeabi_dmul+0x1a2>
 80003da:	2380      	movs	r3, #128	; 0x80
 80003dc:	025b      	lsls	r3, r3, #9
 80003de:	4699      	mov	r9, r3
 80003e0:	444a      	add	r2, r9
 80003e2:	0400      	lsls	r0, r0, #16
 80003e4:	0c0b      	lsrs	r3, r1, #16
 80003e6:	0c00      	lsrs	r0, r0, #16
 80003e8:	0409      	lsls	r1, r1, #16
 80003ea:	1809      	adds	r1, r1, r0
 80003ec:	0020      	movs	r0, r4
 80003ee:	4699      	mov	r9, r3
 80003f0:	4643      	mov	r3, r8
 80003f2:	4370      	muls	r0, r6
 80003f4:	435c      	muls	r4, r3
 80003f6:	437e      	muls	r6, r7
 80003f8:	435f      	muls	r7, r3
 80003fa:	0c03      	lsrs	r3, r0, #16
 80003fc:	4698      	mov	r8, r3
 80003fe:	19a4      	adds	r4, r4, r6
 8000400:	4444      	add	r4, r8
 8000402:	444a      	add	r2, r9
 8000404:	9703      	str	r7, [sp, #12]
 8000406:	42a6      	cmp	r6, r4
 8000408:	d904      	bls.n	8000414 <__aeabi_dmul+0x1d4>
 800040a:	2380      	movs	r3, #128	; 0x80
 800040c:	025b      	lsls	r3, r3, #9
 800040e:	4698      	mov	r8, r3
 8000410:	4447      	add	r7, r8
 8000412:	9703      	str	r7, [sp, #12]
 8000414:	0423      	lsls	r3, r4, #16
 8000416:	9e02      	ldr	r6, [sp, #8]
 8000418:	469a      	mov	sl, r3
 800041a:	9b05      	ldr	r3, [sp, #20]
 800041c:	445e      	add	r6, fp
 800041e:	4698      	mov	r8, r3
 8000420:	42ae      	cmp	r6, r5
 8000422:	41ad      	sbcs	r5, r5
 8000424:	1876      	adds	r6, r6, r1
 8000426:	428e      	cmp	r6, r1
 8000428:	4189      	sbcs	r1, r1
 800042a:	0400      	lsls	r0, r0, #16
 800042c:	0c00      	lsrs	r0, r0, #16
 800042e:	4450      	add	r0, sl
 8000430:	4440      	add	r0, r8
 8000432:	426d      	negs	r5, r5
 8000434:	1947      	adds	r7, r0, r5
 8000436:	46b8      	mov	r8, r7
 8000438:	4693      	mov	fp, r2
 800043a:	4249      	negs	r1, r1
 800043c:	4689      	mov	r9, r1
 800043e:	44c3      	add	fp, r8
 8000440:	44d9      	add	r9, fp
 8000442:	4298      	cmp	r0, r3
 8000444:	4180      	sbcs	r0, r0
 8000446:	45a8      	cmp	r8, r5
 8000448:	41ad      	sbcs	r5, r5
 800044a:	4593      	cmp	fp, r2
 800044c:	4192      	sbcs	r2, r2
 800044e:	4589      	cmp	r9, r1
 8000450:	4189      	sbcs	r1, r1
 8000452:	426d      	negs	r5, r5
 8000454:	4240      	negs	r0, r0
 8000456:	4328      	orrs	r0, r5
 8000458:	0c24      	lsrs	r4, r4, #16
 800045a:	4252      	negs	r2, r2
 800045c:	4249      	negs	r1, r1
 800045e:	430a      	orrs	r2, r1
 8000460:	9b03      	ldr	r3, [sp, #12]
 8000462:	1900      	adds	r0, r0, r4
 8000464:	1880      	adds	r0, r0, r2
 8000466:	18c7      	adds	r7, r0, r3
 8000468:	464b      	mov	r3, r9
 800046a:	0ddc      	lsrs	r4, r3, #23
 800046c:	9b04      	ldr	r3, [sp, #16]
 800046e:	0275      	lsls	r5, r6, #9
 8000470:	431d      	orrs	r5, r3
 8000472:	1e6a      	subs	r2, r5, #1
 8000474:	4195      	sbcs	r5, r2
 8000476:	464b      	mov	r3, r9
 8000478:	0df6      	lsrs	r6, r6, #23
 800047a:	027f      	lsls	r7, r7, #9
 800047c:	4335      	orrs	r5, r6
 800047e:	025a      	lsls	r2, r3, #9
 8000480:	433c      	orrs	r4, r7
 8000482:	4315      	orrs	r5, r2
 8000484:	01fb      	lsls	r3, r7, #7
 8000486:	d400      	bmi.n	800048a <__aeabi_dmul+0x24a>
 8000488:	e11c      	b.n	80006c4 <__aeabi_dmul+0x484>
 800048a:	2101      	movs	r1, #1
 800048c:	086a      	lsrs	r2, r5, #1
 800048e:	400d      	ands	r5, r1
 8000490:	4315      	orrs	r5, r2
 8000492:	07e2      	lsls	r2, r4, #31
 8000494:	4315      	orrs	r5, r2
 8000496:	0864      	lsrs	r4, r4, #1
 8000498:	494f      	ldr	r1, [pc, #316]	; (80005d8 <__aeabi_dmul+0x398>)
 800049a:	4461      	add	r1, ip
 800049c:	2900      	cmp	r1, #0
 800049e:	dc00      	bgt.n	80004a2 <__aeabi_dmul+0x262>
 80004a0:	e0b0      	b.n	8000604 <__aeabi_dmul+0x3c4>
 80004a2:	076b      	lsls	r3, r5, #29
 80004a4:	d009      	beq.n	80004ba <__aeabi_dmul+0x27a>
 80004a6:	220f      	movs	r2, #15
 80004a8:	402a      	ands	r2, r5
 80004aa:	2a04      	cmp	r2, #4
 80004ac:	d005      	beq.n	80004ba <__aeabi_dmul+0x27a>
 80004ae:	1d2a      	adds	r2, r5, #4
 80004b0:	42aa      	cmp	r2, r5
 80004b2:	41ad      	sbcs	r5, r5
 80004b4:	426d      	negs	r5, r5
 80004b6:	1964      	adds	r4, r4, r5
 80004b8:	0015      	movs	r5, r2
 80004ba:	01e3      	lsls	r3, r4, #7
 80004bc:	d504      	bpl.n	80004c8 <__aeabi_dmul+0x288>
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	4a46      	ldr	r2, [pc, #280]	; (80005dc <__aeabi_dmul+0x39c>)
 80004c2:	00c9      	lsls	r1, r1, #3
 80004c4:	4014      	ands	r4, r2
 80004c6:	4461      	add	r1, ip
 80004c8:	4a45      	ldr	r2, [pc, #276]	; (80005e0 <__aeabi_dmul+0x3a0>)
 80004ca:	4291      	cmp	r1, r2
 80004cc:	dd00      	ble.n	80004d0 <__aeabi_dmul+0x290>
 80004ce:	e726      	b.n	800031e <__aeabi_dmul+0xde>
 80004d0:	0762      	lsls	r2, r4, #29
 80004d2:	08ed      	lsrs	r5, r5, #3
 80004d4:	0264      	lsls	r4, r4, #9
 80004d6:	0549      	lsls	r1, r1, #21
 80004d8:	4315      	orrs	r5, r2
 80004da:	0b24      	lsrs	r4, r4, #12
 80004dc:	0d4a      	lsrs	r2, r1, #21
 80004de:	e710      	b.n	8000302 <__aeabi_dmul+0xc2>
 80004e0:	4652      	mov	r2, sl
 80004e2:	4332      	orrs	r2, r6
 80004e4:	d100      	bne.n	80004e8 <__aeabi_dmul+0x2a8>
 80004e6:	e07f      	b.n	80005e8 <__aeabi_dmul+0x3a8>
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_dmul+0x2ae>
 80004ec:	e0dc      	b.n	80006a8 <__aeabi_dmul+0x468>
 80004ee:	0030      	movs	r0, r6
 80004f0:	f000 f978 	bl	80007e4 <__clzsi2>
 80004f4:	0002      	movs	r2, r0
 80004f6:	3a0b      	subs	r2, #11
 80004f8:	231d      	movs	r3, #29
 80004fa:	0001      	movs	r1, r0
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	3908      	subs	r1, #8
 8000502:	40da      	lsrs	r2, r3
 8000504:	408e      	lsls	r6, r1
 8000506:	4316      	orrs	r6, r2
 8000508:	4652      	mov	r2, sl
 800050a:	408a      	lsls	r2, r1
 800050c:	9b00      	ldr	r3, [sp, #0]
 800050e:	4935      	ldr	r1, [pc, #212]	; (80005e4 <__aeabi_dmul+0x3a4>)
 8000510:	1a18      	subs	r0, r3, r0
 8000512:	0003      	movs	r3, r0
 8000514:	468c      	mov	ip, r1
 8000516:	4463      	add	r3, ip
 8000518:	2000      	movs	r0, #0
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	e6d3      	b.n	80002c6 <__aeabi_dmul+0x86>
 800051e:	0025      	movs	r5, r4
 8000520:	4305      	orrs	r5, r0
 8000522:	d04a      	beq.n	80005ba <__aeabi_dmul+0x37a>
 8000524:	2c00      	cmp	r4, #0
 8000526:	d100      	bne.n	800052a <__aeabi_dmul+0x2ea>
 8000528:	e0b0      	b.n	800068c <__aeabi_dmul+0x44c>
 800052a:	0020      	movs	r0, r4
 800052c:	f000 f95a 	bl	80007e4 <__clzsi2>
 8000530:	0001      	movs	r1, r0
 8000532:	0002      	movs	r2, r0
 8000534:	390b      	subs	r1, #11
 8000536:	231d      	movs	r3, #29
 8000538:	0010      	movs	r0, r2
 800053a:	1a5b      	subs	r3, r3, r1
 800053c:	0031      	movs	r1, r6
 800053e:	0035      	movs	r5, r6
 8000540:	3808      	subs	r0, #8
 8000542:	4084      	lsls	r4, r0
 8000544:	40d9      	lsrs	r1, r3
 8000546:	4085      	lsls	r5, r0
 8000548:	430c      	orrs	r4, r1
 800054a:	4826      	ldr	r0, [pc, #152]	; (80005e4 <__aeabi_dmul+0x3a4>)
 800054c:	1a83      	subs	r3, r0, r2
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2300      	movs	r3, #0
 8000552:	4699      	mov	r9, r3
 8000554:	469b      	mov	fp, r3
 8000556:	e697      	b.n	8000288 <__aeabi_dmul+0x48>
 8000558:	0005      	movs	r5, r0
 800055a:	4325      	orrs	r5, r4
 800055c:	d126      	bne.n	80005ac <__aeabi_dmul+0x36c>
 800055e:	2208      	movs	r2, #8
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2302      	movs	r3, #2
 8000564:	2400      	movs	r4, #0
 8000566:	4691      	mov	r9, r2
 8000568:	469b      	mov	fp, r3
 800056a:	e68d      	b.n	8000288 <__aeabi_dmul+0x48>
 800056c:	4652      	mov	r2, sl
 800056e:	9b00      	ldr	r3, [sp, #0]
 8000570:	4332      	orrs	r2, r6
 8000572:	d110      	bne.n	8000596 <__aeabi_dmul+0x356>
 8000574:	4915      	ldr	r1, [pc, #84]	; (80005cc <__aeabi_dmul+0x38c>)
 8000576:	2600      	movs	r6, #0
 8000578:	468c      	mov	ip, r1
 800057a:	4463      	add	r3, ip
 800057c:	4649      	mov	r1, r9
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2302      	movs	r3, #2
 8000582:	4319      	orrs	r1, r3
 8000584:	4689      	mov	r9, r1
 8000586:	2002      	movs	r0, #2
 8000588:	e69d      	b.n	80002c6 <__aeabi_dmul+0x86>
 800058a:	465b      	mov	r3, fp
 800058c:	9701      	str	r7, [sp, #4]
 800058e:	2b02      	cmp	r3, #2
 8000590:	d000      	beq.n	8000594 <__aeabi_dmul+0x354>
 8000592:	e6ad      	b.n	80002f0 <__aeabi_dmul+0xb0>
 8000594:	e6c3      	b.n	800031e <__aeabi_dmul+0xde>
 8000596:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <__aeabi_dmul+0x38c>)
 8000598:	2003      	movs	r0, #3
 800059a:	4694      	mov	ip, r2
 800059c:	4463      	add	r3, ip
 800059e:	464a      	mov	r2, r9
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2303      	movs	r3, #3
 80005a4:	431a      	orrs	r2, r3
 80005a6:	4691      	mov	r9, r2
 80005a8:	4652      	mov	r2, sl
 80005aa:	e68c      	b.n	80002c6 <__aeabi_dmul+0x86>
 80005ac:	220c      	movs	r2, #12
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2303      	movs	r3, #3
 80005b2:	0005      	movs	r5, r0
 80005b4:	4691      	mov	r9, r2
 80005b6:	469b      	mov	fp, r3
 80005b8:	e666      	b.n	8000288 <__aeabi_dmul+0x48>
 80005ba:	2304      	movs	r3, #4
 80005bc:	4699      	mov	r9, r3
 80005be:	2300      	movs	r3, #0
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	2400      	movs	r4, #0
 80005c6:	469b      	mov	fp, r3
 80005c8:	e65e      	b.n	8000288 <__aeabi_dmul+0x48>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	000007ff 	.word	0x000007ff
 80005d0:	fffffc01 	.word	0xfffffc01
 80005d4:	080045d8 	.word	0x080045d8
 80005d8:	000003ff 	.word	0x000003ff
 80005dc:	feffffff 	.word	0xfeffffff
 80005e0:	000007fe 	.word	0x000007fe
 80005e4:	fffffc0d 	.word	0xfffffc0d
 80005e8:	4649      	mov	r1, r9
 80005ea:	2301      	movs	r3, #1
 80005ec:	4319      	orrs	r1, r3
 80005ee:	4689      	mov	r9, r1
 80005f0:	2600      	movs	r6, #0
 80005f2:	2001      	movs	r0, #1
 80005f4:	e667      	b.n	80002c6 <__aeabi_dmul+0x86>
 80005f6:	2300      	movs	r3, #0
 80005f8:	2480      	movs	r4, #128	; 0x80
 80005fa:	2500      	movs	r5, #0
 80005fc:	4a43      	ldr	r2, [pc, #268]	; (800070c <__aeabi_dmul+0x4cc>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	0324      	lsls	r4, r4, #12
 8000602:	e67e      	b.n	8000302 <__aeabi_dmul+0xc2>
 8000604:	2001      	movs	r0, #1
 8000606:	1a40      	subs	r0, r0, r1
 8000608:	2838      	cmp	r0, #56	; 0x38
 800060a:	dd00      	ble.n	800060e <__aeabi_dmul+0x3ce>
 800060c:	e676      	b.n	80002fc <__aeabi_dmul+0xbc>
 800060e:	281f      	cmp	r0, #31
 8000610:	dd5b      	ble.n	80006ca <__aeabi_dmul+0x48a>
 8000612:	221f      	movs	r2, #31
 8000614:	0023      	movs	r3, r4
 8000616:	4252      	negs	r2, r2
 8000618:	1a51      	subs	r1, r2, r1
 800061a:	40cb      	lsrs	r3, r1
 800061c:	0019      	movs	r1, r3
 800061e:	2820      	cmp	r0, #32
 8000620:	d003      	beq.n	800062a <__aeabi_dmul+0x3ea>
 8000622:	4a3b      	ldr	r2, [pc, #236]	; (8000710 <__aeabi_dmul+0x4d0>)
 8000624:	4462      	add	r2, ip
 8000626:	4094      	lsls	r4, r2
 8000628:	4325      	orrs	r5, r4
 800062a:	1e6a      	subs	r2, r5, #1
 800062c:	4195      	sbcs	r5, r2
 800062e:	002a      	movs	r2, r5
 8000630:	430a      	orrs	r2, r1
 8000632:	2107      	movs	r1, #7
 8000634:	000d      	movs	r5, r1
 8000636:	2400      	movs	r4, #0
 8000638:	4015      	ands	r5, r2
 800063a:	4211      	tst	r1, r2
 800063c:	d05b      	beq.n	80006f6 <__aeabi_dmul+0x4b6>
 800063e:	210f      	movs	r1, #15
 8000640:	2400      	movs	r4, #0
 8000642:	4011      	ands	r1, r2
 8000644:	2904      	cmp	r1, #4
 8000646:	d053      	beq.n	80006f0 <__aeabi_dmul+0x4b0>
 8000648:	1d11      	adds	r1, r2, #4
 800064a:	4291      	cmp	r1, r2
 800064c:	4192      	sbcs	r2, r2
 800064e:	4252      	negs	r2, r2
 8000650:	18a4      	adds	r4, r4, r2
 8000652:	000a      	movs	r2, r1
 8000654:	0223      	lsls	r3, r4, #8
 8000656:	d54b      	bpl.n	80006f0 <__aeabi_dmul+0x4b0>
 8000658:	2201      	movs	r2, #1
 800065a:	2400      	movs	r4, #0
 800065c:	2500      	movs	r5, #0
 800065e:	e650      	b.n	8000302 <__aeabi_dmul+0xc2>
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	031b      	lsls	r3, r3, #12
 8000664:	421c      	tst	r4, r3
 8000666:	d009      	beq.n	800067c <__aeabi_dmul+0x43c>
 8000668:	421e      	tst	r6, r3
 800066a:	d107      	bne.n	800067c <__aeabi_dmul+0x43c>
 800066c:	4333      	orrs	r3, r6
 800066e:	031c      	lsls	r4, r3, #12
 8000670:	4643      	mov	r3, r8
 8000672:	0015      	movs	r5, r2
 8000674:	0b24      	lsrs	r4, r4, #12
 8000676:	4a25      	ldr	r2, [pc, #148]	; (800070c <__aeabi_dmul+0x4cc>)
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	e642      	b.n	8000302 <__aeabi_dmul+0xc2>
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	0312      	lsls	r2, r2, #12
 8000680:	4314      	orrs	r4, r2
 8000682:	0324      	lsls	r4, r4, #12
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <__aeabi_dmul+0x4cc>)
 8000686:	0b24      	lsrs	r4, r4, #12
 8000688:	9701      	str	r7, [sp, #4]
 800068a:	e63a      	b.n	8000302 <__aeabi_dmul+0xc2>
 800068c:	f000 f8aa 	bl	80007e4 <__clzsi2>
 8000690:	0001      	movs	r1, r0
 8000692:	0002      	movs	r2, r0
 8000694:	3115      	adds	r1, #21
 8000696:	3220      	adds	r2, #32
 8000698:	291c      	cmp	r1, #28
 800069a:	dc00      	bgt.n	800069e <__aeabi_dmul+0x45e>
 800069c:	e74b      	b.n	8000536 <__aeabi_dmul+0x2f6>
 800069e:	0034      	movs	r4, r6
 80006a0:	3808      	subs	r0, #8
 80006a2:	2500      	movs	r5, #0
 80006a4:	4084      	lsls	r4, r0
 80006a6:	e750      	b.n	800054a <__aeabi_dmul+0x30a>
 80006a8:	f000 f89c 	bl	80007e4 <__clzsi2>
 80006ac:	0003      	movs	r3, r0
 80006ae:	001a      	movs	r2, r3
 80006b0:	3215      	adds	r2, #21
 80006b2:	3020      	adds	r0, #32
 80006b4:	2a1c      	cmp	r2, #28
 80006b6:	dc00      	bgt.n	80006ba <__aeabi_dmul+0x47a>
 80006b8:	e71e      	b.n	80004f8 <__aeabi_dmul+0x2b8>
 80006ba:	4656      	mov	r6, sl
 80006bc:	3b08      	subs	r3, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	409e      	lsls	r6, r3
 80006c2:	e723      	b.n	800050c <__aeabi_dmul+0x2cc>
 80006c4:	9b00      	ldr	r3, [sp, #0]
 80006c6:	469c      	mov	ip, r3
 80006c8:	e6e6      	b.n	8000498 <__aeabi_dmul+0x258>
 80006ca:	4912      	ldr	r1, [pc, #72]	; (8000714 <__aeabi_dmul+0x4d4>)
 80006cc:	0022      	movs	r2, r4
 80006ce:	4461      	add	r1, ip
 80006d0:	002e      	movs	r6, r5
 80006d2:	408d      	lsls	r5, r1
 80006d4:	408a      	lsls	r2, r1
 80006d6:	40c6      	lsrs	r6, r0
 80006d8:	1e69      	subs	r1, r5, #1
 80006da:	418d      	sbcs	r5, r1
 80006dc:	4332      	orrs	r2, r6
 80006de:	432a      	orrs	r2, r5
 80006e0:	40c4      	lsrs	r4, r0
 80006e2:	0753      	lsls	r3, r2, #29
 80006e4:	d0b6      	beq.n	8000654 <__aeabi_dmul+0x414>
 80006e6:	210f      	movs	r1, #15
 80006e8:	4011      	ands	r1, r2
 80006ea:	2904      	cmp	r1, #4
 80006ec:	d1ac      	bne.n	8000648 <__aeabi_dmul+0x408>
 80006ee:	e7b1      	b.n	8000654 <__aeabi_dmul+0x414>
 80006f0:	0765      	lsls	r5, r4, #29
 80006f2:	0264      	lsls	r4, r4, #9
 80006f4:	0b24      	lsrs	r4, r4, #12
 80006f6:	08d2      	lsrs	r2, r2, #3
 80006f8:	4315      	orrs	r5, r2
 80006fa:	2200      	movs	r2, #0
 80006fc:	e601      	b.n	8000302 <__aeabi_dmul+0xc2>
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	0312      	lsls	r2, r2, #12
 8000702:	4314      	orrs	r4, r2
 8000704:	0324      	lsls	r4, r4, #12
 8000706:	4a01      	ldr	r2, [pc, #4]	; (800070c <__aeabi_dmul+0x4cc>)
 8000708:	0b24      	lsrs	r4, r4, #12
 800070a:	e5fa      	b.n	8000302 <__aeabi_dmul+0xc2>
 800070c:	000007ff 	.word	0x000007ff
 8000710:	0000043e 	.word	0x0000043e
 8000714:	0000041e 	.word	0x0000041e

08000718 <__aeabi_d2iz>:
 8000718:	000a      	movs	r2, r1
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	4c13      	ldr	r4, [pc, #76]	; (800076c <__aeabi_d2iz+0x54>)
 800071e:	0053      	lsls	r3, r2, #1
 8000720:	0309      	lsls	r1, r1, #12
 8000722:	0005      	movs	r5, r0
 8000724:	0b09      	lsrs	r1, r1, #12
 8000726:	2000      	movs	r0, #0
 8000728:	0d5b      	lsrs	r3, r3, #21
 800072a:	0fd2      	lsrs	r2, r2, #31
 800072c:	42a3      	cmp	r3, r4
 800072e:	dd04      	ble.n	800073a <__aeabi_d2iz+0x22>
 8000730:	480f      	ldr	r0, [pc, #60]	; (8000770 <__aeabi_d2iz+0x58>)
 8000732:	4283      	cmp	r3, r0
 8000734:	dd02      	ble.n	800073c <__aeabi_d2iz+0x24>
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <__aeabi_d2iz+0x5c>)
 8000738:	18d0      	adds	r0, r2, r3
 800073a:	bd30      	pop	{r4, r5, pc}
 800073c:	2080      	movs	r0, #128	; 0x80
 800073e:	0340      	lsls	r0, r0, #13
 8000740:	4301      	orrs	r1, r0
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <__aeabi_d2iz+0x60>)
 8000744:	1ac0      	subs	r0, r0, r3
 8000746:	281f      	cmp	r0, #31
 8000748:	dd08      	ble.n	800075c <__aeabi_d2iz+0x44>
 800074a:	480c      	ldr	r0, [pc, #48]	; (800077c <__aeabi_d2iz+0x64>)
 800074c:	1ac3      	subs	r3, r0, r3
 800074e:	40d9      	lsrs	r1, r3
 8000750:	000b      	movs	r3, r1
 8000752:	4258      	negs	r0, r3
 8000754:	2a00      	cmp	r2, #0
 8000756:	d1f0      	bne.n	800073a <__aeabi_d2iz+0x22>
 8000758:	0018      	movs	r0, r3
 800075a:	e7ee      	b.n	800073a <__aeabi_d2iz+0x22>
 800075c:	4c08      	ldr	r4, [pc, #32]	; (8000780 <__aeabi_d2iz+0x68>)
 800075e:	40c5      	lsrs	r5, r0
 8000760:	46a4      	mov	ip, r4
 8000762:	4463      	add	r3, ip
 8000764:	4099      	lsls	r1, r3
 8000766:	000b      	movs	r3, r1
 8000768:	432b      	orrs	r3, r5
 800076a:	e7f2      	b.n	8000752 <__aeabi_d2iz+0x3a>
 800076c:	000003fe 	.word	0x000003fe
 8000770:	0000041d 	.word	0x0000041d
 8000774:	7fffffff 	.word	0x7fffffff
 8000778:	00000433 	.word	0x00000433
 800077c:	00000413 	.word	0x00000413
 8000780:	fffffbed 	.word	0xfffffbed

08000784 <__aeabi_i2d>:
 8000784:	b570      	push	{r4, r5, r6, lr}
 8000786:	2800      	cmp	r0, #0
 8000788:	d016      	beq.n	80007b8 <__aeabi_i2d+0x34>
 800078a:	17c3      	asrs	r3, r0, #31
 800078c:	18c5      	adds	r5, r0, r3
 800078e:	405d      	eors	r5, r3
 8000790:	0fc4      	lsrs	r4, r0, #31
 8000792:	0028      	movs	r0, r5
 8000794:	f000 f826 	bl	80007e4 <__clzsi2>
 8000798:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <__aeabi_i2d+0x5c>)
 800079a:	1a12      	subs	r2, r2, r0
 800079c:	280a      	cmp	r0, #10
 800079e:	dc16      	bgt.n	80007ce <__aeabi_i2d+0x4a>
 80007a0:	0003      	movs	r3, r0
 80007a2:	002e      	movs	r6, r5
 80007a4:	3315      	adds	r3, #21
 80007a6:	409e      	lsls	r6, r3
 80007a8:	230b      	movs	r3, #11
 80007aa:	1a18      	subs	r0, r3, r0
 80007ac:	40c5      	lsrs	r5, r0
 80007ae:	0552      	lsls	r2, r2, #21
 80007b0:	032d      	lsls	r5, r5, #12
 80007b2:	0b2d      	lsrs	r5, r5, #12
 80007b4:	0d53      	lsrs	r3, r2, #21
 80007b6:	e003      	b.n	80007c0 <__aeabi_i2d+0x3c>
 80007b8:	2400      	movs	r4, #0
 80007ba:	2300      	movs	r3, #0
 80007bc:	2500      	movs	r5, #0
 80007be:	2600      	movs	r6, #0
 80007c0:	051b      	lsls	r3, r3, #20
 80007c2:	432b      	orrs	r3, r5
 80007c4:	07e4      	lsls	r4, r4, #31
 80007c6:	4323      	orrs	r3, r4
 80007c8:	0030      	movs	r0, r6
 80007ca:	0019      	movs	r1, r3
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	380b      	subs	r0, #11
 80007d0:	4085      	lsls	r5, r0
 80007d2:	0552      	lsls	r2, r2, #21
 80007d4:	032d      	lsls	r5, r5, #12
 80007d6:	2600      	movs	r6, #0
 80007d8:	0b2d      	lsrs	r5, r5, #12
 80007da:	0d53      	lsrs	r3, r2, #21
 80007dc:	e7f0      	b.n	80007c0 <__aeabi_i2d+0x3c>
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	0000041e 	.word	0x0000041e

080007e4 <__clzsi2>:
 80007e4:	211c      	movs	r1, #28
 80007e6:	2301      	movs	r3, #1
 80007e8:	041b      	lsls	r3, r3, #16
 80007ea:	4298      	cmp	r0, r3
 80007ec:	d301      	bcc.n	80007f2 <__clzsi2+0xe>
 80007ee:	0c00      	lsrs	r0, r0, #16
 80007f0:	3910      	subs	r1, #16
 80007f2:	0a1b      	lsrs	r3, r3, #8
 80007f4:	4298      	cmp	r0, r3
 80007f6:	d301      	bcc.n	80007fc <__clzsi2+0x18>
 80007f8:	0a00      	lsrs	r0, r0, #8
 80007fa:	3908      	subs	r1, #8
 80007fc:	091b      	lsrs	r3, r3, #4
 80007fe:	4298      	cmp	r0, r3
 8000800:	d301      	bcc.n	8000806 <__clzsi2+0x22>
 8000802:	0900      	lsrs	r0, r0, #4
 8000804:	3904      	subs	r1, #4
 8000806:	a202      	add	r2, pc, #8	; (adr r2, 8000810 <__clzsi2+0x2c>)
 8000808:	5c10      	ldrb	r0, [r2, r0]
 800080a:	1840      	adds	r0, r0, r1
 800080c:	4770      	bx	lr
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	02020304 	.word	0x02020304
 8000814:	01010101 	.word	0x01010101
	...

08000820 <jy62_init>:
#define LENGTH_OF_BUFFER 11
const uint8_t angInit[3] = {0xFF, 0xAA, 0x52};
const uint8_t angCalib[3] = {0xFF, 0xAA, 0x67};


void jy62_init(TypeDef_JY62* imu,UART_HandleTypeDef* ipt_huart){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
	// Check imu and uart port
	if(!imu) return;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d033      	beq.n	8000898 <jy62_init+0x78>
	else if (!imu->huart) return;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d031      	beq.n	800089c <jy62_init+0x7c>
	imu->huart = ipt_huart;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	601a      	str	r2, [r3, #0]

	jy62_AngInit(imu);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	0018      	movs	r0, r3
 8000842:	f000 f82f 	bl	80008a4 <jy62_AngInit>
	imu->accel[0] = 0; imu->accel[1] = 0; imu->accel[2] = 0;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	809a      	strh	r2, [r3, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2200      	movs	r2, #0
 8000850:	80da      	strh	r2, [r3, #6]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	811a      	strh	r2, [r3, #8]
	imu->gyro[0] = 0; imu->gyro[1] = 0; imu->gyro[2] = 0;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	815a      	strh	r2, [r3, #10]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	819a      	strh	r2, [r3, #12]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	81da      	strh	r2, [r3, #14]
	imu->angle[0] = 0; imu->angle[1] = 0; imu->angle[2] = 0;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	821a      	strh	r2, [r3, #16]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	825a      	strh	r2, [r3, #18]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	829a      	strh	r2, [r3, #20]

	imu->lastUpdate = HAL_GetTick();
 800087c:	f000 fd76 	bl	800136c <HAL_GetTick>
 8000880:	0002      	movs	r2, r0
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	619a      	str	r2, [r3, #24]
	HAL_UART_Receive_DMA(imu->huart, imu->buffer, LENGTH_OF_BUFFER);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	331c      	adds	r3, #28
 800088e:	220b      	movs	r2, #11
 8000890:	0019      	movs	r1, r3
 8000892:	f001 ffef 	bl	8002874 <HAL_UART_Receive_DMA>
 8000896:	e002      	b.n	800089e <jy62_init+0x7e>
	if(!imu) return;
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	e000      	b.n	800089e <jy62_init+0x7e>
	else if (!imu->huart) return;
 800089c:	46c0      	nop			; (mov r8, r8)
}
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <jy62_AngInit>:
void jy62_AngInit(TypeDef_JY62* imu){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(imu->huart, angInit, 3);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4904      	ldr	r1, [pc, #16]	; (80008c4 <jy62_AngInit+0x20>)
 80008b2:	2203      	movs	r2, #3
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 ff3b 	bl	8002730 <HAL_UART_Transmit_DMA>
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b002      	add	sp, #8
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	08004618 	.word	0x08004618

080008c8 <jy62_DMA_read>:

void jy62_DMA_read(TypeDef_JY62* imu){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(imu->huart, imu->buffer, LENGTH_OF_BUFFER);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6818      	ldr	r0, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	331c      	adds	r3, #28
 80008d8:	220b      	movs	r2, #11
 80008da:	0019      	movs	r1, r3
 80008dc:	f001 ffca 	bl	8002874 <HAL_UART_Receive_DMA>
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <jy62_decoder>:

void jy62_decoder(TypeDef_JY62* imu){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	int sum = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
	short temp = 0;
 80008f4:	230a      	movs	r3, #10
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	2200      	movs	r2, #0
 80008fa:	801a      	strh	r2, [r3, #0]
	if(imu->buffer[0]!=0x51) return;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7f1b      	ldrb	r3, [r3, #28]
 8000900:	2b51      	cmp	r3, #81	; 0x51
 8000902:	d000      	beq.n	8000906 <jy62_decoder+0x1e>
 8000904:	e1a3      	b.n	8000c4e <jy62_decoder+0x366>
	switch (imu->buffer[1]) {
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7f5b      	ldrb	r3, [r3, #29]
 800090a:	2b53      	cmp	r3, #83	; 0x53
 800090c:	d100      	bne.n	8000910 <jy62_decoder+0x28>
 800090e:	e117      	b.n	8000b40 <jy62_decoder+0x258>
 8000910:	dd00      	ble.n	8000914 <jy62_decoder+0x2c>
 8000912:	e19e      	b.n	8000c52 <jy62_decoder+0x36a>
 8000914:	2b51      	cmp	r3, #81	; 0x51
 8000916:	d003      	beq.n	8000920 <jy62_decoder+0x38>
 8000918:	2b52      	cmp	r3, #82	; 0x52
 800091a:	d100      	bne.n	800091e <jy62_decoder+0x36>
 800091c:	e088      	b.n	8000a30 <jy62_decoder+0x148>
			}
			else return;
			break;

		  default:
			  break;
 800091e:	e198      	b.n	8000c52 <jy62_decoder+0x36a>
			sum = imu->buffer[0] + imu->buffer[1] + imu->buffer[2] + imu->buffer[3] +
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7f1b      	ldrb	r3, [r3, #28]
 8000924:	001a      	movs	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7f5b      	ldrb	r3, [r3, #29]
 800092a:	18d3      	adds	r3, r2, r3
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	7f92      	ldrb	r2, [r2, #30]
 8000930:	189b      	adds	r3, r3, r2
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	7fd2      	ldrb	r2, [r2, #31]
 8000936:	189b      	adds	r3, r3, r2
			imu->buffer[4] + imu->buffer[5] + imu->buffer[6] + imu->buffer[7] +
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	2120      	movs	r1, #32
 800093c:	5c52      	ldrb	r2, [r2, r1]
			sum = imu->buffer[0] + imu->buffer[1] + imu->buffer[2] + imu->buffer[3] +
 800093e:	189b      	adds	r3, r3, r2
			imu->buffer[4] + imu->buffer[5] + imu->buffer[6] + imu->buffer[7] +
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	2121      	movs	r1, #33	; 0x21
 8000944:	5c52      	ldrb	r2, [r2, r1]
 8000946:	189b      	adds	r3, r3, r2
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	2122      	movs	r1, #34	; 0x22
 800094c:	5c52      	ldrb	r2, [r2, r1]
 800094e:	189b      	adds	r3, r3, r2
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	2123      	movs	r1, #35	; 0x23
 8000954:	5c52      	ldrb	r2, [r2, r1]
 8000956:	189b      	adds	r3, r3, r2
			imu->buffer[8]+ imu->buffer[9];
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	2124      	movs	r1, #36	; 0x24
 800095c:	5c52      	ldrb	r2, [r2, r1]
			imu->buffer[4] + imu->buffer[5] + imu->buffer[6] + imu->buffer[7] +
 800095e:	189b      	adds	r3, r3, r2
			imu->buffer[8]+ imu->buffer[9];
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	2125      	movs	r1, #37	; 0x25
 8000964:	5c52      	ldrb	r2, [r2, r1]
			sum = imu->buffer[0] + imu->buffer[1] + imu->buffer[2] + imu->buffer[3] +
 8000966:	189b      	adds	r3, r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
			if(sum == imu->buffer[10]){
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2226      	movs	r2, #38	; 0x26
 800096e:	5c9b      	ldrb	r3, [r3, r2]
 8000970:	001a      	movs	r2, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	4293      	cmp	r3, r2
 8000976:	d000      	beq.n	800097a <jy62_decoder+0x92>
 8000978:	e16d      	b.n	8000c56 <jy62_decoder+0x36e>
				imu->angle[0] = ((imu->buffer[3]<<8) |imu->buffer[2]) /32768*16 *9.8;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7fdb      	ldrb	r3, [r3, #31]
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	7f92      	ldrb	r2, [r2, #30]
 8000984:	4313      	orrs	r3, r2
 8000986:	d502      	bpl.n	800098e <jy62_decoder+0xa6>
 8000988:	4ab7      	ldr	r2, [pc, #732]	; (8000c68 <jy62_decoder+0x380>)
 800098a:	4694      	mov	ip, r2
 800098c:	4463      	add	r3, ip
 800098e:	13db      	asrs	r3, r3, #15
 8000990:	011b      	lsls	r3, r3, #4
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff fef6 	bl	8000784 <__aeabi_i2d>
 8000998:	4ab4      	ldr	r2, [pc, #720]	; (8000c6c <jy62_decoder+0x384>)
 800099a:	4bb5      	ldr	r3, [pc, #724]	; (8000c70 <jy62_decoder+0x388>)
 800099c:	f7ff fc50 	bl	8000240 <__aeabi_dmul>
 80009a0:	0002      	movs	r2, r0
 80009a2:	000b      	movs	r3, r1
 80009a4:	0010      	movs	r0, r2
 80009a6:	0019      	movs	r1, r3
 80009a8:	f7ff feb6 	bl	8000718 <__aeabi_d2iz>
 80009ac:	0003      	movs	r3, r0
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	821a      	strh	r2, [r3, #16]
				imu->angle[1] = ((imu->buffer[5]<<8) |imu->buffer[3]) /32768*16 *9.8;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2221      	movs	r2, #33	; 0x21
 80009b8:	5c9b      	ldrb	r3, [r3, r2]
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	7fd2      	ldrb	r2, [r2, #31]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	d502      	bpl.n	80009ca <jy62_decoder+0xe2>
 80009c4:	4aa8      	ldr	r2, [pc, #672]	; (8000c68 <jy62_decoder+0x380>)
 80009c6:	4694      	mov	ip, r2
 80009c8:	4463      	add	r3, ip
 80009ca:	13db      	asrs	r3, r3, #15
 80009cc:	011b      	lsls	r3, r3, #4
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff fed8 	bl	8000784 <__aeabi_i2d>
 80009d4:	4aa5      	ldr	r2, [pc, #660]	; (8000c6c <jy62_decoder+0x384>)
 80009d6:	4ba6      	ldr	r3, [pc, #664]	; (8000c70 <jy62_decoder+0x388>)
 80009d8:	f7ff fc32 	bl	8000240 <__aeabi_dmul>
 80009dc:	0002      	movs	r2, r0
 80009de:	000b      	movs	r3, r1
 80009e0:	0010      	movs	r0, r2
 80009e2:	0019      	movs	r1, r3
 80009e4:	f7ff fe98 	bl	8000718 <__aeabi_d2iz>
 80009e8:	0003      	movs	r3, r0
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	825a      	strh	r2, [r3, #18]
				imu->angle[2] = ((imu->buffer[7]<<8) |imu->buffer[6]) /32768*16 *9.8;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2223      	movs	r2, #35	; 0x23
 80009f4:	5c9b      	ldrb	r3, [r3, r2]
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	2122      	movs	r1, #34	; 0x22
 80009fc:	5c52      	ldrb	r2, [r2, r1]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	d502      	bpl.n	8000a08 <jy62_decoder+0x120>
 8000a02:	4a99      	ldr	r2, [pc, #612]	; (8000c68 <jy62_decoder+0x380>)
 8000a04:	4694      	mov	ip, r2
 8000a06:	4463      	add	r3, ip
 8000a08:	13db      	asrs	r3, r3, #15
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff feb9 	bl	8000784 <__aeabi_i2d>
 8000a12:	4a96      	ldr	r2, [pc, #600]	; (8000c6c <jy62_decoder+0x384>)
 8000a14:	4b96      	ldr	r3, [pc, #600]	; (8000c70 <jy62_decoder+0x388>)
 8000a16:	f7ff fc13 	bl	8000240 <__aeabi_dmul>
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	000b      	movs	r3, r1
 8000a1e:	0010      	movs	r0, r2
 8000a20:	0019      	movs	r1, r3
 8000a22:	f7ff fe79 	bl	8000718 <__aeabi_d2iz>
 8000a26:	0003      	movs	r3, r0
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	829a      	strh	r2, [r3, #20]
			break;
 8000a2e:	e117      	b.n	8000c60 <jy62_decoder+0x378>
			sum = imu->buffer[0] + imu->buffer[1] + imu->buffer[2] + imu->buffer[3] +
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7f1b      	ldrb	r3, [r3, #28]
 8000a34:	001a      	movs	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7f5b      	ldrb	r3, [r3, #29]
 8000a3a:	18d3      	adds	r3, r2, r3
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	7f92      	ldrb	r2, [r2, #30]
 8000a40:	189b      	adds	r3, r3, r2
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	7fd2      	ldrb	r2, [r2, #31]
 8000a46:	189b      	adds	r3, r3, r2
			imu->buffer[4] + imu->buffer[5] + imu->buffer[6] + imu->buffer[7] +
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	5c52      	ldrb	r2, [r2, r1]
			sum = imu->buffer[0] + imu->buffer[1] + imu->buffer[2] + imu->buffer[3] +
 8000a4e:	189b      	adds	r3, r3, r2
			imu->buffer[4] + imu->buffer[5] + imu->buffer[6] + imu->buffer[7] +
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	2121      	movs	r1, #33	; 0x21
 8000a54:	5c52      	ldrb	r2, [r2, r1]
 8000a56:	189b      	adds	r3, r3, r2
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	2122      	movs	r1, #34	; 0x22
 8000a5c:	5c52      	ldrb	r2, [r2, r1]
 8000a5e:	189b      	adds	r3, r3, r2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	2123      	movs	r1, #35	; 0x23
 8000a64:	5c52      	ldrb	r2, [r2, r1]
 8000a66:	189b      	adds	r3, r3, r2
			imu->buffer[8]+ imu->buffer[9];
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	2124      	movs	r1, #36	; 0x24
 8000a6c:	5c52      	ldrb	r2, [r2, r1]
			imu->buffer[4] + imu->buffer[5] + imu->buffer[6] + imu->buffer[7] +
 8000a6e:	189b      	adds	r3, r3, r2
			imu->buffer[8]+ imu->buffer[9];
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	2125      	movs	r1, #37	; 0x25
 8000a74:	5c52      	ldrb	r2, [r2, r1]
			sum = imu->buffer[0] + imu->buffer[1] + imu->buffer[2] + imu->buffer[3] +
 8000a76:	189b      	adds	r3, r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
			if(sum == imu->buffer[10]){
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2226      	movs	r2, #38	; 0x26
 8000a7e:	5c9b      	ldrb	r3, [r3, r2]
 8000a80:	001a      	movs	r2, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d000      	beq.n	8000a8a <jy62_decoder+0x1a2>
 8000a88:	e0e7      	b.n	8000c5a <jy62_decoder+0x372>
				imu->gyro[0] = ((imu->buffer[3]<<8) |imu->buffer[2]) /32768*16 *9.8;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7fdb      	ldrb	r3, [r3, #31]
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	7f92      	ldrb	r2, [r2, #30]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	d502      	bpl.n	8000a9e <jy62_decoder+0x1b6>
 8000a98:	4a73      	ldr	r2, [pc, #460]	; (8000c68 <jy62_decoder+0x380>)
 8000a9a:	4694      	mov	ip, r2
 8000a9c:	4463      	add	r3, ip
 8000a9e:	13db      	asrs	r3, r3, #15
 8000aa0:	011b      	lsls	r3, r3, #4
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fe6e 	bl	8000784 <__aeabi_i2d>
 8000aa8:	4a70      	ldr	r2, [pc, #448]	; (8000c6c <jy62_decoder+0x384>)
 8000aaa:	4b71      	ldr	r3, [pc, #452]	; (8000c70 <jy62_decoder+0x388>)
 8000aac:	f7ff fbc8 	bl	8000240 <__aeabi_dmul>
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	000b      	movs	r3, r1
 8000ab4:	0010      	movs	r0, r2
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	f7ff fe2e 	bl	8000718 <__aeabi_d2iz>
 8000abc:	0003      	movs	r3, r0
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	815a      	strh	r2, [r3, #10]
				imu->gyro[1] = ((imu->buffer[5]<<8) |imu->buffer[3]) /32768*16 *9.8;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2221      	movs	r2, #33	; 0x21
 8000ac8:	5c9b      	ldrb	r3, [r3, r2]
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	7fd2      	ldrb	r2, [r2, #31]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	d502      	bpl.n	8000ada <jy62_decoder+0x1f2>
 8000ad4:	4a64      	ldr	r2, [pc, #400]	; (8000c68 <jy62_decoder+0x380>)
 8000ad6:	4694      	mov	ip, r2
 8000ad8:	4463      	add	r3, ip
 8000ada:	13db      	asrs	r3, r3, #15
 8000adc:	011b      	lsls	r3, r3, #4
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff fe50 	bl	8000784 <__aeabi_i2d>
 8000ae4:	4a61      	ldr	r2, [pc, #388]	; (8000c6c <jy62_decoder+0x384>)
 8000ae6:	4b62      	ldr	r3, [pc, #392]	; (8000c70 <jy62_decoder+0x388>)
 8000ae8:	f7ff fbaa 	bl	8000240 <__aeabi_dmul>
 8000aec:	0002      	movs	r2, r0
 8000aee:	000b      	movs	r3, r1
 8000af0:	0010      	movs	r0, r2
 8000af2:	0019      	movs	r1, r3
 8000af4:	f7ff fe10 	bl	8000718 <__aeabi_d2iz>
 8000af8:	0003      	movs	r3, r0
 8000afa:	b21a      	sxth	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	819a      	strh	r2, [r3, #12]
				imu->gyro[2] = ((imu->buffer[7]<<8) |imu->buffer[6]) /32768*16 *9.8;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2223      	movs	r2, #35	; 0x23
 8000b04:	5c9b      	ldrb	r3, [r3, r2]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	2122      	movs	r1, #34	; 0x22
 8000b0c:	5c52      	ldrb	r2, [r2, r1]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	d502      	bpl.n	8000b18 <jy62_decoder+0x230>
 8000b12:	4a55      	ldr	r2, [pc, #340]	; (8000c68 <jy62_decoder+0x380>)
 8000b14:	4694      	mov	ip, r2
 8000b16:	4463      	add	r3, ip
 8000b18:	13db      	asrs	r3, r3, #15
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fe31 	bl	8000784 <__aeabi_i2d>
 8000b22:	4a52      	ldr	r2, [pc, #328]	; (8000c6c <jy62_decoder+0x384>)
 8000b24:	4b52      	ldr	r3, [pc, #328]	; (8000c70 <jy62_decoder+0x388>)
 8000b26:	f7ff fb8b 	bl	8000240 <__aeabi_dmul>
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	000b      	movs	r3, r1
 8000b2e:	0010      	movs	r0, r2
 8000b30:	0019      	movs	r1, r3
 8000b32:	f7ff fdf1 	bl	8000718 <__aeabi_d2iz>
 8000b36:	0003      	movs	r3, r0
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	81da      	strh	r2, [r3, #14]
			break;
 8000b3e:	e08f      	b.n	8000c60 <jy62_decoder+0x378>
			sum = imu->buffer[0] + imu->buffer[1] + imu->buffer[2] + imu->buffer[3] +
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7f1b      	ldrb	r3, [r3, #28]
 8000b44:	001a      	movs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7f5b      	ldrb	r3, [r3, #29]
 8000b4a:	18d3      	adds	r3, r2, r3
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	7f92      	ldrb	r2, [r2, #30]
 8000b50:	189b      	adds	r3, r3, r2
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	7fd2      	ldrb	r2, [r2, #31]
 8000b56:	189b      	adds	r3, r3, r2
			imu->buffer[4] + imu->buffer[5] + imu->buffer[6] + imu->buffer[7] +
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	5c52      	ldrb	r2, [r2, r1]
			sum = imu->buffer[0] + imu->buffer[1] + imu->buffer[2] + imu->buffer[3] +
 8000b5e:	189b      	adds	r3, r3, r2
			imu->buffer[4] + imu->buffer[5] + imu->buffer[6] + imu->buffer[7] +
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	2121      	movs	r1, #33	; 0x21
 8000b64:	5c52      	ldrb	r2, [r2, r1]
 8000b66:	189b      	adds	r3, r3, r2
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	2122      	movs	r1, #34	; 0x22
 8000b6c:	5c52      	ldrb	r2, [r2, r1]
 8000b6e:	189b      	adds	r3, r3, r2
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	2123      	movs	r1, #35	; 0x23
 8000b74:	5c52      	ldrb	r2, [r2, r1]
 8000b76:	189b      	adds	r3, r3, r2
			imu->buffer[8]+ imu->buffer[9];
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	2124      	movs	r1, #36	; 0x24
 8000b7c:	5c52      	ldrb	r2, [r2, r1]
			imu->buffer[4] + imu->buffer[5] + imu->buffer[6] + imu->buffer[7] +
 8000b7e:	189b      	adds	r3, r3, r2
			imu->buffer[8]+ imu->buffer[9];
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	2125      	movs	r1, #37	; 0x25
 8000b84:	5c52      	ldrb	r2, [r2, r1]
			sum = imu->buffer[0] + imu->buffer[1] + imu->buffer[2] + imu->buffer[3] +
 8000b86:	189b      	adds	r3, r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
			if(sum == imu->buffer[10]){
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2226      	movs	r2, #38	; 0x26
 8000b8e:	5c9b      	ldrb	r3, [r3, r2]
 8000b90:	001a      	movs	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d162      	bne.n	8000c5e <jy62_decoder+0x376>
				imu->angle[0] = ((imu->buffer[3]<<8) |imu->buffer[2]) /32768*16 *9.8;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7fdb      	ldrb	r3, [r3, #31]
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	7f92      	ldrb	r2, [r2, #30]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	d502      	bpl.n	8000bac <jy62_decoder+0x2c4>
 8000ba6:	4a30      	ldr	r2, [pc, #192]	; (8000c68 <jy62_decoder+0x380>)
 8000ba8:	4694      	mov	ip, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	13db      	asrs	r3, r3, #15
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff fde7 	bl	8000784 <__aeabi_i2d>
 8000bb6:	4a2d      	ldr	r2, [pc, #180]	; (8000c6c <jy62_decoder+0x384>)
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <jy62_decoder+0x388>)
 8000bba:	f7ff fb41 	bl	8000240 <__aeabi_dmul>
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	000b      	movs	r3, r1
 8000bc2:	0010      	movs	r0, r2
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	f7ff fda7 	bl	8000718 <__aeabi_d2iz>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	821a      	strh	r2, [r3, #16]
				imu->angle[1] = ((imu->buffer[5]<<8) |imu->buffer[3]) /32768*16 *9.8;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2221      	movs	r2, #33	; 0x21
 8000bd6:	5c9b      	ldrb	r3, [r3, r2]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	7fd2      	ldrb	r2, [r2, #31]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	d502      	bpl.n	8000be8 <jy62_decoder+0x300>
 8000be2:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <jy62_decoder+0x380>)
 8000be4:	4694      	mov	ip, r2
 8000be6:	4463      	add	r3, ip
 8000be8:	13db      	asrs	r3, r3, #15
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fdc9 	bl	8000784 <__aeabi_i2d>
 8000bf2:	4a1e      	ldr	r2, [pc, #120]	; (8000c6c <jy62_decoder+0x384>)
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <jy62_decoder+0x388>)
 8000bf6:	f7ff fb23 	bl	8000240 <__aeabi_dmul>
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	000b      	movs	r3, r1
 8000bfe:	0010      	movs	r0, r2
 8000c00:	0019      	movs	r1, r3
 8000c02:	f7ff fd89 	bl	8000718 <__aeabi_d2iz>
 8000c06:	0003      	movs	r3, r0
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	825a      	strh	r2, [r3, #18]
				imu->angle[2] = ((imu->buffer[7]<<8) |imu->buffer[6]) /32768*16 *9.8;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2223      	movs	r2, #35	; 0x23
 8000c12:	5c9b      	ldrb	r3, [r3, r2]
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	2122      	movs	r1, #34	; 0x22
 8000c1a:	5c52      	ldrb	r2, [r2, r1]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	d502      	bpl.n	8000c26 <jy62_decoder+0x33e>
 8000c20:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <jy62_decoder+0x380>)
 8000c22:	4694      	mov	ip, r2
 8000c24:	4463      	add	r3, ip
 8000c26:	13db      	asrs	r3, r3, #15
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fdaa 	bl	8000784 <__aeabi_i2d>
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <jy62_decoder+0x384>)
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <jy62_decoder+0x388>)
 8000c34:	f7ff fb04 	bl	8000240 <__aeabi_dmul>
 8000c38:	0002      	movs	r2, r0
 8000c3a:	000b      	movs	r3, r1
 8000c3c:	0010      	movs	r0, r2
 8000c3e:	0019      	movs	r1, r3
 8000c40:	f7ff fd6a 	bl	8000718 <__aeabi_d2iz>
 8000c44:	0003      	movs	r3, r0
 8000c46:	b21a      	sxth	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	829a      	strh	r2, [r3, #20]
			break;
 8000c4c:	e008      	b.n	8000c60 <jy62_decoder+0x378>
	if(imu->buffer[0]!=0x51) return;
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	e006      	b.n	8000c60 <jy62_decoder+0x378>
			  break;
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	e004      	b.n	8000c60 <jy62_decoder+0x378>
			else return;
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	e002      	b.n	8000c60 <jy62_decoder+0x378>
			else return;
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	e000      	b.n	8000c60 <jy62_decoder+0x378>
			else return;
 8000c5e:	46c0      	nop			; (mov r8, r8)

	}
}
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	00007fff 	.word	0x00007fff
 8000c6c:	9999999a 	.word	0x9999999a
 8000c70:	40239999 	.word	0x40239999

08000c74 <jy62_calib>:
void jy62_calib(TypeDef_JY62* imu){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(imu->huart, angCalib, 3);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4904      	ldr	r1, [pc, #16]	; (8000c94 <jy62_calib+0x20>)
 8000c82:	2203      	movs	r2, #3
 8000c84:	0018      	movs	r0, r3
 8000c86:	f001 fd53 	bl	8002730 <HAL_UART_Transmit_DMA>
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	0800461c 	.word	0x0800461c

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9a:	b0af      	sub	sp, #188	; 0xbc
 8000c9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9e:	f000 fb0b 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca2:	f000 f8a7 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca6:	f000 f959 	bl	8000f5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000caa:	f000 f8f7 	bl	8000e9c <MX_USART1_UART_Init>
  MX_USART8_UART_Init();
 8000cae:	f000 f925 	bl	8000efc <MX_USART8_UART_Init>
  /* USER CODE BEGIN 2 */
  char strStart[30] = "Initialization start\r\n";
 8000cb2:	2584      	movs	r5, #132	; 0x84
 8000cb4:	1979      	adds	r1, r7, r5
 8000cb6:	4a48      	ldr	r2, [pc, #288]	; (8000dd8 <main+0x140>)
 8000cb8:	000b      	movs	r3, r1
 8000cba:	ca51      	ldmia	r2!, {r0, r4, r6}
 8000cbc:	c351      	stmia	r3!, {r0, r4, r6}
 8000cbe:	ca11      	ldmia	r2!, {r0, r4}
 8000cc0:	c311      	stmia	r3!, {r0, r4}
 8000cc2:	8810      	ldrh	r0, [r2, #0]
 8000cc4:	8018      	strh	r0, [r3, #0]
 8000cc6:	7892      	ldrb	r2, [r2, #2]
 8000cc8:	709a      	strb	r2, [r3, #2]
 8000cca:	2317      	movs	r3, #23
 8000ccc:	18cb      	adds	r3, r1, r3
 8000cce:	2207      	movs	r2, #7
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f002 ffc4 	bl	8003c60 <memset>
  uint16_t strNum = strlen(strStart);
 8000cd8:	197b      	adds	r3, r7, r5
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff fa12 	bl	8000104 <strlen>
 8000ce0:	0002      	movs	r2, r0
 8000ce2:	24aa      	movs	r4, #170	; 0xaa
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	801a      	strh	r2, [r3, #0]

  HAL_UART_Transmit_DMA(&huart8, (uint8_t*)strStart, strNum);
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	881a      	ldrh	r2, [r3, #0]
 8000cec:	1979      	adds	r1, r7, r5
 8000cee:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <main+0x144>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f001 fd1d 	bl	8002730 <HAL_UART_Transmit_DMA>
  jy62_init(imu0,&huart1);
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <main+0x148>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a3a      	ldr	r2, [pc, #232]	; (8000de4 <main+0x14c>)
 8000cfc:	0011      	movs	r1, r2
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff fd8e 	bl	8000820 <jy62_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t start = HAL_GetTick();
 8000d04:	f000 fb32 	bl	800136c <HAL_GetTick>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	22ac      	movs	r2, #172	; 0xac
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	6013      	str	r3, [r2, #0]
  uint32_t end = HAL_GetTick();
 8000d10:	f000 fb2c 	bl	800136c <HAL_GetTick>
 8000d14:	0003      	movs	r3, r0
 8000d16:	22a4      	movs	r2, #164	; 0xa4
 8000d18:	18ba      	adds	r2, r7, r2
 8000d1a:	6013      	str	r3, [r2, #0]

  jy62_DMA_read(imu0);
 8000d1c:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <main+0x148>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff fdd1 	bl	80008c8 <jy62_DMA_read>
  char strEnd[30] = "Initialization End\r\n";
 8000d26:	2564      	movs	r5, #100	; 0x64
 8000d28:	1979      	adds	r1, r7, r5
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	; (8000de8 <main+0x150>)
 8000d2c:	000b      	movs	r3, r1
 8000d2e:	ca51      	ldmia	r2!, {r0, r4, r6}
 8000d30:	c351      	stmia	r3!, {r0, r4, r6}
 8000d32:	ca11      	ldmia	r2!, {r0, r4}
 8000d34:	c311      	stmia	r3!, {r0, r4}
 8000d36:	7812      	ldrb	r2, [r2, #0]
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	2315      	movs	r3, #21
 8000d3c:	18cb      	adds	r3, r1, r3
 8000d3e:	2209      	movs	r2, #9
 8000d40:	2100      	movs	r1, #0
 8000d42:	0018      	movs	r0, r3
 8000d44:	f002 ff8c 	bl	8003c60 <memset>
  strNum = strlen(strEnd);
 8000d48:	197b      	adds	r3, r7, r5
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff f9da 	bl	8000104 <strlen>
 8000d50:	0002      	movs	r2, r0
 8000d52:	24aa      	movs	r4, #170	; 0xaa
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit_DMA(&huart8, (uint8_t*)strEnd, strNum);
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	881a      	ldrh	r2, [r3, #0]
 8000d5c:	1979      	adds	r1, r7, r5
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <main+0x144>)
 8000d60:	0018      	movs	r0, r3
 8000d62:	f001 fce5 	bl	8002730 <HAL_UART_Transmit_DMA>
  while (1)
  {
	  end = HAL_GetTick();
 8000d66:	f000 fb01 	bl	800136c <HAL_GetTick>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	22a4      	movs	r2, #164	; 0xa4
 8000d6e:	18b9      	adds	r1, r7, r2
 8000d70:	600b      	str	r3, [r1, #0]
	  if(end - start >= 10E4){
 8000d72:	18bb      	adds	r3, r7, r2
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	24ac      	movs	r4, #172	; 0xac
 8000d78:	193b      	adds	r3, r7, r4
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <main+0x154>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d909      	bls.n	8000d98 <main+0x100>
		  jy62_calib(imu0);
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <main+0x148>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ff73 	bl	8000c74 <jy62_calib>
		  start = HAL_GetTick();
 8000d8e:	f000 faed 	bl	800136c <HAL_GetTick>
 8000d92:	0003      	movs	r3, r0
 8000d94:	193a      	adds	r2, r7, r4
 8000d96:	6013      	str	r3, [r2, #0]
	  }

    /* USER CODE END WHILE */
	  char strPrint[100];
	  uint16_t numStr = sprintf(strPrint,"Roll %d, Pitch %d, Yaw %d", imu0->angle[0], imu0->angle[1],
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <main+0x148>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	5e9b      	ldrsh	r3, [r3, r2]
 8000da0:	001a      	movs	r2, r3
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <main+0x148>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2112      	movs	r1, #18
 8000da8:	5e5b      	ldrsh	r3, [r3, r1]
 8000daa:	001c      	movs	r4, r3
			  imu0->angle[2]);
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <main+0x148>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2114      	movs	r1, #20
 8000db2:	5e5b      	ldrsh	r3, [r3, r1]
	  uint16_t numStr = sprintf(strPrint,"Roll %d, Pitch %d, Yaw %d", imu0->angle[0], imu0->angle[1],
 8000db4:	490e      	ldr	r1, [pc, #56]	; (8000df0 <main+0x158>)
 8000db6:	0038      	movs	r0, r7
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	0023      	movs	r3, r4
 8000dbc:	f002 ff58 	bl	8003c70 <siprintf>
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	21a2      	movs	r1, #162	; 0xa2
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit_DMA(&huart8, (uint8_t*) strPrint, numStr);
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	881a      	ldrh	r2, [r3, #0]
 8000dcc:	0039      	movs	r1, r7
 8000dce:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <main+0x144>)
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f001 fcad 	bl	8002730 <HAL_UART_Transmit_DMA>
  {
 8000dd6:	e7c6      	b.n	8000d66 <main+0xce>
 8000dd8:	08004578 	.word	0x08004578
 8000ddc:	20000110 	.word	0x20000110
 8000de0:	20000194 	.word	0x20000194
 8000de4:	2000008c 	.word	0x2000008c
 8000de8:	08004598 	.word	0x08004598
 8000dec:	0001869f 	.word	0x0001869f
 8000df0:	0800455c 	.word	0x0800455c

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b099      	sub	sp, #100	; 0x64
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	242c      	movs	r4, #44	; 0x2c
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2334      	movs	r3, #52	; 0x34
 8000e02:	001a      	movs	r2, r3
 8000e04:	2100      	movs	r1, #0
 8000e06:	f002 ff2b 	bl	8003c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0a:	231c      	movs	r3, #28
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	0018      	movs	r0, r3
 8000e10:	2310      	movs	r3, #16
 8000e12:	001a      	movs	r2, r3
 8000e14:	2100      	movs	r1, #0
 8000e16:	f002 ff23 	bl	8003c60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	231c      	movs	r3, #28
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f002 ff1c 	bl	8003c60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	2201      	movs	r2, #1
 8000e32:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f000 fe23 	bl	8001a88 <HAL_RCC_OscConfig>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000e46:	f000 f8f3 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4a:	211c      	movs	r1, #28
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2207      	movs	r2, #7
 8000e50:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2203      	movs	r2, #3
 8000e56:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2101      	movs	r1, #1
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 f993 	bl	8002194 <HAL_RCC_ClockConfig>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e72:	f000 f8dd 	bl	8001030 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e76:	003b      	movs	r3, r7
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e7c:	003b      	movs	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e82:	003b      	movs	r3, r7
 8000e84:	0018      	movs	r0, r3
 8000e86:	f001 faff 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e8e:	f000 f8cf 	bl	8001030 <Error_Handler>
  }
}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b019      	add	sp, #100	; 0x64
 8000e98:	bd90      	pop	{r4, r7, pc}
	...

08000e9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ea2:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <MX_USART1_UART_Init+0x5c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ea8:	22e1      	movs	r2, #225	; 0xe1
 8000eaa:	0252      	lsls	r2, r2, #9
 8000eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f001 fbd1 	bl	8002688 <HAL_UART_Init>
 8000ee6:	1e03      	subs	r3, r0, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eea:	f000 f8a1 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000008c 	.word	0x2000008c
 8000ef8:	40013800 	.word	0x40013800

08000efc <MX_USART8_UART_Init>:
  * @brief USART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART8_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART8_Init 0 */

  /* USER CODE BEGIN USART8_Init 1 */

  /* USER CODE END USART8_Init 1 */
  huart8.Instance = USART8;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_USART8_UART_Init+0x58>)
 8000f02:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <MX_USART8_UART_Init+0x5c>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_USART8_UART_Init+0x58>)
 8000f08:	22e1      	movs	r2, #225	; 0xe1
 8000f0a:	0252      	lsls	r2, r2, #9
 8000f0c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_USART8_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_USART8_UART_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_USART8_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_USART8_UART_Init+0x58>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_USART8_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_USART8_UART_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_USART8_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_USART8_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <MX_USART8_UART_Init+0x58>)
 8000f40:	0018      	movs	r0, r3
 8000f42:	f001 fba1 	bl	8002688 <HAL_UART_Init>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART8_UART_Init+0x52>
  {
    Error_Handler();
 8000f4a:	f000 f871 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART8_Init 2 */

  /* USER CODE END USART8_Init 2 */

}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000110 	.word	0x20000110
 8000f58:	40011c00 	.word	0x40011c00

08000f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	240c      	movs	r4, #12
 8000f64:	193b      	adds	r3, r7, r4
 8000f66:	0018      	movs	r0, r3
 8000f68:	2314      	movs	r3, #20
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	f002 fe77 	bl	8003c60 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_GPIO_Init+0xa8>)
 8000f74:	695a      	ldr	r2, [r3, #20]
 8000f76:	4b23      	ldr	r3, [pc, #140]	; (8001004 <MX_GPIO_Init+0xa8>)
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	0309      	lsls	r1, r1, #12
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MX_GPIO_Init+0xa8>)
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	031b      	lsls	r3, r3, #12
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_GPIO_Init+0xa8>)
 8000f90:	695a      	ldr	r2, [r3, #20]
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_GPIO_Init+0xa8>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	03c9      	lsls	r1, r1, #15
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_GPIO_Init+0xa8>)
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	03db      	lsls	r3, r3, #15
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_GPIO_Init+0xa8>)
 8000fac:	695a      	ldr	r2, [r3, #20]
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_GPIO_Init+0xa8>)
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	0289      	lsls	r1, r1, #10
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	615a      	str	r2, [r3, #20]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_GPIO_Init+0xa8>)
 8000fba:	695a      	ldr	r2, [r3, #20]
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	029b      	lsls	r3, r3, #10
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000fc6:	2390      	movs	r3, #144	; 0x90
 8000fc8:	05db      	lsls	r3, r3, #23
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2120      	movs	r1, #32
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 fd3c 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8000fd4:	0021      	movs	r1, r4
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2220      	movs	r2, #32
 8000fda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2201      	movs	r2, #1
 8000fe0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8000fee:	187a      	adds	r2, r7, r1
 8000ff0:	2390      	movs	r3, #144	; 0x90
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 fbb0 	bl	800175c <HAL_GPIO_Init>

}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b009      	add	sp, #36	; 0x24
 8001002:	bd90      	pop	{r4, r7, pc}
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	jy62_DMA_read(imu0);
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_UART_RxCpltCallback+0x24>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff fc57 	bl	80008c8 <jy62_DMA_read>
	jy62_decoder(imu0);
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <HAL_UART_RxCpltCallback+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff fc62 	bl	80008e8 <jy62_decoder>
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000194 	.word	0x20000194

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	e7fe      	b.n	8001038 <Error_Handler+0x8>
	...

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_MspInit+0x44>)
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_MspInit+0x44>)
 8001048:	2101      	movs	r1, #1
 800104a:	430a      	orrs	r2, r1
 800104c:	619a      	str	r2, [r3, #24]
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_MspInit+0x44>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	2201      	movs	r2, #1
 8001054:	4013      	ands	r3, r2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_MspInit+0x44>)
 800105c:	69da      	ldr	r2, [r3, #28]
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_MspInit+0x44>)
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	0549      	lsls	r1, r1, #21
 8001064:	430a      	orrs	r2, r1
 8001066:	61da      	str	r2, [r3, #28]
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_MspInit+0x44>)
 800106a:	69da      	ldr	r2, [r3, #28]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	055b      	lsls	r3, r3, #21
 8001070:	4013      	ands	r3, r2
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b08d      	sub	sp, #52	; 0x34
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	241c      	movs	r4, #28
 800108e:	193b      	adds	r3, r7, r4
 8001090:	0018      	movs	r0, r3
 8001092:	2314      	movs	r3, #20
 8001094:	001a      	movs	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f002 fde2 	bl	8003c60 <memset>
  if(huart->Instance==USART1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a3c      	ldr	r2, [pc, #240]	; (8001194 <HAL_UART_MspInit+0x110>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d13c      	bne.n	8001120 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010a6:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <HAL_UART_MspInit+0x114>)
 80010a8:	699a      	ldr	r2, [r3, #24]
 80010aa:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <HAL_UART_MspInit+0x114>)
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	01c9      	lsls	r1, r1, #7
 80010b0:	430a      	orrs	r2, r1
 80010b2:	619a      	str	r2, [r3, #24]
 80010b4:	4b38      	ldr	r3, [pc, #224]	; (8001198 <HAL_UART_MspInit+0x114>)
 80010b6:	699a      	ldr	r2, [r3, #24]
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	01db      	lsls	r3, r3, #7
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b35      	ldr	r3, [pc, #212]	; (8001198 <HAL_UART_MspInit+0x114>)
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <HAL_UART_MspInit+0x114>)
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	0289      	lsls	r1, r1, #10
 80010cc:	430a      	orrs	r2, r1
 80010ce:	615a      	str	r2, [r3, #20]
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_UART_MspInit+0x114>)
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	029b      	lsls	r3, r3, #10
 80010d8:	4013      	ands	r3, r2
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	22c0      	movs	r2, #192	; 0xc0
 80010e2:	00d2      	lsls	r2, r2, #3
 80010e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	0021      	movs	r1, r4
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2202      	movs	r2, #2
 80010ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2203      	movs	r2, #3
 80010f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2201      	movs	r2, #1
 80010fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	187a      	adds	r2, r7, r1
 8001102:	2390      	movs	r3, #144	; 0x90
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f000 fb27 	bl	800175c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	201b      	movs	r0, #27
 8001114:	f000 f9e0 	bl	80014d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001118:	201b      	movs	r0, #27
 800111a:	f000 f9f2 	bl	8001502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART8_MspInit 1 */

  /* USER CODE END USART8_MspInit 1 */
  }

}
 800111e:	e034      	b.n	800118a <HAL_UART_MspInit+0x106>
  else if(huart->Instance==USART8)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_UART_MspInit+0x118>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12f      	bne.n	800118a <HAL_UART_MspInit+0x106>
    __HAL_RCC_USART8_CLK_ENABLE();
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_UART_MspInit+0x114>)
 800112c:	699a      	ldr	r2, [r3, #24]
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_UART_MspInit+0x114>)
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	430a      	orrs	r2, r1
 8001134:	619a      	str	r2, [r3, #24]
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_UART_MspInit+0x114>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_UART_MspInit+0x114>)
 8001144:	695a      	ldr	r2, [r3, #20]
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_UART_MspInit+0x114>)
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	0309      	lsls	r1, r1, #12
 800114c:	430a      	orrs	r2, r1
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_UART_MspInit+0x114>)
 8001152:	695a      	ldr	r2, [r3, #20]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	031b      	lsls	r3, r3, #12
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800115e:	211c      	movs	r1, #28
 8001160:	187b      	adds	r3, r7, r1
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	187b      	adds	r3, r7, r1
 8001168:	2202      	movs	r2, #2
 800116a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	187b      	adds	r3, r7, r1
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2203      	movs	r2, #3
 8001176:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART8;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2202      	movs	r2, #2
 800117c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	187b      	adds	r3, r7, r1
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_UART_MspInit+0x11c>)
 8001182:	0019      	movs	r1, r3
 8001184:	0010      	movs	r0, r2
 8001186:	f000 fae9 	bl	800175c <HAL_GPIO_Init>
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b00d      	add	sp, #52	; 0x34
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	40013800 	.word	0x40013800
 8001198:	40021000 	.word	0x40021000
 800119c:	40011c00 	.word	0x40011c00
 80011a0:	48000800 	.word	0x48000800

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c8:	f000 f8be 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <USART1_IRQHandler+0x14>)
 80011da:	0018      	movs	r0, r3
 80011dc:	f001 fbac 	bl	8002938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	2000008c 	.word	0x2000008c

080011ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f4:	4a14      	ldr	r2, [pc, #80]	; (8001248 <_sbrk+0x5c>)
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <_sbrk+0x60>)
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <_sbrk+0x64>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <_sbrk+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	18d3      	adds	r3, r2, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	429a      	cmp	r2, r3
 800121a:	d207      	bcs.n	800122c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800121c:	f002 fcf6 	bl	8003c0c <__errno>
 8001220:	0003      	movs	r3, r0
 8001222:	220c      	movs	r2, #12
 8001224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001226:	2301      	movs	r3, #1
 8001228:	425b      	negs	r3, r3
 800122a:	e009      	b.n	8001240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	18d2      	adds	r2, r2, r3
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <_sbrk+0x64>)
 800123c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	b006      	add	sp, #24
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20008000 	.word	0x20008000
 800124c:	00000400 	.word	0x00000400
 8001250:	20000198 	.word	0x20000198
 8001254:	200001b0 	.word	0x200001b0

08001258 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001266:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800126a:	490e      	ldr	r1, [pc, #56]	; (80012a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <LoopForever+0xe>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001280:	4c0b      	ldr	r4, [pc, #44]	; (80012b0 <LoopForever+0x16>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800128e:	f7ff ffe3 	bl	8001258 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001292:	f002 fcc1 	bl	8003c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001296:	f7ff fcff 	bl	8000c98 <main>

0800129a <LoopForever>:

LoopForever:
    b LoopForever
 800129a:	e7fe      	b.n	800129a <LoopForever>
  ldr   r0, =_estack
 800129c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012a8:	08004674 	.word	0x08004674
  ldr r2, =_sbss
 80012ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012b0:	200001b0 	.word	0x200001b0

080012b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC1_COMP_IRQHandler>
	...

080012b8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <HAL_Init+0x24>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_Init+0x24>)
 80012c2:	2110      	movs	r1, #16
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f809 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ce:	f7ff feb5 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	40022000 	.word	0x40022000

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_InitTick+0x5c>)
 80012ea:	681c      	ldr	r4, [r3, #0]
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_InitTick+0x60>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	0019      	movs	r1, r3
 80012f2:	23fa      	movs	r3, #250	; 0xfa
 80012f4:	0098      	lsls	r0, r3, #2
 80012f6:	f7fe ff17 	bl	8000128 <__udivsi3>
 80012fa:	0003      	movs	r3, r0
 80012fc:	0019      	movs	r1, r3
 80012fe:	0020      	movs	r0, r4
 8001300:	f7fe ff12 	bl	8000128 <__udivsi3>
 8001304:	0003      	movs	r3, r0
 8001306:	0018      	movs	r0, r3
 8001308:	f000 f90b 	bl	8001522 <HAL_SYSTICK_Config>
 800130c:	1e03      	subs	r3, r0, #0
 800130e:	d001      	beq.n	8001314 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e00f      	b.n	8001334 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b03      	cmp	r3, #3
 8001318:	d80b      	bhi.n	8001332 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	2301      	movs	r3, #1
 800131e:	425b      	negs	r3, r3
 8001320:	2200      	movs	r2, #0
 8001322:	0018      	movs	r0, r3
 8001324:	f000 f8d8 	bl	80014d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_InitTick+0x64>)
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	b003      	add	sp, #12
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	20000000 	.word	0x20000000
 8001340:	20000008 	.word	0x20000008
 8001344:	20000004 	.word	0x20000004

08001348 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_IncTick+0x1c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	001a      	movs	r2, r3
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_IncTick+0x20>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	18d2      	adds	r2, r2, r3
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_IncTick+0x20>)
 800135a:	601a      	str	r2, [r3, #0]
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	20000008 	.word	0x20000008
 8001368:	2000019c 	.word	0x2000019c

0800136c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b02      	ldr	r3, [pc, #8]	; (800137c <HAL_GetTick+0x10>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	2000019c 	.word	0x2000019c

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	0002      	movs	r2, r0
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b7f      	cmp	r3, #127	; 0x7f
 8001392:	d809      	bhi.n	80013a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001394:	1dfb      	adds	r3, r7, #7
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	001a      	movs	r2, r3
 800139a:	231f      	movs	r3, #31
 800139c:	401a      	ands	r2, r3
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__NVIC_EnableIRQ+0x30>)
 80013a0:	2101      	movs	r1, #1
 80013a2:	4091      	lsls	r1, r2
 80013a4:	000a      	movs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
  }
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	0002      	movs	r2, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b7f      	cmp	r3, #127	; 0x7f
 80013c8:	d828      	bhi.n	800141c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ca:	4a2f      	ldr	r2, [pc, #188]	; (8001488 <__NVIC_SetPriority+0xd4>)
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	33c0      	adds	r3, #192	; 0xc0
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	589b      	ldr	r3, [r3, r2]
 80013da:	1dfa      	adds	r2, r7, #7
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	0011      	movs	r1, r2
 80013e0:	2203      	movs	r2, #3
 80013e2:	400a      	ands	r2, r1
 80013e4:	00d2      	lsls	r2, r2, #3
 80013e6:	21ff      	movs	r1, #255	; 0xff
 80013e8:	4091      	lsls	r1, r2
 80013ea:	000a      	movs	r2, r1
 80013ec:	43d2      	mvns	r2, r2
 80013ee:	401a      	ands	r2, r3
 80013f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	22ff      	movs	r2, #255	; 0xff
 80013f8:	401a      	ands	r2, r3
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	0018      	movs	r0, r3
 8001400:	2303      	movs	r3, #3
 8001402:	4003      	ands	r3, r0
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001408:	481f      	ldr	r0, [pc, #124]	; (8001488 <__NVIC_SetPriority+0xd4>)
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	430a      	orrs	r2, r1
 8001414:	33c0      	adds	r3, #192	; 0xc0
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800141a:	e031      	b.n	8001480 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <__NVIC_SetPriority+0xd8>)
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	0019      	movs	r1, r3
 8001424:	230f      	movs	r3, #15
 8001426:	400b      	ands	r3, r1
 8001428:	3b08      	subs	r3, #8
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3306      	adds	r3, #6
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	18d3      	adds	r3, r2, r3
 8001432:	3304      	adds	r3, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1dfa      	adds	r2, r7, #7
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	0011      	movs	r1, r2
 800143c:	2203      	movs	r2, #3
 800143e:	400a      	ands	r2, r1
 8001440:	00d2      	lsls	r2, r2, #3
 8001442:	21ff      	movs	r1, #255	; 0xff
 8001444:	4091      	lsls	r1, r2
 8001446:	000a      	movs	r2, r1
 8001448:	43d2      	mvns	r2, r2
 800144a:	401a      	ands	r2, r3
 800144c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	019b      	lsls	r3, r3, #6
 8001452:	22ff      	movs	r2, #255	; 0xff
 8001454:	401a      	ands	r2, r3
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	0018      	movs	r0, r3
 800145c:	2303      	movs	r3, #3
 800145e:	4003      	ands	r3, r0
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001464:	4809      	ldr	r0, [pc, #36]	; (800148c <__NVIC_SetPriority+0xd8>)
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	001c      	movs	r4, r3
 800146c:	230f      	movs	r3, #15
 800146e:	4023      	ands	r3, r4
 8001470:	3b08      	subs	r3, #8
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	430a      	orrs	r2, r1
 8001476:	3306      	adds	r3, #6
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	18c3      	adds	r3, r0, r3
 800147c:	3304      	adds	r3, #4
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b003      	add	sp, #12
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	1e5a      	subs	r2, r3, #1
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	045b      	lsls	r3, r3, #17
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d301      	bcc.n	80014a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a4:	2301      	movs	r3, #1
 80014a6:	e010      	b.n	80014ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <SysTick_Config+0x44>)
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	3a01      	subs	r2, #1
 80014ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b0:	2301      	movs	r3, #1
 80014b2:	425b      	negs	r3, r3
 80014b4:	2103      	movs	r1, #3
 80014b6:	0018      	movs	r0, r3
 80014b8:	f7ff ff7c 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <SysTick_Config+0x44>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <SysTick_Config+0x44>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	210f      	movs	r1, #15
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	1c02      	adds	r2, r0, #0
 80014e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	0011      	movs	r1, r2
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff ff5d 	bl	80013b4 <__NVIC_SetPriority>
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b004      	add	sp, #16
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	0002      	movs	r2, r0
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b25b      	sxtb	r3, r3
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff ff33 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff ffaf 	bl	8001490 <SysTick_Config>
 8001532:	0003      	movs	r3, r0
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800154a:	2317      	movs	r3, #23
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2220      	movs	r2, #32
 8001556:	5c9b      	ldrb	r3, [r3, r2]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_DMA_Start_IT+0x24>
 800155c:	2302      	movs	r3, #2
 800155e:	e04f      	b.n	8001600 <HAL_DMA_Start_IT+0xc4>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2220      	movs	r2, #32
 8001564:	2101      	movs	r1, #1
 8001566:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2221      	movs	r2, #33	; 0x21
 800156c:	5c9b      	ldrb	r3, [r3, r2]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b01      	cmp	r3, #1
 8001572:	d13a      	bne.n	80015ea <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2221      	movs	r2, #33	; 0x21
 8001578:	2102      	movs	r1, #2
 800157a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	438a      	bics	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 f8b2 	bl	8001702 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d008      	beq.n	80015b8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	210e      	movs	r1, #14
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e00f      	b.n	80015d8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	210a      	movs	r1, #10
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2104      	movs	r1, #4
 80015d4:	438a      	bics	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2101      	movs	r1, #1
 80015e4:	430a      	orrs	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	e007      	b.n	80015fa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2220      	movs	r2, #32
 80015ee:	2100      	movs	r1, #0
 80015f0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80015f2:	2317      	movs	r3, #23
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	2202      	movs	r2, #2
 80015f8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80015fa:	2317      	movs	r3, #23
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	781b      	ldrb	r3, [r3, #0]
} 
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b006      	add	sp, #24
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2221      	movs	r2, #33	; 0x21
 8001614:	5c9b      	ldrb	r3, [r3, r2]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d008      	beq.n	800162e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2204      	movs	r2, #4
 8001620:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2220      	movs	r2, #32
 8001626:	2100      	movs	r1, #0
 8001628:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e020      	b.n	8001670 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	210e      	movs	r1, #14
 800163a:	438a      	bics	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2101      	movs	r1, #1
 800164a:	438a      	bics	r2, r1
 800164c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001656:	2101      	movs	r1, #1
 8001658:	4091      	lsls	r1, r2
 800165a:	000a      	movs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2221      	movs	r2, #33	; 0x21
 8001662:	2101      	movs	r1, #1
 8001664:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2220      	movs	r2, #32
 800166a:	2100      	movs	r1, #0
 800166c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	b002      	add	sp, #8
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001680:	210f      	movs	r1, #15
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2221      	movs	r2, #33	; 0x21
 800168c:	5c9b      	ldrb	r3, [r3, r2]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d006      	beq.n	80016a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2204      	movs	r2, #4
 8001698:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	e028      	b.n	80016f4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	210e      	movs	r1, #14
 80016ae:	438a      	bics	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	438a      	bics	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ca:	2101      	movs	r1, #1
 80016cc:	4091      	lsls	r1, r2
 80016ce:	000a      	movs	r2, r1
 80016d0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2221      	movs	r2, #33	; 0x21
 80016d6:	2101      	movs	r1, #1
 80016d8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2220      	movs	r2, #32
 80016de:	2100      	movs	r1, #0
 80016e0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d004      	beq.n	80016f4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	0010      	movs	r0, r2
 80016f2:	4798      	blx	r3
    } 
  }
  return status;
 80016f4:	230f      	movs	r3, #15
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	781b      	ldrb	r3, [r3, #0]
}
 80016fa:	0018      	movs	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b004      	add	sp, #16
 8001700:	bd80      	pop	{r7, pc}

08001702 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001718:	2101      	movs	r1, #1
 800171a:	4091      	lsls	r1, r2
 800171c:	000a      	movs	r2, r1
 800171e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b10      	cmp	r3, #16
 800172e:	d108      	bne.n	8001742 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001740:	e007      	b.n	8001752 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	60da      	str	r2, [r3, #12]
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b004      	add	sp, #16
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176a:	e155      	b.n	8001a18 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2101      	movs	r1, #1
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4091      	lsls	r1, r2
 8001776:	000a      	movs	r2, r1
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d100      	bne.n	8001784 <HAL_GPIO_Init+0x28>
 8001782:	e146      	b.n	8001a12 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	4013      	ands	r3, r2
 800178c:	2b01      	cmp	r3, #1
 800178e:	d005      	beq.n	800179c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2203      	movs	r2, #3
 8001796:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001798:	2b02      	cmp	r3, #2
 800179a:	d130      	bne.n	80017fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	409a      	lsls	r2, r3
 80017aa:	0013      	movs	r3, r2
 80017ac:	43da      	mvns	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	409a      	lsls	r2, r3
 80017be:	0013      	movs	r3, r2
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d2:	2201      	movs	r2, #1
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	43da      	mvns	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	2201      	movs	r2, #1
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
 80017f0:	0013      	movs	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	4013      	ands	r3, r2
 8001806:	2b03      	cmp	r3, #3
 8001808:	d017      	beq.n	800183a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	409a      	lsls	r2, r3
 8001818:	0013      	movs	r3, r2
 800181a:	43da      	mvns	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	409a      	lsls	r2, r3
 800182c:	0013      	movs	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2203      	movs	r2, #3
 8001840:	4013      	ands	r3, r2
 8001842:	2b02      	cmp	r3, #2
 8001844:	d123      	bne.n	800188e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3208      	adds	r2, #8
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	58d3      	ldr	r3, [r2, r3]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2207      	movs	r2, #7
 8001858:	4013      	ands	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	43da      	mvns	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2107      	movs	r1, #7
 8001872:	400b      	ands	r3, r1
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	409a      	lsls	r2, r3
 8001878:	0013      	movs	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	0092      	lsls	r2, r2, #2
 800188a:	6939      	ldr	r1, [r7, #16]
 800188c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	409a      	lsls	r2, r3
 800189c:	0013      	movs	r3, r2
 800189e:	43da      	mvns	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2203      	movs	r2, #3
 80018ac:	401a      	ands	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	23c0      	movs	r3, #192	; 0xc0
 80018c8:	029b      	lsls	r3, r3, #10
 80018ca:	4013      	ands	r3, r2
 80018cc:	d100      	bne.n	80018d0 <HAL_GPIO_Init+0x174>
 80018ce:	e0a0      	b.n	8001a12 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d0:	4b57      	ldr	r3, [pc, #348]	; (8001a30 <HAL_GPIO_Init+0x2d4>)
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <HAL_GPIO_Init+0x2d4>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	430a      	orrs	r2, r1
 80018da:	619a      	str	r2, [r3, #24]
 80018dc:	4b54      	ldr	r3, [pc, #336]	; (8001a30 <HAL_GPIO_Init+0x2d4>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2201      	movs	r2, #1
 80018e2:	4013      	ands	r3, r2
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018e8:	4a52      	ldr	r2, [pc, #328]	; (8001a34 <HAL_GPIO_Init+0x2d8>)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	589b      	ldr	r3, [r3, r2]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2203      	movs	r2, #3
 80018fa:	4013      	ands	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	220f      	movs	r2, #15
 8001900:	409a      	lsls	r2, r3
 8001902:	0013      	movs	r3, r2
 8001904:	43da      	mvns	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	2390      	movs	r3, #144	; 0x90
 8001910:	05db      	lsls	r3, r3, #23
 8001912:	429a      	cmp	r2, r3
 8001914:	d019      	beq.n	800194a <HAL_GPIO_Init+0x1ee>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a47      	ldr	r2, [pc, #284]	; (8001a38 <HAL_GPIO_Init+0x2dc>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0x1ea>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a46      	ldr	r2, [pc, #280]	; (8001a3c <HAL_GPIO_Init+0x2e0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d00d      	beq.n	8001942 <HAL_GPIO_Init+0x1e6>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a45      	ldr	r2, [pc, #276]	; (8001a40 <HAL_GPIO_Init+0x2e4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d007      	beq.n	800193e <HAL_GPIO_Init+0x1e2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a44      	ldr	r2, [pc, #272]	; (8001a44 <HAL_GPIO_Init+0x2e8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_GPIO_Init+0x1de>
 8001936:	2304      	movs	r3, #4
 8001938:	e008      	b.n	800194c <HAL_GPIO_Init+0x1f0>
 800193a:	2305      	movs	r3, #5
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x1f0>
 800193e:	2303      	movs	r3, #3
 8001940:	e004      	b.n	800194c <HAL_GPIO_Init+0x1f0>
 8001942:	2302      	movs	r3, #2
 8001944:	e002      	b.n	800194c <HAL_GPIO_Init+0x1f0>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x1f0>
 800194a:	2300      	movs	r3, #0
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	2103      	movs	r1, #3
 8001950:	400a      	ands	r2, r1
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4093      	lsls	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800195c:	4935      	ldr	r1, [pc, #212]	; (8001a34 <HAL_GPIO_Init+0x2d8>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_GPIO_Init+0x2ec>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43da      	mvns	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	025b      	lsls	r3, r3, #9
 8001982:	4013      	ands	r3, r2
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_GPIO_Init+0x2ec>)
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_GPIO_Init+0x2ec>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43da      	mvns	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	029b      	lsls	r3, r3, #10
 80019ac:	4013      	ands	r3, r2
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019b8:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_GPIO_Init+0x2ec>)
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_GPIO_Init+0x2ec>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43da      	mvns	r2, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	035b      	lsls	r3, r3, #13
 80019d6:	4013      	ands	r3, r2
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_GPIO_Init+0x2ec>)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_GPIO_Init+0x2ec>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43da      	mvns	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	039b      	lsls	r3, r3, #14
 8001a00:	4013      	ands	r3, r2
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_GPIO_Init+0x2ec>)
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	40da      	lsrs	r2, r3
 8001a20:	1e13      	subs	r3, r2, #0
 8001a22:	d000      	beq.n	8001a26 <HAL_GPIO_Init+0x2ca>
 8001a24:	e6a2      	b.n	800176c <HAL_GPIO_Init+0x10>
  } 
}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b006      	add	sp, #24
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010000 	.word	0x40010000
 8001a38:	48000400 	.word	0x48000400
 8001a3c:	48000800 	.word	0x48000800
 8001a40:	48000c00 	.word	0x48000c00
 8001a44:	48001000 	.word	0x48001000
 8001a48:	40010400 	.word	0x40010400

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	0008      	movs	r0, r1
 8001a56:	0011      	movs	r1, r2
 8001a58:	1cbb      	adds	r3, r7, #2
 8001a5a:	1c02      	adds	r2, r0, #0
 8001a5c:	801a      	strh	r2, [r3, #0]
 8001a5e:	1c7b      	adds	r3, r7, #1
 8001a60:	1c0a      	adds	r2, r1, #0
 8001a62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a64:	1c7b      	adds	r3, r7, #1
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6c:	1cbb      	adds	r3, r7, #2
 8001a6e:	881a      	ldrh	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a76:	1cbb      	adds	r3, r7, #2
 8001a78:	881a      	ldrh	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b002      	add	sp, #8
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f000 fb76 	bl	8002188 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d100      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x20>
 8001aa6:	e08e      	b.n	8001bc6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aa8:	4bc5      	ldr	r3, [pc, #788]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	220c      	movs	r2, #12
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d00e      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab4:	4bc2      	ldr	r3, [pc, #776]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	220c      	movs	r2, #12
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d117      	bne.n	8001af0 <HAL_RCC_OscConfig+0x68>
 8001ac0:	4bbf      	ldr	r3, [pc, #764]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	23c0      	movs	r3, #192	; 0xc0
 8001ac6:	025b      	lsls	r3, r3, #9
 8001ac8:	401a      	ands	r2, r3
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	025b      	lsls	r3, r3, #9
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d10e      	bne.n	8001af0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad2:	4bbb      	ldr	r3, [pc, #748]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	029b      	lsls	r3, r3, #10
 8001ada:	4013      	ands	r3, r2
 8001adc:	d100      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x58>
 8001ade:	e071      	b.n	8001bc4 <HAL_RCC_OscConfig+0x13c>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d000      	beq.n	8001aea <HAL_RCC_OscConfig+0x62>
 8001ae8:	e06c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f000 fb4c 	bl	8002188 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_OscConfig+0x80>
 8001af8:	4bb1      	ldr	r3, [pc, #708]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4bb0      	ldr	r3, [pc, #704]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	0249      	lsls	r1, r1, #9
 8001b02:	430a      	orrs	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	e02f      	b.n	8001b68 <HAL_RCC_OscConfig+0xe0>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10c      	bne.n	8001b2a <HAL_RCC_OscConfig+0xa2>
 8001b10:	4bab      	ldr	r3, [pc, #684]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4baa      	ldr	r3, [pc, #680]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b16:	49ab      	ldr	r1, [pc, #684]	; (8001dc4 <HAL_RCC_OscConfig+0x33c>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	4ba8      	ldr	r3, [pc, #672]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4ba7      	ldr	r3, [pc, #668]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b22:	49a9      	ldr	r1, [pc, #676]	; (8001dc8 <HAL_RCC_OscConfig+0x340>)
 8001b24:	400a      	ands	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e01e      	b.n	8001b68 <HAL_RCC_OscConfig+0xe0>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d10e      	bne.n	8001b50 <HAL_RCC_OscConfig+0xc8>
 8001b32:	4ba3      	ldr	r3, [pc, #652]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4ba2      	ldr	r3, [pc, #648]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b38:	2180      	movs	r1, #128	; 0x80
 8001b3a:	02c9      	lsls	r1, r1, #11
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	4b9f      	ldr	r3, [pc, #636]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b9e      	ldr	r3, [pc, #632]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	0249      	lsls	r1, r1, #9
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0xe0>
 8001b50:	4b9b      	ldr	r3, [pc, #620]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b9a      	ldr	r3, [pc, #616]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b56:	499b      	ldr	r1, [pc, #620]	; (8001dc4 <HAL_RCC_OscConfig+0x33c>)
 8001b58:	400a      	ands	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	4b98      	ldr	r3, [pc, #608]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b97      	ldr	r3, [pc, #604]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b62:	4999      	ldr	r1, [pc, #612]	; (8001dc8 <HAL_RCC_OscConfig+0x340>)
 8001b64:	400a      	ands	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d014      	beq.n	8001b9a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fbfc 	bl	800136c <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7a:	f7ff fbf7 	bl	800136c <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b64      	cmp	r3, #100	; 0x64
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e2fd      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8c:	4b8c      	ldr	r3, [pc, #560]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	029b      	lsls	r3, r3, #10
 8001b94:	4013      	ands	r3, r2
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0xf2>
 8001b98:	e015      	b.n	8001bc6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fbe7 	bl	800136c <HAL_GetTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fbe2 	bl	800136c <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e2e8      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	029b      	lsls	r3, r3, #10
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x11c>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d100      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x14a>
 8001bd0:	e06c      	b.n	8001cac <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bd2:	4b7b      	ldr	r3, [pc, #492]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d00e      	beq.n	8001bfa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bdc:	4b78      	ldr	r3, [pc, #480]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	220c      	movs	r2, #12
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d11f      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1a0>
 8001be8:	4b75      	ldr	r3, [pc, #468]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	23c0      	movs	r3, #192	; 0xc0
 8001bee:	025b      	lsls	r3, r3, #9
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d116      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	4b71      	ldr	r3, [pc, #452]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	4013      	ands	r3, r2
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_OscConfig+0x188>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e2bb      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b6b      	ldr	r3, [pc, #428]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	22f8      	movs	r2, #248	; 0xf8
 8001c16:	4393      	bics	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00da      	lsls	r2, r3, #3
 8001c20:	4b67      	ldr	r3, [pc, #412]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	e041      	b.n	8001cac <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d024      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c30:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b62      	ldr	r3, [pc, #392]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fb96 	bl	800136c <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c46:	f7ff fb91 	bl	800136c <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e297      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d0f1      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	4b57      	ldr	r3, [pc, #348]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	22f8      	movs	r2, #248	; 0xf8
 8001c68:	4393      	bics	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	00da      	lsls	r2, r3, #3
 8001c72:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e018      	b.n	8001cac <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7a:	4b51      	ldr	r3, [pc, #324]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001c80:	2101      	movs	r1, #1
 8001c82:	438a      	bics	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fb71 	bl	800136c <HAL_GetTick>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c90:	f7ff fb6c 	bl	800136c <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e272      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d1f1      	bne.n	8001c90 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d036      	beq.n	8001d24 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d019      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cbe:	4b40      	ldr	r3, [pc, #256]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc2:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7ff fb4f 	bl	800136c <HAL_GetTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fb4a 	bl	800136c <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e250      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	2202      	movs	r2, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	d0f1      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x24c>
 8001cf0:	e018      	b.n	8001d24 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf2:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf6:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	438a      	bics	r2, r1
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fb35 	bl	800136c <HAL_GetTick>
 8001d02:	0003      	movs	r3, r0
 8001d04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d08:	f7ff fb30 	bl	800136c <HAL_GetTick>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e236      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4013      	ands	r3, r2
 8001d22:	d1f1      	bne.n	8001d08 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2204      	movs	r2, #4
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d100      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2a8>
 8001d2e:	e0b5      	b.n	8001e9c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d30:	201f      	movs	r0, #31
 8001d32:	183b      	adds	r3, r7, r0
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001d3a:	69da      	ldr	r2, [r3, #28]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	055b      	lsls	r3, r3, #21
 8001d40:	4013      	ands	r3, r2
 8001d42:	d110      	bne.n	8001d66 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001d46:	69da      	ldr	r2, [r3, #28]
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	0549      	lsls	r1, r1, #21
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	61da      	str	r2, [r3, #28]
 8001d52:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001d54:	69da      	ldr	r2, [r3, #28]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	055b      	lsls	r3, r3, #21
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d60:	183b      	adds	r3, r7, r0
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_RCC_OscConfig+0x344>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d11a      	bne.n	8001da8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_RCC_OscConfig+0x344>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_RCC_OscConfig+0x344>)
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	0049      	lsls	r1, r1, #1
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d80:	f7ff faf4 	bl	800136c <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8a:	f7ff faef 	bl	800136c <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b64      	cmp	r3, #100	; 0x64
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e1f5      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_OscConfig+0x344>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4013      	ands	r3, r2
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d10f      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x348>
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001db2:	6a1a      	ldr	r2, [r3, #32]
 8001db4:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001db6:	2101      	movs	r1, #1
 8001db8:	430a      	orrs	r2, r1
 8001dba:	621a      	str	r2, [r3, #32]
 8001dbc:	e036      	b.n	8001e2c <HAL_RCC_OscConfig+0x3a4>
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	fffeffff 	.word	0xfffeffff
 8001dc8:	fffbffff 	.word	0xfffbffff
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10c      	bne.n	8001df2 <HAL_RCC_OscConfig+0x36a>
 8001dd8:	4bca      	ldr	r3, [pc, #808]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001dda:	6a1a      	ldr	r2, [r3, #32]
 8001ddc:	4bc9      	ldr	r3, [pc, #804]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	438a      	bics	r2, r1
 8001de2:	621a      	str	r2, [r3, #32]
 8001de4:	4bc7      	ldr	r3, [pc, #796]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001de6:	6a1a      	ldr	r2, [r3, #32]
 8001de8:	4bc6      	ldr	r3, [pc, #792]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001dea:	2104      	movs	r1, #4
 8001dec:	438a      	bics	r2, r1
 8001dee:	621a      	str	r2, [r3, #32]
 8001df0:	e01c      	b.n	8001e2c <HAL_RCC_OscConfig+0x3a4>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x38c>
 8001dfa:	4bc2      	ldr	r3, [pc, #776]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001dfc:	6a1a      	ldr	r2, [r3, #32]
 8001dfe:	4bc1      	ldr	r3, [pc, #772]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001e00:	2104      	movs	r1, #4
 8001e02:	430a      	orrs	r2, r1
 8001e04:	621a      	str	r2, [r3, #32]
 8001e06:	4bbf      	ldr	r3, [pc, #764]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001e08:	6a1a      	ldr	r2, [r3, #32]
 8001e0a:	4bbe      	ldr	r3, [pc, #760]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	621a      	str	r2, [r3, #32]
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0x3a4>
 8001e14:	4bbb      	ldr	r3, [pc, #748]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001e16:	6a1a      	ldr	r2, [r3, #32]
 8001e18:	4bba      	ldr	r3, [pc, #744]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	438a      	bics	r2, r1
 8001e1e:	621a      	str	r2, [r3, #32]
 8001e20:	4bb8      	ldr	r3, [pc, #736]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001e22:	6a1a      	ldr	r2, [r3, #32]
 8001e24:	4bb7      	ldr	r3, [pc, #732]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001e26:	2104      	movs	r1, #4
 8001e28:	438a      	bics	r2, r1
 8001e2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d014      	beq.n	8001e5e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7ff fa9a 	bl	800136c <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	e009      	b.n	8001e52 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff fa95 	bl	800136c <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	4aaf      	ldr	r2, [pc, #700]	; (8002108 <HAL_RCC_OscConfig+0x680>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e19a      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e52:	4bac      	ldr	r3, [pc, #688]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	2202      	movs	r2, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x3b6>
 8001e5c:	e013      	b.n	8001e86 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fa85 	bl	800136c <HAL_GetTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e66:	e009      	b.n	8001e7c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7ff fa80 	bl	800136c <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	4aa5      	ldr	r2, [pc, #660]	; (8002108 <HAL_RCC_OscConfig+0x680>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e185      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	4ba1      	ldr	r3, [pc, #644]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e86:	231f      	movs	r3, #31
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d105      	bne.n	8001e9c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e90:	4b9c      	ldr	r3, [pc, #624]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001e92:	69da      	ldr	r2, [r3, #28]
 8001e94:	4b9b      	ldr	r3, [pc, #620]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001e96:	499d      	ldr	r1, [pc, #628]	; (800210c <HAL_RCC_OscConfig+0x684>)
 8001e98:	400a      	ands	r2, r1
 8001e9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d063      	beq.n	8001f6e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d12a      	bne.n	8001f04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001eae:	4b95      	ldr	r3, [pc, #596]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb2:	4b94      	ldr	r3, [pc, #592]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001eba:	4b92      	ldr	r3, [pc, #584]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebe:	4b91      	ldr	r3, [pc, #580]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7ff fa51 	bl	800136c <HAL_GetTick>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ed0:	f7ff fa4c 	bl	800136c <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e152      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ee2:	4b88      	ldr	r3, [pc, #544]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d0f1      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001eec:	4b85      	ldr	r3, [pc, #532]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef0:	22f8      	movs	r2, #248	; 0xf8
 8001ef2:	4393      	bics	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	00da      	lsls	r2, r3, #3
 8001efc:	4b81      	ldr	r3, [pc, #516]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	635a      	str	r2, [r3, #52]	; 0x34
 8001f02:	e034      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	3305      	adds	r3, #5
 8001f0a:	d111      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f0c:	4b7d      	ldr	r3, [pc, #500]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f10:	4b7c      	ldr	r3, [pc, #496]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001f12:	2104      	movs	r1, #4
 8001f14:	438a      	bics	r2, r1
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f18:	4b7a      	ldr	r3, [pc, #488]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1c:	22f8      	movs	r2, #248	; 0xf8
 8001f1e:	4393      	bics	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	00da      	lsls	r2, r3, #3
 8001f28:	4b76      	ldr	r3, [pc, #472]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f2e:	e01e      	b.n	8001f6e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f30:	4b74      	ldr	r3, [pc, #464]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f34:	4b73      	ldr	r3, [pc, #460]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001f36:	2104      	movs	r1, #4
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f3c:	4b71      	ldr	r3, [pc, #452]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f40:	4b70      	ldr	r3, [pc, #448]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001f42:	2101      	movs	r1, #1
 8001f44:	438a      	bics	r2, r1
 8001f46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7ff fa10 	bl	800136c <HAL_GetTick>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f52:	f7ff fa0b 	bl	800136c <HAL_GetTick>
 8001f56:	0002      	movs	r2, r0
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e111      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f64:	4b67      	ldr	r3, [pc, #412]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	2202      	movs	r2, #2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d1f1      	bne.n	8001f52 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2220      	movs	r2, #32
 8001f74:	4013      	ands	r3, r2
 8001f76:	d05c      	beq.n	8002032 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f78:	4b62      	ldr	r3, [pc, #392]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	220c      	movs	r2, #12
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d00e      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f84:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	220c      	movs	r2, #12
 8001f8a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d114      	bne.n	8001fba <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f90:	4b5c      	ldr	r3, [pc, #368]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	23c0      	movs	r3, #192	; 0xc0
 8001f96:	025b      	lsls	r3, r3, #9
 8001f98:	401a      	ands	r2, r3
 8001f9a:	23c0      	movs	r3, #192	; 0xc0
 8001f9c:	025b      	lsls	r3, r3, #9
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d10b      	bne.n	8001fba <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001fa2:	4b58      	ldr	r3, [pc, #352]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	025b      	lsls	r3, r3, #9
 8001faa:	4013      	ands	r3, r2
 8001fac:	d040      	beq.n	8002030 <HAL_RCC_OscConfig+0x5a8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d03c      	beq.n	8002030 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0e6      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d01b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001fc2:	4b50      	ldr	r3, [pc, #320]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc6:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	0249      	lsls	r1, r1, #9
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f9cc 	bl	800136c <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fda:	f7ff f9c7 	bl	800136c <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0cd      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fec:	4b45      	ldr	r3, [pc, #276]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	025b      	lsls	r3, r3, #9
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x552>
 8001ff8:	e01b      	b.n	8002032 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ffa:	4b42      	ldr	r3, [pc, #264]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8001ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffe:	4b41      	ldr	r3, [pc, #260]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8002000:	4943      	ldr	r1, [pc, #268]	; (8002110 <HAL_RCC_OscConfig+0x688>)
 8002002:	400a      	ands	r2, r1
 8002004:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff f9b1 	bl	800136c <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002010:	f7ff f9ac 	bl	800136c <HAL_GetTick>
 8002014:	0002      	movs	r2, r0
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e0b2      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002022:	4b38      	ldr	r3, [pc, #224]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8002024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	025b      	lsls	r3, r3, #9
 800202a:	4013      	ands	r3, r2
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x588>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002030:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2b00      	cmp	r3, #0
 8002038:	d100      	bne.n	800203c <HAL_RCC_OscConfig+0x5b4>
 800203a:	e0a4      	b.n	8002186 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800203c:	4b31      	ldr	r3, [pc, #196]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	220c      	movs	r2, #12
 8002042:	4013      	ands	r3, r2
 8002044:	2b08      	cmp	r3, #8
 8002046:	d100      	bne.n	800204a <HAL_RCC_OscConfig+0x5c2>
 8002048:	e078      	b.n	800213c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	2b02      	cmp	r3, #2
 8002050:	d14c      	bne.n	80020ec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8002058:	492e      	ldr	r1, [pc, #184]	; (8002114 <HAL_RCC_OscConfig+0x68c>)
 800205a:	400a      	ands	r2, r1
 800205c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7ff f985 	bl	800136c <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff f980 	bl	800136c <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e086      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	049b      	lsls	r3, r3, #18
 8002082:	4013      	ands	r3, r2
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002086:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	220f      	movs	r2, #15
 800208c:	4393      	bics	r3, r2
 800208e:	0019      	movs	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 8002096:	430a      	orrs	r2, r1
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_RCC_OscConfig+0x690>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	431a      	orrs	r2, r3
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	0449      	lsls	r1, r1, #17
 80020be:	430a      	orrs	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7ff f953 	bl	800136c <HAL_GetTick>
 80020c6:	0003      	movs	r3, r0
 80020c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff f94e 	bl	800136c <HAL_GetTick>
 80020d0:	0002      	movs	r2, r0
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e054      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	049b      	lsls	r3, r3, #18
 80020e6:	4013      	ands	r3, r2
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x644>
 80020ea:	e04c      	b.n	8002186 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <HAL_RCC_OscConfig+0x67c>)
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <HAL_RCC_OscConfig+0x68c>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff f938 	bl	800136c <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002100:	e015      	b.n	800212e <HAL_RCC_OscConfig+0x6a6>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	40021000 	.word	0x40021000
 8002108:	00001388 	.word	0x00001388
 800210c:	efffffff 	.word	0xefffffff
 8002110:	fffeffff 	.word	0xfffeffff
 8002114:	feffffff 	.word	0xfeffffff
 8002118:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff f926 	bl	800136c <HAL_GetTick>
 8002120:	0002      	movs	r2, r0
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e02c      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_RCC_OscConfig+0x708>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	049b      	lsls	r3, r3, #18
 8002136:	4013      	ands	r3, r2
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x694>
 800213a:	e024      	b.n	8002186 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e01f      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_RCC_OscConfig+0x708>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_RCC_OscConfig+0x708>)
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	23c0      	movs	r3, #192	; 0xc0
 8002158:	025b      	lsls	r3, r3, #9
 800215a:	401a      	ands	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	429a      	cmp	r2, r3
 8002162:	d10e      	bne.n	8002182 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	220f      	movs	r2, #15
 8002168:	401a      	ands	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d107      	bne.n	8002182 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	23f0      	movs	r3, #240	; 0xf0
 8002176:	039b      	lsls	r3, r3, #14
 8002178:	401a      	ands	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d001      	beq.n	8002186 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b008      	add	sp, #32
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000

08002194 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0bf      	b.n	8002328 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a8:	4b61      	ldr	r3, [pc, #388]	; (8002330 <HAL_RCC_ClockConfig+0x19c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2201      	movs	r2, #1
 80021ae:	4013      	ands	r3, r2
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d911      	bls.n	80021da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b5e      	ldr	r3, [pc, #376]	; (8002330 <HAL_RCC_ClockConfig+0x19c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2201      	movs	r2, #1
 80021bc:	4393      	bics	r3, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	4b5b      	ldr	r3, [pc, #364]	; (8002330 <HAL_RCC_ClockConfig+0x19c>)
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x19c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2201      	movs	r2, #1
 80021ce:	4013      	ands	r3, r2
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d001      	beq.n	80021da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0a6      	b.n	8002328 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2202      	movs	r2, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	d015      	beq.n	8002210 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2204      	movs	r2, #4
 80021ea:	4013      	ands	r3, r2
 80021ec:	d006      	beq.n	80021fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021ee:	4b51      	ldr	r3, [pc, #324]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 80021f4:	21e0      	movs	r1, #224	; 0xe0
 80021f6:	00c9      	lsls	r1, r1, #3
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fc:	4b4d      	ldr	r3, [pc, #308]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	22f0      	movs	r2, #240	; 0xf0
 8002202:	4393      	bics	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 800220c:	430a      	orrs	r2, r1
 800220e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2201      	movs	r2, #1
 8002216:	4013      	ands	r3, r2
 8002218:	d04c      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	029b      	lsls	r3, r3, #10
 800222a:	4013      	ands	r3, r2
 800222c:	d120      	bne.n	8002270 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e07a      	b.n	8002328 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223a:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	049b      	lsls	r3, r3, #18
 8002242:	4013      	ands	r3, r2
 8002244:	d114      	bne.n	8002270 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06e      	b.n	8002328 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002252:	4b38      	ldr	r3, [pc, #224]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 8002254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	025b      	lsls	r3, r3, #9
 800225a:	4013      	ands	r3, r2
 800225c:	d108      	bne.n	8002270 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e062      	b.n	8002328 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002262:	4b34      	ldr	r3, [pc, #208]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2202      	movs	r2, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e05b      	b.n	8002328 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2203      	movs	r2, #3
 8002276:	4393      	bics	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 8002280:	430a      	orrs	r2, r1
 8002282:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002284:	f7ff f872 	bl	800136c <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228c:	e009      	b.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228e:	f7ff f86d 	bl	800136c <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	4a27      	ldr	r2, [pc, #156]	; (8002338 <HAL_RCC_ClockConfig+0x1a4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e042      	b.n	8002328 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	220c      	movs	r2, #12
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1ec      	bne.n	800228e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b4:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <HAL_RCC_ClockConfig+0x19c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d211      	bcs.n	80022e6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_RCC_ClockConfig+0x19c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4393      	bics	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	4b18      	ldr	r3, [pc, #96]	; (8002330 <HAL_RCC_ClockConfig+0x19c>)
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x19c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2201      	movs	r2, #1
 80022da:	4013      	ands	r3, r2
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e020      	b.n	8002328 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2204      	movs	r2, #4
 80022ec:	4013      	ands	r3, r2
 80022ee:	d009      	beq.n	8002304 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_RCC_ClockConfig+0x1a8>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 8002300:	430a      	orrs	r2, r1
 8002302:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002304:	f000 f820 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002308:	0001      	movs	r1, r0
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1a0>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	220f      	movs	r2, #15
 8002312:	4013      	ands	r3, r2
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x1ac>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	000a      	movs	r2, r1
 800231a:	40da      	lsrs	r2, r3
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_RCC_ClockConfig+0x1b0>)
 800231e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002320:	2003      	movs	r0, #3
 8002322:	f7fe ffdd 	bl	80012e0 <HAL_InitTick>
  
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b004      	add	sp, #16
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40022000 	.word	0x40022000
 8002334:	40021000 	.word	0x40021000
 8002338:	00001388 	.word	0x00001388
 800233c:	fffff8ff 	.word	0xfffff8ff
 8002340:	08004620 	.word	0x08004620
 8002344:	20000000 	.word	0x20000000

08002348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b08f      	sub	sp, #60	; 0x3c
 800234c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800234e:	2314      	movs	r3, #20
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	4a38      	ldr	r2, [pc, #224]	; (8002434 <HAL_RCC_GetSysClockFreq+0xec>)
 8002354:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002356:	c313      	stmia	r3!, {r0, r1, r4}
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4a36      	ldr	r2, [pc, #216]	; (8002438 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002360:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002362:	c313      	stmia	r3!, {r0, r1, r4}
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800236c:	2300      	movs	r3, #0
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002370:	2300      	movs	r3, #0
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800237c:	4b2f      	ldr	r3, [pc, #188]	; (800243c <HAL_RCC_GetSysClockFreq+0xf4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	220c      	movs	r2, #12
 8002386:	4013      	ands	r3, r2
 8002388:	2b0c      	cmp	r3, #12
 800238a:	d047      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0xd4>
 800238c:	d849      	bhi.n	8002422 <HAL_RCC_GetSysClockFreq+0xda>
 800238e:	2b04      	cmp	r3, #4
 8002390:	d002      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x50>
 8002392:	2b08      	cmp	r3, #8
 8002394:	d003      	beq.n	800239e <HAL_RCC_GetSysClockFreq+0x56>
 8002396:	e044      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002398:	4b29      	ldr	r3, [pc, #164]	; (8002440 <HAL_RCC_GetSysClockFreq+0xf8>)
 800239a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800239c:	e044      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	0c9b      	lsrs	r3, r3, #18
 80023a2:	220f      	movs	r2, #15
 80023a4:	4013      	ands	r3, r2
 80023a6:	2214      	movs	r2, #20
 80023a8:	18ba      	adds	r2, r7, r2
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_RCC_GetSysClockFreq+0xf4>)
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	220f      	movs	r2, #15
 80023b4:	4013      	ands	r3, r2
 80023b6:	1d3a      	adds	r2, r7, #4
 80023b8:	5cd3      	ldrb	r3, [r2, r3]
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023be:	23c0      	movs	r3, #192	; 0xc0
 80023c0:	025b      	lsls	r3, r3, #9
 80023c2:	401a      	ands	r2, r3
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d109      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ce:	481c      	ldr	r0, [pc, #112]	; (8002440 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023d0:	f7fd feaa 	bl	8000128 <__udivsi3>
 80023d4:	0003      	movs	r3, r0
 80023d6:	001a      	movs	r2, r3
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	4353      	muls	r3, r2
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
 80023de:	e01a      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80023e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e2:	23c0      	movs	r3, #192	; 0xc0
 80023e4:	025b      	lsls	r3, r3, #9
 80023e6:	401a      	ands	r2, r3
 80023e8:	23c0      	movs	r3, #192	; 0xc0
 80023ea:	025b      	lsls	r3, r3, #9
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d109      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023f2:	4814      	ldr	r0, [pc, #80]	; (8002444 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023f4:	f7fd fe98 	bl	8000128 <__udivsi3>
 80023f8:	0003      	movs	r3, r0
 80023fa:	001a      	movs	r2, r3
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	4353      	muls	r3, r2
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
 8002402:	e008      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002406:	480e      	ldr	r0, [pc, #56]	; (8002440 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002408:	f7fd fe8e 	bl	8000128 <__udivsi3>
 800240c:	0003      	movs	r3, r0
 800240e:	001a      	movs	r2, r3
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	4353      	muls	r3, r2
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800241a:	e005      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_GetSysClockFreq+0xfc>)
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002420:	e002      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002426:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b00f      	add	sp, #60	; 0x3c
 8002430:	bd90      	pop	{r4, r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	080045b8 	.word	0x080045b8
 8002438:	080045c8 	.word	0x080045c8
 800243c:	40021000 	.word	0x40021000
 8002440:	007a1200 	.word	0x007a1200
 8002444:	02dc6c00 	.word	0x02dc6c00

08002448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800244c:	4b02      	ldr	r3, [pc, #8]	; (8002458 <HAL_RCC_GetHCLKFreq+0x10>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	20000000 	.word	0x20000000

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002460:	f7ff fff2 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002464:	0001      	movs	r1, r0
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	2207      	movs	r2, #7
 800246e:	4013      	ands	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	40d9      	lsrs	r1, r3
 8002476:	000b      	movs	r3, r1
}    
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	40021000 	.word	0x40021000
 8002484:	08004630 	.word	0x08004630

08002488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	025b      	lsls	r3, r3, #9
 80024a0:	4013      	ands	r3, r2
 80024a2:	d100      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80024a4:	e08e      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2017      	movs	r0, #23
 80024a8:	183b      	adds	r3, r7, r0
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ae:	4b6e      	ldr	r3, [pc, #440]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	055b      	lsls	r3, r3, #21
 80024b6:	4013      	ands	r3, r2
 80024b8:	d110      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	4b6b      	ldr	r3, [pc, #428]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	4b6a      	ldr	r3, [pc, #424]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0549      	lsls	r1, r1, #21
 80024c4:	430a      	orrs	r2, r1
 80024c6:	61da      	str	r2, [r3, #28]
 80024c8:	4b67      	ldr	r3, [pc, #412]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	055b      	lsls	r3, r3, #21
 80024d0:	4013      	ands	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	183b      	adds	r3, r7, r0
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b63      	ldr	r3, [pc, #396]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d11a      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e8:	4b60      	ldr	r3, [pc, #384]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b5f      	ldr	r3, [pc, #380]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	0049      	lsls	r1, r1, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe ff39 	bl	800136c <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	e008      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002500:	f7fe ff34 	bl	800136c <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e0a6      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002512:	4b56      	ldr	r3, [pc, #344]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4013      	ands	r3, r2
 800251c:	d0f0      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800251e:	4b52      	ldr	r3, [pc, #328]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	23c0      	movs	r3, #192	; 0xc0
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4013      	ands	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d034      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	23c0      	movs	r3, #192	; 0xc0
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4013      	ands	r3, r2
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d02c      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002540:	4b49      	ldr	r3, [pc, #292]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002546:	4013      	ands	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800254c:	6a1a      	ldr	r2, [r3, #32]
 800254e:	4b46      	ldr	r3, [pc, #280]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	0249      	lsls	r1, r1, #9
 8002554:	430a      	orrs	r2, r1
 8002556:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002558:	4b43      	ldr	r3, [pc, #268]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	4b42      	ldr	r3, [pc, #264]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800255e:	4945      	ldr	r1, [pc, #276]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002560:	400a      	ands	r2, r1
 8002562:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002564:	4b40      	ldr	r3, [pc, #256]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	4013      	ands	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe fefb 	bl	800136c <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	e009      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fef6 	bl	800136c <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	4a3c      	ldr	r2, [pc, #240]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e067      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	4b35      	ldr	r3, [pc, #212]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	2202      	movs	r2, #2
 8002596:	4013      	ands	r3, r2
 8002598:	d0f0      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259a:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a34      	ldr	r2, [pc, #208]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025aa:	430a      	orrs	r2, r1
 80025ac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025ae:	2317      	movs	r3, #23
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025be:	492f      	ldr	r1, [pc, #188]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2201      	movs	r2, #1
 80025ca:	4013      	ands	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ce:	4b26      	ldr	r3, [pc, #152]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	2203      	movs	r2, #3
 80025d4:	4393      	bics	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2202      	movs	r2, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	d009      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025ec:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a23      	ldr	r2, [pc, #140]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025fc:	430a      	orrs	r2, r1
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	02db      	lsls	r3, r3, #11
 8002608:	4013      	ands	r3, r2
 800260a:	d009      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002612:	4013      	ands	r3, r2
 8002614:	0019      	movs	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800261c:	430a      	orrs	r2, r1
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2220      	movs	r2, #32
 8002626:	4013      	ands	r3, r2
 8002628:	d009      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800262a:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	2210      	movs	r2, #16
 8002630:	4393      	bics	r3, r2
 8002632:	0019      	movs	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800263a:	430a      	orrs	r2, r1
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4013      	ands	r3, r2
 8002648:	d009      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	4393      	bics	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699a      	ldr	r2, [r3, #24]
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800265a:	430a      	orrs	r2, r1
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b006      	add	sp, #24
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	fffffcff 	.word	0xfffffcff
 8002674:	fffeffff 	.word	0xfffeffff
 8002678:	00001388 	.word	0x00001388
 800267c:	efffffff 	.word	0xefffffff
 8002680:	fffcffff 	.word	0xfffcffff
 8002684:	fff3ffff 	.word	0xfff3ffff

08002688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e044      	b.n	8002724 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d107      	bne.n	80026b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2274      	movs	r2, #116	; 0x74
 80026a6:	2100      	movs	r1, #0
 80026a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fe fce9 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2224      	movs	r2, #36	; 0x24
 80026b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2101      	movs	r1, #1
 80026c4:	438a      	bics	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 fc38 	bl	8002f40 <UART_SetConfig>
 80026d0:	0003      	movs	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e024      	b.n	8002724 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f000 fe13 	bl	8003310 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	490d      	ldr	r1, [pc, #52]	; (800272c <HAL_UART_Init+0xa4>)
 80026f6:	400a      	ands	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	212a      	movs	r1, #42	; 0x2a
 8002706:	438a      	bics	r2, r1
 8002708:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2101      	movs	r1, #1
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f000 feab 	bl	8003478 <UART_CheckIdleState>
 8002722:	0003      	movs	r3, r0
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b002      	add	sp, #8
 800272a:	bd80      	pop	{r7, pc}
 800272c:	ffffb7ff 	.word	0xffffb7ff

08002730 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	1dbb      	adds	r3, r7, #6
 800273c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002742:	2b20      	cmp	r3, #32
 8002744:	d000      	beq.n	8002748 <HAL_UART_Transmit_DMA+0x18>
 8002746:	e08a      	b.n	800285e <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_UART_Transmit_DMA+0x26>
 800274e:	1dbb      	adds	r3, r7, #6
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e082      	b.n	8002860 <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	015b      	lsls	r3, r3, #5
 8002762:	429a      	cmp	r2, r3
 8002764:	d109      	bne.n	800277a <HAL_UART_Transmit_DMA+0x4a>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d105      	bne.n	800277a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2201      	movs	r2, #1
 8002772:	4013      	ands	r3, r2
 8002774:	d001      	beq.n	800277a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e072      	b.n	8002860 <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2274      	movs	r2, #116	; 0x74
 800277e:	5c9b      	ldrb	r3, [r3, r2]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_UART_Transmit_DMA+0x58>
 8002784:	2302      	movs	r3, #2
 8002786:	e06b      	b.n	8002860 <HAL_UART_Transmit_DMA+0x130>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2274      	movs	r2, #116	; 0x74
 800278c:	2101      	movs	r1, #1
 800278e:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1dba      	adds	r2, r7, #6
 800279a:	2150      	movs	r1, #80	; 0x50
 800279c:	8812      	ldrh	r2, [r2, #0]
 800279e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1dba      	adds	r2, r7, #6
 80027a4:	2152      	movs	r1, #82	; 0x52
 80027a6:	8812      	ldrh	r2, [r2, #0]
 80027a8:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	2100      	movs	r1, #0
 80027b0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2221      	movs	r2, #33	; 0x21
 80027b6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d02b      	beq.n	8002818 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c4:	4a28      	ldr	r2, [pc, #160]	; (8002868 <HAL_UART_Transmit_DMA+0x138>)
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027cc:	4a27      	ldr	r2, [pc, #156]	; (800286c <HAL_UART_Transmit_DMA+0x13c>)
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d4:	4a26      	ldr	r2, [pc, #152]	; (8002870 <HAL_UART_Transmit_DMA+0x140>)
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027dc:	2200      	movs	r2, #0
 80027de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e8:	0019      	movs	r1, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3328      	adds	r3, #40	; 0x28
 80027f0:	001a      	movs	r2, r3
 80027f2:	1dbb      	adds	r3, r7, #6
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	f7fe fea1 	bl	800153c <HAL_DMA_Start_IT>
 80027fa:	1e03      	subs	r3, r0, #0
 80027fc:	d00c      	beq.n	8002818 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	2110      	movs	r1, #16
 8002804:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2274      	movs	r2, #116	; 0x74
 800280a:	2100      	movs	r1, #0
 800280c:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e023      	b.n	8002860 <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2274      	movs	r2, #116	; 0x74
 8002824:	2100      	movs	r1, #0
 8002826:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002828:	f3ef 8310 	mrs	r3, PRIMASK
 800282c:	613b      	str	r3, [r7, #16]
  return(result);
 800282e:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	2301      	movs	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f383 8810 	msr	PRIMASK, r3
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	430a      	orrs	r2, r1
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f383 8810 	msr	PRIMASK, r3
}
 8002858:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
  }
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b008      	add	sp, #32
 8002866:	bd80      	pop	{r7, pc}
 8002868:	080038e1 	.word	0x080038e1
 800286c:	08003975 	.word	0x08003975
 8002870:	08003af5 	.word	0x08003af5

08002874 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	1dbb      	adds	r3, r7, #6
 8002880:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002886:	2b20      	cmp	r3, #32
 8002888:	d150      	bne.n	800292c <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_UART_Receive_DMA+0x24>
 8002890:	1dbb      	adds	r3, r7, #6
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e048      	b.n	800292e <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	015b      	lsls	r3, r3, #5
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d109      	bne.n	80028bc <HAL_UART_Receive_DMA+0x48>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2201      	movs	r2, #1
 80028b4:	4013      	ands	r3, r2
 80028b6:	d001      	beq.n	80028bc <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e038      	b.n	800292e <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2274      	movs	r2, #116	; 0x74
 80028c0:	5c9b      	ldrb	r3, [r3, r2]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_UART_Receive_DMA+0x56>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e031      	b.n	800292e <HAL_UART_Receive_DMA+0xba>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2274      	movs	r2, #116	; 0x74
 80028ce:	2101      	movs	r1, #1
 80028d0:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	4013      	ands	r3, r2
 80028e4:	d019      	beq.n	800291a <HAL_UART_Receive_DMA+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e6:	f3ef 8310 	mrs	r3, PRIMASK
 80028ea:	613b      	str	r3, [r7, #16]
  return(result);
 80028ec:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	2301      	movs	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f383 8810 	msr	PRIMASK, r3
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2180      	movs	r1, #128	; 0x80
 8002908:	04c9      	lsls	r1, r1, #19
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f383 8810 	msr	PRIMASK, r3
}
 8002918:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800291a:	1dbb      	adds	r3, r7, #6
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	0018      	movs	r0, r3
 8002924:	f000 feb4 	bl	8003690 <UART_Start_Receive_DMA>
 8002928:	0003      	movs	r3, r0
 800292a:	e000      	b.n	800292e <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b008      	add	sp, #32
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b0ab      	sub	sp, #172	; 0xac
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	22a4      	movs	r2, #164	; 0xa4
 8002948:	18b9      	adds	r1, r7, r2
 800294a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	20a0      	movs	r0, #160	; 0xa0
 8002954:	1839      	adds	r1, r7, r0
 8002956:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	219c      	movs	r1, #156	; 0x9c
 8002960:	1879      	adds	r1, r7, r1
 8002962:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002964:	0011      	movs	r1, r2
 8002966:	18bb      	adds	r3, r7, r2
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a99      	ldr	r2, [pc, #612]	; (8002bd0 <HAL_UART_IRQHandler+0x298>)
 800296c:	4013      	ands	r3, r2
 800296e:	2298      	movs	r2, #152	; 0x98
 8002970:	18bc      	adds	r4, r7, r2
 8002972:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002974:	18bb      	adds	r3, r7, r2
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d114      	bne.n	80029a6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800297c:	187b      	adds	r3, r7, r1
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2220      	movs	r2, #32
 8002982:	4013      	ands	r3, r2
 8002984:	d00f      	beq.n	80029a6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002986:	183b      	adds	r3, r7, r0
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2220      	movs	r2, #32
 800298c:	4013      	ands	r3, r2
 800298e:	d00a      	beq.n	80029a6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002994:	2b00      	cmp	r3, #0
 8002996:	d100      	bne.n	800299a <HAL_UART_IRQHandler+0x62>
 8002998:	e296      	b.n	8002ec8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	0010      	movs	r0, r2
 80029a2:	4798      	blx	r3
      }
      return;
 80029a4:	e290      	b.n	8002ec8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029a6:	2398      	movs	r3, #152	; 0x98
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d100      	bne.n	80029b2 <HAL_UART_IRQHandler+0x7a>
 80029b0:	e114      	b.n	8002bdc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029b2:	239c      	movs	r3, #156	; 0x9c
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2201      	movs	r2, #1
 80029ba:	4013      	ands	r3, r2
 80029bc:	d106      	bne.n	80029cc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029be:	23a0      	movs	r3, #160	; 0xa0
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a83      	ldr	r2, [pc, #524]	; (8002bd4 <HAL_UART_IRQHandler+0x29c>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	d100      	bne.n	80029cc <HAL_UART_IRQHandler+0x94>
 80029ca:	e107      	b.n	8002bdc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029cc:	23a4      	movs	r3, #164	; 0xa4
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2201      	movs	r2, #1
 80029d4:	4013      	ands	r3, r2
 80029d6:	d012      	beq.n	80029fe <HAL_UART_IRQHandler+0xc6>
 80029d8:	23a0      	movs	r3, #160	; 0xa0
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4013      	ands	r3, r2
 80029e4:	d00b      	beq.n	80029fe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2201      	movs	r2, #1
 80029ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	589b      	ldr	r3, [r3, r2]
 80029f4:	2201      	movs	r2, #1
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029fe:	23a4      	movs	r3, #164	; 0xa4
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	d011      	beq.n	8002a2e <HAL_UART_IRQHandler+0xf6>
 8002a0a:	239c      	movs	r3, #156	; 0x9c
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	d00b      	beq.n	8002a2e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	589b      	ldr	r3, [r3, r2]
 8002a24:	2204      	movs	r2, #4
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2180      	movs	r1, #128	; 0x80
 8002a2c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a2e:	23a4      	movs	r3, #164	; 0xa4
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2204      	movs	r2, #4
 8002a36:	4013      	ands	r3, r2
 8002a38:	d011      	beq.n	8002a5e <HAL_UART_IRQHandler+0x126>
 8002a3a:	239c      	movs	r3, #156	; 0x9c
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	d00b      	beq.n	8002a5e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	589b      	ldr	r3, [r3, r2]
 8002a54:	2202      	movs	r2, #2
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a5e:	23a4      	movs	r3, #164	; 0xa4
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2208      	movs	r2, #8
 8002a66:	4013      	ands	r3, r2
 8002a68:	d017      	beq.n	8002a9a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a6a:	23a0      	movs	r3, #160	; 0xa0
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2220      	movs	r2, #32
 8002a72:	4013      	ands	r3, r2
 8002a74:	d105      	bne.n	8002a82 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a76:	239c      	movs	r3, #156	; 0x9c
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a80:	d00b      	beq.n	8002a9a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2208      	movs	r2, #8
 8002a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	589b      	ldr	r3, [r3, r2]
 8002a90:	2208      	movs	r2, #8
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a9a:	23a4      	movs	r3, #164	; 0xa4
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x198>
 8002aa8:	23a0      	movs	r3, #160	; 0xa0
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	04db      	lsls	r3, r3, #19
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d00c      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	589b      	ldr	r3, [r3, r2]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2180      	movs	r1, #128	; 0x80
 8002ace:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	589b      	ldr	r3, [r3, r2]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d100      	bne.n	8002adc <HAL_UART_IRQHandler+0x1a4>
 8002ada:	e1f7      	b.n	8002ecc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002adc:	23a4      	movs	r3, #164	; 0xa4
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d00e      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ae8:	23a0      	movs	r3, #160	; 0xa0
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2220      	movs	r2, #32
 8002af0:	4013      	ands	r3, r2
 8002af2:	d008      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d004      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	0010      	movs	r0, r2
 8002b04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	589b      	ldr	r3, [r3, r2]
 8002b0c:	2194      	movs	r1, #148	; 0x94
 8002b0e:	187a      	adds	r2, r7, r1
 8002b10:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2240      	movs	r2, #64	; 0x40
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d004      	beq.n	8002b2a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2228      	movs	r2, #40	; 0x28
 8002b26:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b28:	d047      	beq.n	8002bba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 fe75 	bl	800381c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2240      	movs	r2, #64	; 0x40
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d137      	bne.n	8002bb0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b40:	f3ef 8310 	mrs	r3, PRIMASK
 8002b44:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b48:	2090      	movs	r0, #144	; 0x90
 8002b4a:	183a      	adds	r2, r7, r0
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	2301      	movs	r3, #1
 8002b50:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b54:	f383 8810 	msr	PRIMASK, r3
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2140      	movs	r1, #64	; 0x40
 8002b66:	438a      	bics	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	183b      	adds	r3, r7, r0
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b72:	f383 8810 	msr	PRIMASK, r3
}
 8002b76:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d012      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <HAL_UART_IRQHandler+0x2a0>)
 8002b86:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7fe fd73 	bl	8001678 <HAL_DMA_Abort_IT>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d01a      	beq.n	8002bcc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba4:	e012      	b.n	8002bcc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 f9b5 	bl	8002f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bae:	e00d      	b.n	8002bcc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f9b0 	bl	8002f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb8:	e008      	b.n	8002bcc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 f9ab 	bl	8002f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002bca:	e17f      	b.n	8002ecc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	46c0      	nop			; (mov r8, r8)
    return;
 8002bce:	e17d      	b.n	8002ecc <HAL_UART_IRQHandler+0x594>
 8002bd0:	0000080f 	.word	0x0000080f
 8002bd4:	04000120 	.word	0x04000120
 8002bd8:	08003b77 	.word	0x08003b77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d000      	beq.n	8002be6 <HAL_UART_IRQHandler+0x2ae>
 8002be4:	e131      	b.n	8002e4a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002be6:	23a4      	movs	r3, #164	; 0xa4
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2210      	movs	r2, #16
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d100      	bne.n	8002bf4 <HAL_UART_IRQHandler+0x2bc>
 8002bf2:	e12a      	b.n	8002e4a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bf4:	23a0      	movs	r3, #160	; 0xa0
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <HAL_UART_IRQHandler+0x2ca>
 8002c00:	e123      	b.n	8002e4a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2210      	movs	r2, #16
 8002c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2240      	movs	r2, #64	; 0x40
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d000      	beq.n	8002c1a <HAL_UART_IRQHandler+0x2e2>
 8002c18:	e09b      	b.n	8002d52 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	217e      	movs	r1, #126	; 0x7e
 8002c24:	187b      	adds	r3, r7, r1
 8002c26:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d100      	bne.n	8002c32 <HAL_UART_IRQHandler+0x2fa>
 8002c30:	e14e      	b.n	8002ed0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2258      	movs	r2, #88	; 0x58
 8002c36:	5a9b      	ldrh	r3, [r3, r2]
 8002c38:	187a      	adds	r2, r7, r1
 8002c3a:	8812      	ldrh	r2, [r2, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d300      	bcc.n	8002c42 <HAL_UART_IRQHandler+0x30a>
 8002c40:	e146      	b.n	8002ed0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	187a      	adds	r2, r7, r1
 8002c46:	215a      	movs	r1, #90	; 0x5a
 8002c48:	8812      	ldrh	r2, [r2, #0]
 8002c4a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d06e      	beq.n	8002d34 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c56:	f3ef 8310 	mrs	r3, PRIMASK
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c60:	2301      	movs	r3, #1
 8002c62:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	f383 8810 	msr	PRIMASK, r3
}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	499a      	ldr	r1, [pc, #616]	; (8002ee0 <HAL_UART_IRQHandler+0x5a8>)
 8002c78:	400a      	ands	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	f383 8810 	msr	PRIMASK, r3
}
 8002c86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c88:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c90:	677b      	str	r3, [r7, #116]	; 0x74
 8002c92:	2301      	movs	r3, #1
 8002c94:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c98:	f383 8810 	msr	PRIMASK, r3
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2101      	movs	r1, #1
 8002caa:	438a      	bics	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb4:	f383 8810 	msr	PRIMASK, r3
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cba:	f3ef 8310 	mrs	r3, PRIMASK
 8002cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc2:	673b      	str	r3, [r7, #112]	; 0x70
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cca:	f383 8810 	msr	PRIMASK, r3
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	438a      	bics	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ce2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce6:	f383 8810 	msr	PRIMASK, r3
}
 8002cea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d02:	2301      	movs	r3, #1
 8002d04:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2110      	movs	r1, #16
 8002d1a:	438a      	bics	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d20:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7fe fc6a 	bl	8001608 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2258      	movs	r2, #88	; 0x58
 8002d38:	5a9a      	ldrh	r2, [r3, r2]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	215a      	movs	r1, #90	; 0x5a
 8002d3e:	5a5b      	ldrh	r3, [r3, r1]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0011      	movs	r1, r2
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 f8ec 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d50:	e0be      	b.n	8002ed0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2258      	movs	r2, #88	; 0x58
 8002d56:	5a99      	ldrh	r1, [r3, r2]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	225a      	movs	r2, #90	; 0x5a
 8002d5c:	5a9b      	ldrh	r3, [r3, r2]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	208e      	movs	r0, #142	; 0x8e
 8002d62:	183b      	adds	r3, r7, r0
 8002d64:	1a8a      	subs	r2, r1, r2
 8002d66:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	225a      	movs	r2, #90	; 0x5a
 8002d6c:	5a9b      	ldrh	r3, [r3, r2]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d100      	bne.n	8002d76 <HAL_UART_IRQHandler+0x43e>
 8002d74:	e0ae      	b.n	8002ed4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8002d76:	183b      	adds	r3, r7, r0
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d100      	bne.n	8002d80 <HAL_UART_IRQHandler+0x448>
 8002d7e:	e0a9      	b.n	8002ed4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d80:	f3ef 8310 	mrs	r3, PRIMASK
 8002d84:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d86:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d88:	2488      	movs	r4, #136	; 0x88
 8002d8a:	193a      	adds	r2, r7, r4
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	2301      	movs	r3, #1
 8002d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	494f      	ldr	r1, [pc, #316]	; (8002ee4 <HAL_UART_IRQHandler+0x5ac>)
 8002da6:	400a      	ands	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	193b      	adds	r3, r7, r4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f383 8810 	msr	PRIMASK, r3
}
 8002db6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dbe:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc0:	2484      	movs	r4, #132	; 0x84
 8002dc2:	193a      	adds	r2, r7, r4
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f383 8810 	msr	PRIMASK, r3
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	438a      	bics	r2, r1
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	f383 8810 	msr	PRIMASK, r3
}
 8002dee:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e02:	f3ef 8310 	mrs	r3, PRIMASK
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e0a:	2480      	movs	r4, #128	; 0x80
 8002e0c:	193a      	adds	r2, r7, r4
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	2301      	movs	r3, #1
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	f383 8810 	msr	PRIMASK, r3
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2110      	movs	r1, #16
 8002e28:	438a      	bics	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	193b      	adds	r3, r7, r4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	f383 8810 	msr	PRIMASK, r3
}
 8002e38:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e3a:	183b      	adds	r3, r7, r0
 8002e3c:	881a      	ldrh	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	0011      	movs	r1, r2
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 f870 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e48:	e044      	b.n	8002ed4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e4a:	23a4      	movs	r3, #164	; 0xa4
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	035b      	lsls	r3, r3, #13
 8002e54:	4013      	ands	r3, r2
 8002e56:	d010      	beq.n	8002e7a <HAL_UART_IRQHandler+0x542>
 8002e58:	239c      	movs	r3, #156	; 0x9c
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	03db      	lsls	r3, r3, #15
 8002e62:	4013      	ands	r3, r2
 8002e64:	d009      	beq.n	8002e7a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	0352      	lsls	r2, r2, #13
 8002e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 fec1 	bl	8003bfa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e78:	e02f      	b.n	8002eda <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e7a:	23a4      	movs	r3, #164	; 0xa4
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2280      	movs	r2, #128	; 0x80
 8002e82:	4013      	ands	r3, r2
 8002e84:	d00f      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e86:	23a0      	movs	r3, #160	; 0xa0
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d01e      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	0010      	movs	r0, r2
 8002ea2:	4798      	blx	r3
    }
    return;
 8002ea4:	e018      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ea6:	23a4      	movs	r3, #164	; 0xa4
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2240      	movs	r2, #64	; 0x40
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_UART_IRQHandler+0x5a2>
 8002eb2:	23a0      	movs	r3, #160	; 0xa0
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2240      	movs	r2, #64	; 0x40
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d00d      	beq.n	8002eda <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f000 fe6f 	bl	8003ba4 <UART_EndTransmit_IT>
    return;
 8002ec6:	e008      	b.n	8002eda <HAL_UART_IRQHandler+0x5a2>
      return;
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	e006      	b.n	8002eda <HAL_UART_IRQHandler+0x5a2>
    return;
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	e004      	b.n	8002eda <HAL_UART_IRQHandler+0x5a2>
      return;
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	e002      	b.n	8002eda <HAL_UART_IRQHandler+0x5a2>
      return;
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	e000      	b.n	8002eda <HAL_UART_IRQHandler+0x5a2>
    return;
 8002ed8:	46c0      	nop			; (mov r8, r8)
  }

}
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b02b      	add	sp, #172	; 0xac
 8002ede:	bd90      	pop	{r4, r7, pc}
 8002ee0:	fffffeff 	.word	0xfffffeff
 8002ee4:	fffffedf 	.word	0xfffffedf

08002ee8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	000a      	movs	r2, r1
 8002f32:	1cbb      	adds	r3, r7, #2
 8002f34:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b002      	add	sp, #8
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f48:	231e      	movs	r3, #30
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4abe      	ldr	r2, [pc, #760]	; (8003268 <UART_SetConfig+0x328>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	0019      	movs	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4ab9      	ldr	r2, [pc, #740]	; (800326c <UART_SetConfig+0x32c>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4ab0      	ldr	r2, [pc, #704]	; (8003270 <UART_SetConfig+0x330>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4aac      	ldr	r2, [pc, #688]	; (8003274 <UART_SetConfig+0x334>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d127      	bne.n	8003016 <UART_SetConfig+0xd6>
 8002fc6:	4bac      	ldr	r3, [pc, #688]	; (8003278 <UART_SetConfig+0x338>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	2203      	movs	r2, #3
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d00d      	beq.n	8002fee <UART_SetConfig+0xae>
 8002fd2:	d81b      	bhi.n	800300c <UART_SetConfig+0xcc>
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d014      	beq.n	8003002 <UART_SetConfig+0xc2>
 8002fd8:	d818      	bhi.n	800300c <UART_SetConfig+0xcc>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <UART_SetConfig+0xa4>
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d00a      	beq.n	8002ff8 <UART_SetConfig+0xb8>
 8002fe2:	e013      	b.n	800300c <UART_SetConfig+0xcc>
 8002fe4:	231f      	movs	r3, #31
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
 8002fec:	e0bd      	b.n	800316a <UART_SetConfig+0x22a>
 8002fee:	231f      	movs	r3, #31
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	e0b8      	b.n	800316a <UART_SetConfig+0x22a>
 8002ff8:	231f      	movs	r3, #31
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e0b3      	b.n	800316a <UART_SetConfig+0x22a>
 8003002:	231f      	movs	r3, #31
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	2208      	movs	r2, #8
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e0ae      	b.n	800316a <UART_SetConfig+0x22a>
 800300c:	231f      	movs	r3, #31
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	2210      	movs	r2, #16
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e0a9      	b.n	800316a <UART_SetConfig+0x22a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a98      	ldr	r2, [pc, #608]	; (800327c <UART_SetConfig+0x33c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d134      	bne.n	800308a <UART_SetConfig+0x14a>
 8003020:	4b95      	ldr	r3, [pc, #596]	; (8003278 <UART_SetConfig+0x338>)
 8003022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003024:	23c0      	movs	r3, #192	; 0xc0
 8003026:	029b      	lsls	r3, r3, #10
 8003028:	4013      	ands	r3, r2
 800302a:	22c0      	movs	r2, #192	; 0xc0
 800302c:	0292      	lsls	r2, r2, #10
 800302e:	4293      	cmp	r3, r2
 8003030:	d017      	beq.n	8003062 <UART_SetConfig+0x122>
 8003032:	22c0      	movs	r2, #192	; 0xc0
 8003034:	0292      	lsls	r2, r2, #10
 8003036:	4293      	cmp	r3, r2
 8003038:	d822      	bhi.n	8003080 <UART_SetConfig+0x140>
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	0292      	lsls	r2, r2, #10
 800303e:	4293      	cmp	r3, r2
 8003040:	d019      	beq.n	8003076 <UART_SetConfig+0x136>
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	0292      	lsls	r2, r2, #10
 8003046:	4293      	cmp	r3, r2
 8003048:	d81a      	bhi.n	8003080 <UART_SetConfig+0x140>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <UART_SetConfig+0x118>
 800304e:	2280      	movs	r2, #128	; 0x80
 8003050:	0252      	lsls	r2, r2, #9
 8003052:	4293      	cmp	r3, r2
 8003054:	d00a      	beq.n	800306c <UART_SetConfig+0x12c>
 8003056:	e013      	b.n	8003080 <UART_SetConfig+0x140>
 8003058:	231f      	movs	r3, #31
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e083      	b.n	800316a <UART_SetConfig+0x22a>
 8003062:	231f      	movs	r3, #31
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	2202      	movs	r2, #2
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	e07e      	b.n	800316a <UART_SetConfig+0x22a>
 800306c:	231f      	movs	r3, #31
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	2204      	movs	r2, #4
 8003072:	701a      	strb	r2, [r3, #0]
 8003074:	e079      	b.n	800316a <UART_SetConfig+0x22a>
 8003076:	231f      	movs	r3, #31
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2208      	movs	r2, #8
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e074      	b.n	800316a <UART_SetConfig+0x22a>
 8003080:	231f      	movs	r3, #31
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	2210      	movs	r2, #16
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e06f      	b.n	800316a <UART_SetConfig+0x22a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7c      	ldr	r2, [pc, #496]	; (8003280 <UART_SetConfig+0x340>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d134      	bne.n	80030fe <UART_SetConfig+0x1be>
 8003094:	4b78      	ldr	r3, [pc, #480]	; (8003278 <UART_SetConfig+0x338>)
 8003096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003098:	23c0      	movs	r3, #192	; 0xc0
 800309a:	031b      	lsls	r3, r3, #12
 800309c:	4013      	ands	r3, r2
 800309e:	22c0      	movs	r2, #192	; 0xc0
 80030a0:	0312      	lsls	r2, r2, #12
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d017      	beq.n	80030d6 <UART_SetConfig+0x196>
 80030a6:	22c0      	movs	r2, #192	; 0xc0
 80030a8:	0312      	lsls	r2, r2, #12
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d822      	bhi.n	80030f4 <UART_SetConfig+0x1b4>
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	0312      	lsls	r2, r2, #12
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <UART_SetConfig+0x1aa>
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	0312      	lsls	r2, r2, #12
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d81a      	bhi.n	80030f4 <UART_SetConfig+0x1b4>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <UART_SetConfig+0x18c>
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	02d2      	lsls	r2, r2, #11
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00a      	beq.n	80030e0 <UART_SetConfig+0x1a0>
 80030ca:	e013      	b.n	80030f4 <UART_SetConfig+0x1b4>
 80030cc:	231f      	movs	r3, #31
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
 80030d4:	e049      	b.n	800316a <UART_SetConfig+0x22a>
 80030d6:	231f      	movs	r3, #31
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	2202      	movs	r2, #2
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e044      	b.n	800316a <UART_SetConfig+0x22a>
 80030e0:	231f      	movs	r3, #31
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2204      	movs	r2, #4
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e03f      	b.n	800316a <UART_SetConfig+0x22a>
 80030ea:	231f      	movs	r3, #31
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	2208      	movs	r2, #8
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e03a      	b.n	800316a <UART_SetConfig+0x22a>
 80030f4:	231f      	movs	r3, #31
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2210      	movs	r2, #16
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e035      	b.n	800316a <UART_SetConfig+0x22a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a60      	ldr	r2, [pc, #384]	; (8003284 <UART_SetConfig+0x344>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d104      	bne.n	8003112 <UART_SetConfig+0x1d2>
 8003108:	231f      	movs	r3, #31
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e02b      	b.n	800316a <UART_SetConfig+0x22a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a5c      	ldr	r2, [pc, #368]	; (8003288 <UART_SetConfig+0x348>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d104      	bne.n	8003126 <UART_SetConfig+0x1e6>
 800311c:	231f      	movs	r3, #31
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	e021      	b.n	800316a <UART_SetConfig+0x22a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a58      	ldr	r2, [pc, #352]	; (800328c <UART_SetConfig+0x34c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d104      	bne.n	800313a <UART_SetConfig+0x1fa>
 8003130:	231f      	movs	r3, #31
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e017      	b.n	800316a <UART_SetConfig+0x22a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a54      	ldr	r2, [pc, #336]	; (8003290 <UART_SetConfig+0x350>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d104      	bne.n	800314e <UART_SetConfig+0x20e>
 8003144:	231f      	movs	r3, #31
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	e00d      	b.n	800316a <UART_SetConfig+0x22a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a50      	ldr	r2, [pc, #320]	; (8003294 <UART_SetConfig+0x354>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d104      	bne.n	8003162 <UART_SetConfig+0x222>
 8003158:	231f      	movs	r3, #31
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e003      	b.n	800316a <UART_SetConfig+0x22a>
 8003162:	231f      	movs	r3, #31
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	2210      	movs	r2, #16
 8003168:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	429a      	cmp	r2, r3
 8003174:	d15d      	bne.n	8003232 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8003176:	231f      	movs	r3, #31
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d015      	beq.n	80031ac <UART_SetConfig+0x26c>
 8003180:	dc18      	bgt.n	80031b4 <UART_SetConfig+0x274>
 8003182:	2b04      	cmp	r3, #4
 8003184:	d00d      	beq.n	80031a2 <UART_SetConfig+0x262>
 8003186:	dc15      	bgt.n	80031b4 <UART_SetConfig+0x274>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <UART_SetConfig+0x252>
 800318c:	2b02      	cmp	r3, #2
 800318e:	d005      	beq.n	800319c <UART_SetConfig+0x25c>
 8003190:	e010      	b.n	80031b4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003192:	f7ff f963 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003196:	0003      	movs	r3, r0
 8003198:	61bb      	str	r3, [r7, #24]
        break;
 800319a:	e012      	b.n	80031c2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800319c:	4b3e      	ldr	r3, [pc, #248]	; (8003298 <UART_SetConfig+0x358>)
 800319e:	61bb      	str	r3, [r7, #24]
        break;
 80031a0:	e00f      	b.n	80031c2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a2:	f7ff f8d1 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 80031a6:	0003      	movs	r3, r0
 80031a8:	61bb      	str	r3, [r7, #24]
        break;
 80031aa:	e00a      	b.n	80031c2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	61bb      	str	r3, [r7, #24]
        break;
 80031b2:	e006      	b.n	80031c2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031b8:	231e      	movs	r3, #30
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
        break;
 80031c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d100      	bne.n	80031ca <UART_SetConfig+0x28a>
 80031c8:	e095      	b.n	80032f6 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	005a      	lsls	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	18d2      	adds	r2, r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	0019      	movs	r1, r3
 80031dc:	0010      	movs	r0, r2
 80031de:	f7fc ffa3 	bl	8000128 <__udivsi3>
 80031e2:	0003      	movs	r3, r0
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	d91c      	bls.n	8003228 <UART_SetConfig+0x2e8>
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	025b      	lsls	r3, r3, #9
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d217      	bcs.n	8003228 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	200e      	movs	r0, #14
 80031fe:	183b      	adds	r3, r7, r0
 8003200:	210f      	movs	r1, #15
 8003202:	438a      	bics	r2, r1
 8003204:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	b29b      	uxth	r3, r3
 800320c:	2207      	movs	r2, #7
 800320e:	4013      	ands	r3, r2
 8003210:	b299      	uxth	r1, r3
 8003212:	183b      	adds	r3, r7, r0
 8003214:	183a      	adds	r2, r7, r0
 8003216:	8812      	ldrh	r2, [r2, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	183a      	adds	r2, r7, r0
 8003222:	8812      	ldrh	r2, [r2, #0]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	e066      	b.n	80032f6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003228:	231e      	movs	r3, #30
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e061      	b.n	80032f6 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003232:	231f      	movs	r3, #31
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d02f      	beq.n	800329c <UART_SetConfig+0x35c>
 800323c:	dc32      	bgt.n	80032a4 <UART_SetConfig+0x364>
 800323e:	2b04      	cmp	r3, #4
 8003240:	d00d      	beq.n	800325e <UART_SetConfig+0x31e>
 8003242:	dc2f      	bgt.n	80032a4 <UART_SetConfig+0x364>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <UART_SetConfig+0x30e>
 8003248:	2b02      	cmp	r3, #2
 800324a:	d005      	beq.n	8003258 <UART_SetConfig+0x318>
 800324c:	e02a      	b.n	80032a4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800324e:	f7ff f905 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003252:	0003      	movs	r3, r0
 8003254:	61bb      	str	r3, [r7, #24]
        break;
 8003256:	e02c      	b.n	80032b2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <UART_SetConfig+0x358>)
 800325a:	61bb      	str	r3, [r7, #24]
        break;
 800325c:	e029      	b.n	80032b2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325e:	f7ff f873 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8003262:	0003      	movs	r3, r0
 8003264:	61bb      	str	r3, [r7, #24]
        break;
 8003266:	e024      	b.n	80032b2 <UART_SetConfig+0x372>
 8003268:	efff69f3 	.word	0xefff69f3
 800326c:	ffffcfff 	.word	0xffffcfff
 8003270:	fffff4ff 	.word	0xfffff4ff
 8003274:	40013800 	.word	0x40013800
 8003278:	40021000 	.word	0x40021000
 800327c:	40004400 	.word	0x40004400
 8003280:	40004800 	.word	0x40004800
 8003284:	40004c00 	.word	0x40004c00
 8003288:	40005000 	.word	0x40005000
 800328c:	40011400 	.word	0x40011400
 8003290:	40011800 	.word	0x40011800
 8003294:	40011c00 	.word	0x40011c00
 8003298:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	61bb      	str	r3, [r7, #24]
        break;
 80032a2:	e006      	b.n	80032b2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032a8:	231e      	movs	r3, #30
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
        break;
 80032b0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01e      	beq.n	80032f6 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	085a      	lsrs	r2, r3, #1
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	18d2      	adds	r2, r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	0019      	movs	r1, r3
 80032c8:	0010      	movs	r0, r2
 80032ca:	f7fc ff2d 	bl	8000128 <__udivsi3>
 80032ce:	0003      	movs	r3, r0
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b0f      	cmp	r3, #15
 80032d8:	d909      	bls.n	80032ee <UART_SetConfig+0x3ae>
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	025b      	lsls	r3, r3, #9
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d204      	bcs.n	80032ee <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	60da      	str	r2, [r3, #12]
 80032ec:	e003      	b.n	80032f6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80032ee:	231e      	movs	r3, #30
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003302:	231e      	movs	r3, #30
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	781b      	ldrb	r3, [r3, #0]
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b008      	add	sp, #32
 800330e:	bd80      	pop	{r7, pc}

08003310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	2201      	movs	r2, #1
 800331e:	4013      	ands	r3, r2
 8003320:	d00b      	beq.n	800333a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a4a      	ldr	r2, [pc, #296]	; (8003454 <UART_AdvFeatureConfig+0x144>)
 800332a:	4013      	ands	r3, r2
 800332c:	0019      	movs	r1, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	2202      	movs	r2, #2
 8003340:	4013      	ands	r3, r2
 8003342:	d00b      	beq.n	800335c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4a43      	ldr	r2, [pc, #268]	; (8003458 <UART_AdvFeatureConfig+0x148>)
 800334c:	4013      	ands	r3, r2
 800334e:	0019      	movs	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2204      	movs	r2, #4
 8003362:	4013      	ands	r3, r2
 8003364:	d00b      	beq.n	800337e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a3b      	ldr	r2, [pc, #236]	; (800345c <UART_AdvFeatureConfig+0x14c>)
 800336e:	4013      	ands	r3, r2
 8003370:	0019      	movs	r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2208      	movs	r2, #8
 8003384:	4013      	ands	r3, r2
 8003386:	d00b      	beq.n	80033a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4a34      	ldr	r2, [pc, #208]	; (8003460 <UART_AdvFeatureConfig+0x150>)
 8003390:	4013      	ands	r3, r2
 8003392:	0019      	movs	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	2210      	movs	r2, #16
 80033a6:	4013      	ands	r3, r2
 80033a8:	d00b      	beq.n	80033c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4a2c      	ldr	r2, [pc, #176]	; (8003464 <UART_AdvFeatureConfig+0x154>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	2220      	movs	r2, #32
 80033c8:	4013      	ands	r3, r2
 80033ca:	d00b      	beq.n	80033e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	4a25      	ldr	r2, [pc, #148]	; (8003468 <UART_AdvFeatureConfig+0x158>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	2240      	movs	r2, #64	; 0x40
 80033ea:	4013      	ands	r3, r2
 80033ec:	d01d      	beq.n	800342a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a1d      	ldr	r2, [pc, #116]	; (800346c <UART_AdvFeatureConfig+0x15c>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	035b      	lsls	r3, r3, #13
 800340e:	429a      	cmp	r2, r3
 8003410:	d10b      	bne.n	800342a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4a15      	ldr	r2, [pc, #84]	; (8003470 <UART_AdvFeatureConfig+0x160>)
 800341a:	4013      	ands	r3, r2
 800341c:	0019      	movs	r1, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	4013      	ands	r3, r2
 8003432:	d00b      	beq.n	800344c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4a0e      	ldr	r2, [pc, #56]	; (8003474 <UART_AdvFeatureConfig+0x164>)
 800343c:	4013      	ands	r3, r2
 800343e:	0019      	movs	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	605a      	str	r2, [r3, #4]
  }
}
 800344c:	46c0      	nop			; (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}
 8003454:	fffdffff 	.word	0xfffdffff
 8003458:	fffeffff 	.word	0xfffeffff
 800345c:	fffbffff 	.word	0xfffbffff
 8003460:	ffff7fff 	.word	0xffff7fff
 8003464:	ffffefff 	.word	0xffffefff
 8003468:	ffffdfff 	.word	0xffffdfff
 800346c:	ffefffff 	.word	0xffefffff
 8003470:	ff9fffff 	.word	0xff9fffff
 8003474:	fff7ffff 	.word	0xfff7ffff

08003478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af02      	add	r7, sp, #8
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	2100      	movs	r1, #0
 8003486:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003488:	f7fd ff70 	bl	800136c <HAL_GetTick>
 800348c:	0003      	movs	r3, r0
 800348e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2208      	movs	r2, #8
 8003498:	4013      	ands	r3, r2
 800349a:	2b08      	cmp	r3, #8
 800349c:	d10c      	bne.n	80034b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2280      	movs	r2, #128	; 0x80
 80034a2:	0391      	lsls	r1, r2, #14
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4a17      	ldr	r2, [pc, #92]	; (8003504 <UART_CheckIdleState+0x8c>)
 80034a8:	9200      	str	r2, [sp, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f000 f82c 	bl	8003508 <UART_WaitOnFlagUntilTimeout>
 80034b0:	1e03      	subs	r3, r0, #0
 80034b2:	d001      	beq.n	80034b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e021      	b.n	80034fc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2204      	movs	r2, #4
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d10c      	bne.n	80034e0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	03d1      	lsls	r1, r2, #15
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4a0d      	ldr	r2, [pc, #52]	; (8003504 <UART_CheckIdleState+0x8c>)
 80034d0:	9200      	str	r2, [sp, #0]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f000 f818 	bl	8003508 <UART_WaitOnFlagUntilTimeout>
 80034d8:	1e03      	subs	r3, r0, #0
 80034da:	d001      	beq.n	80034e0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e00d      	b.n	80034fc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2274      	movs	r2, #116	; 0x74
 80034f6:	2100      	movs	r1, #0
 80034f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b004      	add	sp, #16
 8003502:	bd80      	pop	{r7, pc}
 8003504:	01ffffff 	.word	0x01ffffff

08003508 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b094      	sub	sp, #80	; 0x50
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	1dfb      	adds	r3, r7, #7
 8003516:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003518:	e0a3      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800351c:	3301      	adds	r3, #1
 800351e:	d100      	bne.n	8003522 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003520:	e09f      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003522:	f7fd ff23 	bl	800136c <HAL_GetTick>
 8003526:	0002      	movs	r2, r0
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <UART_WaitOnFlagUntilTimeout+0x30>
 8003532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003534:	2b00      	cmp	r3, #0
 8003536:	d13d      	bne.n	80035b4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003538:	f3ef 8310 	mrs	r3, PRIMASK
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
 8003542:	2301      	movs	r3, #1
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	f383 8810 	msr	PRIMASK, r3
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	494c      	ldr	r1, [pc, #304]	; (800368c <UART_WaitOnFlagUntilTimeout+0x184>)
 800355a:	400a      	ands	r2, r1
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003560:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	f383 8810 	msr	PRIMASK, r3
}
 8003568:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356a:	f3ef 8310 	mrs	r3, PRIMASK
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003572:	643b      	str	r3, [r7, #64]	; 0x40
 8003574:	2301      	movs	r3, #1
 8003576:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357a:	f383 8810 	msr	PRIMASK, r3
}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2101      	movs	r1, #1
 800358c:	438a      	bics	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003596:	f383 8810 	msr	PRIMASK, r3
}
 800359a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2274      	movs	r2, #116	; 0x74
 80035ac:	2100      	movs	r1, #0
 80035ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e067      	b.n	8003684 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2204      	movs	r2, #4
 80035bc:	4013      	ands	r3, r2
 80035be:	d050      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69da      	ldr	r2, [r3, #28]
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	401a      	ands	r2, r3
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d146      	bne.n	8003662 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	0112      	lsls	r2, r2, #4
 80035dc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035de:	f3ef 8310 	mrs	r3, PRIMASK
 80035e2:	613b      	str	r3, [r7, #16]
  return(result);
 80035e4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e8:	2301      	movs	r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f383 8810 	msr	PRIMASK, r3
}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4923      	ldr	r1, [pc, #140]	; (800368c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003600:	400a      	ands	r2, r1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003606:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f383 8810 	msr	PRIMASK, r3
}
 800360e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003610:	f3ef 8310 	mrs	r3, PRIMASK
 8003614:	61fb      	str	r3, [r7, #28]
  return(result);
 8003616:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003618:	64bb      	str	r3, [r7, #72]	; 0x48
 800361a:	2301      	movs	r3, #1
 800361c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	f383 8810 	msr	PRIMASK, r3
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2101      	movs	r1, #1
 8003632:	438a      	bics	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	f383 8810 	msr	PRIMASK, r3
}
 8003640:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	2120      	movs	r1, #32
 8003654:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2274      	movs	r2, #116	; 0x74
 800365a:	2100      	movs	r1, #0
 800365c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e010      	b.n	8003684 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	425a      	negs	r2, r3
 8003672:	4153      	adcs	r3, r2
 8003674:	b2db      	uxtb	r3, r3
 8003676:	001a      	movs	r2, r3
 8003678:	1dfb      	adds	r3, r7, #7
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d100      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003680:	e74b      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b014      	add	sp, #80	; 0x50
 800368a:	bd80      	pop	{r7, pc}
 800368c:	fffffe5f 	.word	0xfffffe5f

08003690 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b090      	sub	sp, #64	; 0x40
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	1dbb      	adds	r3, r7, #6
 800369c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1dba      	adds	r2, r7, #6
 80036a8:	2158      	movs	r1, #88	; 0x58
 80036aa:	8812      	ldrh	r2, [r2, #0]
 80036ac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2280      	movs	r2, #128	; 0x80
 80036b2:	2100      	movs	r1, #0
 80036b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2222      	movs	r2, #34	; 0x22
 80036ba:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d02b      	beq.n	800371c <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a3f      	ldr	r2, [pc, #252]	; (80037c8 <UART_Start_Receive_DMA+0x138>)
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4a3e      	ldr	r2, [pc, #248]	; (80037cc <UART_Start_Receive_DMA+0x13c>)
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	4a3d      	ldr	r2, [pc, #244]	; (80037d0 <UART_Start_Receive_DMA+0x140>)
 80036da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	2200      	movs	r2, #0
 80036e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3324      	adds	r3, #36	; 0x24
 80036ee:	0019      	movs	r1, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	001a      	movs	r2, r3
 80036f6:	1dbb      	adds	r3, r7, #6
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	f7fd ff1f 	bl	800153c <HAL_DMA_Start_IT>
 80036fe:	1e03      	subs	r3, r0, #0
 8003700:	d00c      	beq.n	800371c <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	2110      	movs	r1, #16
 8003708:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2274      	movs	r2, #116	; 0x74
 800370e:	2100      	movs	r1, #0
 8003710:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e050      	b.n	80037be <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2274      	movs	r2, #116	; 0x74
 8003720:	2100      	movs	r1, #0
 8003722:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003724:	f3ef 8310 	mrs	r3, PRIMASK
 8003728:	613b      	str	r3, [r7, #16]
  return(result);
 800372a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800372c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800372e:	2301      	movs	r3, #1
 8003730:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	0049      	lsls	r1, r1, #1
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f383 8810 	msr	PRIMASK, r3
}
 8003756:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003758:	f3ef 8310 	mrs	r3, PRIMASK
 800375c:	61fb      	str	r3, [r7, #28]
  return(result);
 800375e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003760:	63bb      	str	r3, [r7, #56]	; 0x38
 8003762:	2301      	movs	r3, #1
 8003764:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	f383 8810 	msr	PRIMASK, r3
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2101      	movs	r1, #1
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378a:	f3ef 8310 	mrs	r3, PRIMASK
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003792:	637b      	str	r3, [r7, #52]	; 0x34
 8003794:	2301      	movs	r3, #1
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379a:	f383 8810 	msr	PRIMASK, r3
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2140      	movs	r1, #64	; 0x40
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b010      	add	sp, #64	; 0x40
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	08003995 	.word	0x08003995
 80037cc:	08003ab9 	.word	0x08003ab9
 80037d0:	08003af5 	.word	0x08003af5

080037d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037dc:	f3ef 8310 	mrs	r3, PRIMASK
 80037e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80037e2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	2301      	movs	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f383 8810 	msr	PRIMASK, r3
}
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	21c0      	movs	r1, #192	; 0xc0
 80037fe:	438a      	bics	r2, r1
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f383 8810 	msr	PRIMASK, r3
}
 800380c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b006      	add	sp, #24
 800381a:	bd80      	pop	{r7, pc}

0800381c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08e      	sub	sp, #56	; 0x38
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003824:	f3ef 8310 	mrs	r3, PRIMASK
 8003828:	617b      	str	r3, [r7, #20]
  return(result);
 800382a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382c:	637b      	str	r3, [r7, #52]	; 0x34
 800382e:	2301      	movs	r3, #1
 8003830:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f383 8810 	msr	PRIMASK, r3
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4925      	ldr	r1, [pc, #148]	; (80038dc <UART_EndRxTransfer+0xc0>)
 8003846:	400a      	ands	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f383 8810 	msr	PRIMASK, r3
}
 8003854:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003856:	f3ef 8310 	mrs	r3, PRIMASK
 800385a:	623b      	str	r3, [r7, #32]
  return(result);
 800385c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385e:	633b      	str	r3, [r7, #48]	; 0x30
 8003860:	2301      	movs	r3, #1
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	f383 8810 	msr	PRIMASK, r3
}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2101      	movs	r1, #1
 8003878:	438a      	bics	r2, r1
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	f383 8810 	msr	PRIMASK, r3
}
 8003886:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388c:	2b01      	cmp	r3, #1
 800388e:	d118      	bne.n	80038c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003890:	f3ef 8310 	mrs	r3, PRIMASK
 8003894:	60bb      	str	r3, [r7, #8]
  return(result);
 8003896:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800389a:	2301      	movs	r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f383 8810 	msr	PRIMASK, r3
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2110      	movs	r1, #16
 80038b2:	438a      	bics	r2, r1
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f383 8810 	msr	PRIMASK, r3
}
 80038c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b00e      	add	sp, #56	; 0x38
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	fffffedf 	.word	0xfffffedf

080038e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	; 0x30
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d035      	beq.n	8003962 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80038f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f8:	2252      	movs	r2, #82	; 0x52
 80038fa:	2100      	movs	r1, #0
 80038fc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003902:	60fb      	str	r3, [r7, #12]
  return(result);
 8003904:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
 8003908:	2301      	movs	r3, #1
 800390a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f383 8810 	msr	PRIMASK, r3
}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2180      	movs	r1, #128	; 0x80
 8003920:	438a      	bics	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f383 8810 	msr	PRIMASK, r3
}
 800392e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003930:	f3ef 8310 	mrs	r3, PRIMASK
 8003934:	61bb      	str	r3, [r7, #24]
  return(result);
 8003936:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
 800393a:	2301      	movs	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f383 8810 	msr	PRIMASK, r3
}
 8003944:	46c0      	nop			; (mov r8, r8)
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2140      	movs	r1, #64	; 0x40
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	f383 8810 	msr	PRIMASK, r3
}
 8003960:	e004      	b.n	800396c <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	0018      	movs	r0, r3
 8003966:	f7ff fabf 	bl	8002ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b00c      	add	sp, #48	; 0x30
 8003972:	bd80      	pop	{r7, pc}

08003974 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	0018      	movs	r0, r3
 8003986:	f7ff fab7 	bl	8002ef8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b004      	add	sp, #16
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b094      	sub	sp, #80	; 0x50
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d06e      	beq.n	8003a88 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 80039aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ac:	225a      	movs	r2, #90	; 0x5a
 80039ae:	2100      	movs	r1, #0
 80039b0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b2:	f3ef 8310 	mrs	r3, PRIMASK
 80039b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80039b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80039bc:	2301      	movs	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f383 8810 	msr	PRIMASK, r3
}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4938      	ldr	r1, [pc, #224]	; (8003ab4 <UART_DMAReceiveCplt+0x120>)
 80039d4:	400a      	ands	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f383 8810 	msr	PRIMASK, r3
}
 80039e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e4:	f3ef 8310 	mrs	r3, PRIMASK
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ec:	647b      	str	r3, [r7, #68]	; 0x44
 80039ee:	2301      	movs	r3, #1
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	f383 8810 	msr	PRIMASK, r3
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2101      	movs	r1, #1
 8003a06:	438a      	bics	r2, r1
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	f383 8810 	msr	PRIMASK, r3
}
 8003a14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a16:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a20:	2301      	movs	r3, #1
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a26:	f383 8810 	msr	PRIMASK, r3
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2140      	movs	r1, #64	; 0x40
 8003a38:	438a      	bics	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a42:	f383 8810 	msr	PRIMASK, r3
}
 8003a46:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d118      	bne.n	8003a88 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a56:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a60:	2301      	movs	r3, #1
 8003a62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f383 8810 	msr	PRIMASK, r3
}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2110      	movs	r1, #16
 8003a78:	438a      	bics	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f383 8810 	msr	PRIMASK, r3
}
 8003a86:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d108      	bne.n	8003aa2 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a92:	2258      	movs	r2, #88	; 0x58
 8003a94:	5a9a      	ldrh	r2, [r3, r2]
 8003a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a98:	0011      	movs	r1, r2
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f7ff fa44 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003aa0:	e003      	b.n	8003aaa <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8003aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f7fd faaf 	bl	8001008 <HAL_UART_RxCpltCallback>
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b014      	add	sp, #80	; 0x50
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	fffffeff 	.word	0xfffffeff

08003ab8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d10a      	bne.n	8003ae4 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2258      	movs	r2, #88	; 0x58
 8003ad2:	5a9b      	ldrh	r3, [r3, r2]
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	0011      	movs	r1, r2
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7ff fa23 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ae2:	e003      	b.n	8003aec <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7ff fa0e 	bl	8002f08 <HAL_UART_RxHalfCpltCallback>
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b004      	add	sp, #16
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b06:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b80      	cmp	r3, #128	; 0x80
 8003b1a:	d10a      	bne.n	8003b32 <UART_DMAError+0x3e>
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	2b21      	cmp	r3, #33	; 0x21
 8003b20:	d107      	bne.n	8003b32 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2252      	movs	r2, #82	; 0x52
 8003b26:	2100      	movs	r1, #0
 8003b28:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f7ff fe51 	bl	80037d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2240      	movs	r2, #64	; 0x40
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d10a      	bne.n	8003b56 <UART_DMAError+0x62>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b22      	cmp	r3, #34	; 0x22
 8003b44:	d107      	bne.n	8003b56 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	225a      	movs	r2, #90	; 0x5a
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff fe63 	bl	800381c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	589b      	ldr	r3, [r3, r2]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2180      	movs	r1, #128	; 0x80
 8003b64:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7ff f9d5 	bl	8002f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b006      	add	sp, #24
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	225a      	movs	r2, #90	; 0x5a
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2252      	movs	r2, #82	; 0x52
 8003b90:	2100      	movs	r1, #0
 8003b92:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7ff f9be 	bl	8002f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b004      	add	sp, #16
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bac:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f383 8810 	msr	PRIMASK, r3
}
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2140      	movs	r1, #64	; 0x40
 8003bce:	438a      	bics	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f383 8810 	msr	PRIMASK, r3
}
 8003bdc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7ff f97b 	bl	8002ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b006      	add	sp, #24
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b002      	add	sp, #8
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <__errno>:
 8003c0c:	4b01      	ldr	r3, [pc, #4]	; (8003c14 <__errno+0x8>)
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	4770      	bx	lr
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	2000000c 	.word	0x2000000c

08003c18 <__libc_init_array>:
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	2600      	movs	r6, #0
 8003c1c:	4d0c      	ldr	r5, [pc, #48]	; (8003c50 <__libc_init_array+0x38>)
 8003c1e:	4c0d      	ldr	r4, [pc, #52]	; (8003c54 <__libc_init_array+0x3c>)
 8003c20:	1b64      	subs	r4, r4, r5
 8003c22:	10a4      	asrs	r4, r4, #2
 8003c24:	42a6      	cmp	r6, r4
 8003c26:	d109      	bne.n	8003c3c <__libc_init_array+0x24>
 8003c28:	2600      	movs	r6, #0
 8003c2a:	f000 fc8b 	bl	8004544 <_init>
 8003c2e:	4d0a      	ldr	r5, [pc, #40]	; (8003c58 <__libc_init_array+0x40>)
 8003c30:	4c0a      	ldr	r4, [pc, #40]	; (8003c5c <__libc_init_array+0x44>)
 8003c32:	1b64      	subs	r4, r4, r5
 8003c34:	10a4      	asrs	r4, r4, #2
 8003c36:	42a6      	cmp	r6, r4
 8003c38:	d105      	bne.n	8003c46 <__libc_init_array+0x2e>
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	00b3      	lsls	r3, r6, #2
 8003c3e:	58eb      	ldr	r3, [r5, r3]
 8003c40:	4798      	blx	r3
 8003c42:	3601      	adds	r6, #1
 8003c44:	e7ee      	b.n	8003c24 <__libc_init_array+0xc>
 8003c46:	00b3      	lsls	r3, r6, #2
 8003c48:	58eb      	ldr	r3, [r5, r3]
 8003c4a:	4798      	blx	r3
 8003c4c:	3601      	adds	r6, #1
 8003c4e:	e7f2      	b.n	8003c36 <__libc_init_array+0x1e>
 8003c50:	0800466c 	.word	0x0800466c
 8003c54:	0800466c 	.word	0x0800466c
 8003c58:	0800466c 	.word	0x0800466c
 8003c5c:	08004670 	.word	0x08004670

08003c60 <memset>:
 8003c60:	0003      	movs	r3, r0
 8003c62:	1882      	adds	r2, r0, r2
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d100      	bne.n	8003c6a <memset+0xa>
 8003c68:	4770      	bx	lr
 8003c6a:	7019      	strb	r1, [r3, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	e7f9      	b.n	8003c64 <memset+0x4>

08003c70 <siprintf>:
 8003c70:	b40e      	push	{r1, r2, r3}
 8003c72:	b500      	push	{lr}
 8003c74:	490b      	ldr	r1, [pc, #44]	; (8003ca4 <siprintf+0x34>)
 8003c76:	b09c      	sub	sp, #112	; 0x70
 8003c78:	ab1d      	add	r3, sp, #116	; 0x74
 8003c7a:	9002      	str	r0, [sp, #8]
 8003c7c:	9006      	str	r0, [sp, #24]
 8003c7e:	9107      	str	r1, [sp, #28]
 8003c80:	9104      	str	r1, [sp, #16]
 8003c82:	4809      	ldr	r0, [pc, #36]	; (8003ca8 <siprintf+0x38>)
 8003c84:	4909      	ldr	r1, [pc, #36]	; (8003cac <siprintf+0x3c>)
 8003c86:	cb04      	ldmia	r3!, {r2}
 8003c88:	9105      	str	r1, [sp, #20]
 8003c8a:	6800      	ldr	r0, [r0, #0]
 8003c8c:	a902      	add	r1, sp, #8
 8003c8e:	9301      	str	r3, [sp, #4]
 8003c90:	f000 f870 	bl	8003d74 <_svfiprintf_r>
 8003c94:	2300      	movs	r3, #0
 8003c96:	9a02      	ldr	r2, [sp, #8]
 8003c98:	7013      	strb	r3, [r2, #0]
 8003c9a:	b01c      	add	sp, #112	; 0x70
 8003c9c:	bc08      	pop	{r3}
 8003c9e:	b003      	add	sp, #12
 8003ca0:	4718      	bx	r3
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	7fffffff 	.word	0x7fffffff
 8003ca8:	2000000c 	.word	0x2000000c
 8003cac:	ffff0208 	.word	0xffff0208

08003cb0 <__ssputs_r>:
 8003cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cb2:	688e      	ldr	r6, [r1, #8]
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	0007      	movs	r7, r0
 8003cb8:	000c      	movs	r4, r1
 8003cba:	9203      	str	r2, [sp, #12]
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	429e      	cmp	r6, r3
 8003cc0:	d83c      	bhi.n	8003d3c <__ssputs_r+0x8c>
 8003cc2:	2390      	movs	r3, #144	; 0x90
 8003cc4:	898a      	ldrh	r2, [r1, #12]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	421a      	tst	r2, r3
 8003cca:	d034      	beq.n	8003d36 <__ssputs_r+0x86>
 8003ccc:	6909      	ldr	r1, [r1, #16]
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	6960      	ldr	r0, [r4, #20]
 8003cd2:	1a5b      	subs	r3, r3, r1
 8003cd4:	9302      	str	r3, [sp, #8]
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	4343      	muls	r3, r0
 8003cda:	0fdd      	lsrs	r5, r3, #31
 8003cdc:	18ed      	adds	r5, r5, r3
 8003cde:	9b01      	ldr	r3, [sp, #4]
 8003ce0:	9802      	ldr	r0, [sp, #8]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	181b      	adds	r3, r3, r0
 8003ce6:	106d      	asrs	r5, r5, #1
 8003ce8:	42ab      	cmp	r3, r5
 8003cea:	d900      	bls.n	8003cee <__ssputs_r+0x3e>
 8003cec:	001d      	movs	r5, r3
 8003cee:	0553      	lsls	r3, r2, #21
 8003cf0:	d532      	bpl.n	8003d58 <__ssputs_r+0xa8>
 8003cf2:	0029      	movs	r1, r5
 8003cf4:	0038      	movs	r0, r7
 8003cf6:	f000 fb53 	bl	80043a0 <_malloc_r>
 8003cfa:	1e06      	subs	r6, r0, #0
 8003cfc:	d109      	bne.n	8003d12 <__ssputs_r+0x62>
 8003cfe:	230c      	movs	r3, #12
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	2340      	movs	r3, #64	; 0x40
 8003d04:	2001      	movs	r0, #1
 8003d06:	89a2      	ldrh	r2, [r4, #12]
 8003d08:	4240      	negs	r0, r0
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	81a3      	strh	r3, [r4, #12]
 8003d0e:	b005      	add	sp, #20
 8003d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d12:	9a02      	ldr	r2, [sp, #8]
 8003d14:	6921      	ldr	r1, [r4, #16]
 8003d16:	f000 faba 	bl	800428e <memcpy>
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	4a14      	ldr	r2, [pc, #80]	; (8003d70 <__ssputs_r+0xc0>)
 8003d1e:	401a      	ands	r2, r3
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	4313      	orrs	r3, r2
 8003d24:	81a3      	strh	r3, [r4, #12]
 8003d26:	9b02      	ldr	r3, [sp, #8]
 8003d28:	6126      	str	r6, [r4, #16]
 8003d2a:	18f6      	adds	r6, r6, r3
 8003d2c:	6026      	str	r6, [r4, #0]
 8003d2e:	6165      	str	r5, [r4, #20]
 8003d30:	9e01      	ldr	r6, [sp, #4]
 8003d32:	1aed      	subs	r5, r5, r3
 8003d34:	60a5      	str	r5, [r4, #8]
 8003d36:	9b01      	ldr	r3, [sp, #4]
 8003d38:	429e      	cmp	r6, r3
 8003d3a:	d900      	bls.n	8003d3e <__ssputs_r+0x8e>
 8003d3c:	9e01      	ldr	r6, [sp, #4]
 8003d3e:	0032      	movs	r2, r6
 8003d40:	9903      	ldr	r1, [sp, #12]
 8003d42:	6820      	ldr	r0, [r4, #0]
 8003d44:	f000 faac 	bl	80042a0 <memmove>
 8003d48:	68a3      	ldr	r3, [r4, #8]
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	1b9b      	subs	r3, r3, r6
 8003d4e:	60a3      	str	r3, [r4, #8]
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	199e      	adds	r6, r3, r6
 8003d54:	6026      	str	r6, [r4, #0]
 8003d56:	e7da      	b.n	8003d0e <__ssputs_r+0x5e>
 8003d58:	002a      	movs	r2, r5
 8003d5a:	0038      	movs	r0, r7
 8003d5c:	f000 fb96 	bl	800448c <_realloc_r>
 8003d60:	1e06      	subs	r6, r0, #0
 8003d62:	d1e0      	bne.n	8003d26 <__ssputs_r+0x76>
 8003d64:	0038      	movs	r0, r7
 8003d66:	6921      	ldr	r1, [r4, #16]
 8003d68:	f000 faae 	bl	80042c8 <_free_r>
 8003d6c:	e7c7      	b.n	8003cfe <__ssputs_r+0x4e>
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	fffffb7f 	.word	0xfffffb7f

08003d74 <_svfiprintf_r>:
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	b0a1      	sub	sp, #132	; 0x84
 8003d78:	9003      	str	r0, [sp, #12]
 8003d7a:	001d      	movs	r5, r3
 8003d7c:	898b      	ldrh	r3, [r1, #12]
 8003d7e:	000f      	movs	r7, r1
 8003d80:	0016      	movs	r6, r2
 8003d82:	061b      	lsls	r3, r3, #24
 8003d84:	d511      	bpl.n	8003daa <_svfiprintf_r+0x36>
 8003d86:	690b      	ldr	r3, [r1, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10e      	bne.n	8003daa <_svfiprintf_r+0x36>
 8003d8c:	2140      	movs	r1, #64	; 0x40
 8003d8e:	f000 fb07 	bl	80043a0 <_malloc_r>
 8003d92:	6038      	str	r0, [r7, #0]
 8003d94:	6138      	str	r0, [r7, #16]
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d105      	bne.n	8003da6 <_svfiprintf_r+0x32>
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	9a03      	ldr	r2, [sp, #12]
 8003d9e:	3801      	subs	r0, #1
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	b021      	add	sp, #132	; 0x84
 8003da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da6:	2340      	movs	r3, #64	; 0x40
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	2300      	movs	r3, #0
 8003dac:	ac08      	add	r4, sp, #32
 8003dae:	6163      	str	r3, [r4, #20]
 8003db0:	3320      	adds	r3, #32
 8003db2:	7663      	strb	r3, [r4, #25]
 8003db4:	3310      	adds	r3, #16
 8003db6:	76a3      	strb	r3, [r4, #26]
 8003db8:	9507      	str	r5, [sp, #28]
 8003dba:	0035      	movs	r5, r6
 8003dbc:	782b      	ldrb	r3, [r5, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <_svfiprintf_r+0x52>
 8003dc2:	2b25      	cmp	r3, #37	; 0x25
 8003dc4:	d147      	bne.n	8003e56 <_svfiprintf_r+0xe2>
 8003dc6:	1bab      	subs	r3, r5, r6
 8003dc8:	9305      	str	r3, [sp, #20]
 8003dca:	42b5      	cmp	r5, r6
 8003dcc:	d00c      	beq.n	8003de8 <_svfiprintf_r+0x74>
 8003dce:	0032      	movs	r2, r6
 8003dd0:	0039      	movs	r1, r7
 8003dd2:	9803      	ldr	r0, [sp, #12]
 8003dd4:	f7ff ff6c 	bl	8003cb0 <__ssputs_r>
 8003dd8:	1c43      	adds	r3, r0, #1
 8003dda:	d100      	bne.n	8003dde <_svfiprintf_r+0x6a>
 8003ddc:	e0ae      	b.n	8003f3c <_svfiprintf_r+0x1c8>
 8003dde:	6962      	ldr	r2, [r4, #20]
 8003de0:	9b05      	ldr	r3, [sp, #20]
 8003de2:	4694      	mov	ip, r2
 8003de4:	4463      	add	r3, ip
 8003de6:	6163      	str	r3, [r4, #20]
 8003de8:	782b      	ldrb	r3, [r5, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d100      	bne.n	8003df0 <_svfiprintf_r+0x7c>
 8003dee:	e0a5      	b.n	8003f3c <_svfiprintf_r+0x1c8>
 8003df0:	2201      	movs	r2, #1
 8003df2:	2300      	movs	r3, #0
 8003df4:	4252      	negs	r2, r2
 8003df6:	6062      	str	r2, [r4, #4]
 8003df8:	a904      	add	r1, sp, #16
 8003dfa:	3254      	adds	r2, #84	; 0x54
 8003dfc:	1852      	adds	r2, r2, r1
 8003dfe:	1c6e      	adds	r6, r5, #1
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	60e3      	str	r3, [r4, #12]
 8003e04:	60a3      	str	r3, [r4, #8]
 8003e06:	7013      	strb	r3, [r2, #0]
 8003e08:	65a3      	str	r3, [r4, #88]	; 0x58
 8003e0a:	2205      	movs	r2, #5
 8003e0c:	7831      	ldrb	r1, [r6, #0]
 8003e0e:	4854      	ldr	r0, [pc, #336]	; (8003f60 <_svfiprintf_r+0x1ec>)
 8003e10:	f000 fa32 	bl	8004278 <memchr>
 8003e14:	1c75      	adds	r5, r6, #1
 8003e16:	2800      	cmp	r0, #0
 8003e18:	d11f      	bne.n	8003e5a <_svfiprintf_r+0xe6>
 8003e1a:	6822      	ldr	r2, [r4, #0]
 8003e1c:	06d3      	lsls	r3, r2, #27
 8003e1e:	d504      	bpl.n	8003e2a <_svfiprintf_r+0xb6>
 8003e20:	2353      	movs	r3, #83	; 0x53
 8003e22:	a904      	add	r1, sp, #16
 8003e24:	185b      	adds	r3, r3, r1
 8003e26:	2120      	movs	r1, #32
 8003e28:	7019      	strb	r1, [r3, #0]
 8003e2a:	0713      	lsls	r3, r2, #28
 8003e2c:	d504      	bpl.n	8003e38 <_svfiprintf_r+0xc4>
 8003e2e:	2353      	movs	r3, #83	; 0x53
 8003e30:	a904      	add	r1, sp, #16
 8003e32:	185b      	adds	r3, r3, r1
 8003e34:	212b      	movs	r1, #43	; 0x2b
 8003e36:	7019      	strb	r1, [r3, #0]
 8003e38:	7833      	ldrb	r3, [r6, #0]
 8003e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3c:	d016      	beq.n	8003e6c <_svfiprintf_r+0xf8>
 8003e3e:	0035      	movs	r5, r6
 8003e40:	2100      	movs	r1, #0
 8003e42:	200a      	movs	r0, #10
 8003e44:	68e3      	ldr	r3, [r4, #12]
 8003e46:	782a      	ldrb	r2, [r5, #0]
 8003e48:	1c6e      	adds	r6, r5, #1
 8003e4a:	3a30      	subs	r2, #48	; 0x30
 8003e4c:	2a09      	cmp	r2, #9
 8003e4e:	d94e      	bls.n	8003eee <_svfiprintf_r+0x17a>
 8003e50:	2900      	cmp	r1, #0
 8003e52:	d111      	bne.n	8003e78 <_svfiprintf_r+0x104>
 8003e54:	e017      	b.n	8003e86 <_svfiprintf_r+0x112>
 8003e56:	3501      	adds	r5, #1
 8003e58:	e7b0      	b.n	8003dbc <_svfiprintf_r+0x48>
 8003e5a:	4b41      	ldr	r3, [pc, #260]	; (8003f60 <_svfiprintf_r+0x1ec>)
 8003e5c:	6822      	ldr	r2, [r4, #0]
 8003e5e:	1ac0      	subs	r0, r0, r3
 8003e60:	2301      	movs	r3, #1
 8003e62:	4083      	lsls	r3, r0
 8003e64:	4313      	orrs	r3, r2
 8003e66:	002e      	movs	r6, r5
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	e7ce      	b.n	8003e0a <_svfiprintf_r+0x96>
 8003e6c:	9b07      	ldr	r3, [sp, #28]
 8003e6e:	1d19      	adds	r1, r3, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	9107      	str	r1, [sp, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	db01      	blt.n	8003e7c <_svfiprintf_r+0x108>
 8003e78:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e7a:	e004      	b.n	8003e86 <_svfiprintf_r+0x112>
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	60e3      	str	r3, [r4, #12]
 8003e80:	2302      	movs	r3, #2
 8003e82:	4313      	orrs	r3, r2
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	782b      	ldrb	r3, [r5, #0]
 8003e88:	2b2e      	cmp	r3, #46	; 0x2e
 8003e8a:	d10a      	bne.n	8003ea2 <_svfiprintf_r+0x12e>
 8003e8c:	786b      	ldrb	r3, [r5, #1]
 8003e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e90:	d135      	bne.n	8003efe <_svfiprintf_r+0x18a>
 8003e92:	9b07      	ldr	r3, [sp, #28]
 8003e94:	3502      	adds	r5, #2
 8003e96:	1d1a      	adds	r2, r3, #4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	9207      	str	r2, [sp, #28]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	db2b      	blt.n	8003ef8 <_svfiprintf_r+0x184>
 8003ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea2:	4e30      	ldr	r6, [pc, #192]	; (8003f64 <_svfiprintf_r+0x1f0>)
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	0030      	movs	r0, r6
 8003ea8:	7829      	ldrb	r1, [r5, #0]
 8003eaa:	f000 f9e5 	bl	8004278 <memchr>
 8003eae:	2800      	cmp	r0, #0
 8003eb0:	d006      	beq.n	8003ec0 <_svfiprintf_r+0x14c>
 8003eb2:	2340      	movs	r3, #64	; 0x40
 8003eb4:	1b80      	subs	r0, r0, r6
 8003eb6:	4083      	lsls	r3, r0
 8003eb8:	6822      	ldr	r2, [r4, #0]
 8003eba:	3501      	adds	r5, #1
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	6023      	str	r3, [r4, #0]
 8003ec0:	7829      	ldrb	r1, [r5, #0]
 8003ec2:	2206      	movs	r2, #6
 8003ec4:	4828      	ldr	r0, [pc, #160]	; (8003f68 <_svfiprintf_r+0x1f4>)
 8003ec6:	1c6e      	adds	r6, r5, #1
 8003ec8:	7621      	strb	r1, [r4, #24]
 8003eca:	f000 f9d5 	bl	8004278 <memchr>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d03c      	beq.n	8003f4c <_svfiprintf_r+0x1d8>
 8003ed2:	4b26      	ldr	r3, [pc, #152]	; (8003f6c <_svfiprintf_r+0x1f8>)
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d125      	bne.n	8003f24 <_svfiprintf_r+0x1b0>
 8003ed8:	2207      	movs	r2, #7
 8003eda:	9b07      	ldr	r3, [sp, #28]
 8003edc:	3307      	adds	r3, #7
 8003ede:	4393      	bics	r3, r2
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	9307      	str	r3, [sp, #28]
 8003ee4:	6963      	ldr	r3, [r4, #20]
 8003ee6:	9a04      	ldr	r2, [sp, #16]
 8003ee8:	189b      	adds	r3, r3, r2
 8003eea:	6163      	str	r3, [r4, #20]
 8003eec:	e765      	b.n	8003dba <_svfiprintf_r+0x46>
 8003eee:	4343      	muls	r3, r0
 8003ef0:	0035      	movs	r5, r6
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	189b      	adds	r3, r3, r2
 8003ef6:	e7a6      	b.n	8003e46 <_svfiprintf_r+0xd2>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	425b      	negs	r3, r3
 8003efc:	e7d0      	b.n	8003ea0 <_svfiprintf_r+0x12c>
 8003efe:	2300      	movs	r3, #0
 8003f00:	200a      	movs	r0, #10
 8003f02:	001a      	movs	r2, r3
 8003f04:	3501      	adds	r5, #1
 8003f06:	6063      	str	r3, [r4, #4]
 8003f08:	7829      	ldrb	r1, [r5, #0]
 8003f0a:	1c6e      	adds	r6, r5, #1
 8003f0c:	3930      	subs	r1, #48	; 0x30
 8003f0e:	2909      	cmp	r1, #9
 8003f10:	d903      	bls.n	8003f1a <_svfiprintf_r+0x1a6>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0c5      	beq.n	8003ea2 <_svfiprintf_r+0x12e>
 8003f16:	9209      	str	r2, [sp, #36]	; 0x24
 8003f18:	e7c3      	b.n	8003ea2 <_svfiprintf_r+0x12e>
 8003f1a:	4342      	muls	r2, r0
 8003f1c:	0035      	movs	r5, r6
 8003f1e:	2301      	movs	r3, #1
 8003f20:	1852      	adds	r2, r2, r1
 8003f22:	e7f1      	b.n	8003f08 <_svfiprintf_r+0x194>
 8003f24:	ab07      	add	r3, sp, #28
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	003a      	movs	r2, r7
 8003f2a:	0021      	movs	r1, r4
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <_svfiprintf_r+0x1fc>)
 8003f2e:	9803      	ldr	r0, [sp, #12]
 8003f30:	e000      	b.n	8003f34 <_svfiprintf_r+0x1c0>
 8003f32:	bf00      	nop
 8003f34:	9004      	str	r0, [sp, #16]
 8003f36:	9b04      	ldr	r3, [sp, #16]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	d1d3      	bne.n	8003ee4 <_svfiprintf_r+0x170>
 8003f3c:	89bb      	ldrh	r3, [r7, #12]
 8003f3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003f40:	065b      	lsls	r3, r3, #25
 8003f42:	d400      	bmi.n	8003f46 <_svfiprintf_r+0x1d2>
 8003f44:	e72d      	b.n	8003da2 <_svfiprintf_r+0x2e>
 8003f46:	2001      	movs	r0, #1
 8003f48:	4240      	negs	r0, r0
 8003f4a:	e72a      	b.n	8003da2 <_svfiprintf_r+0x2e>
 8003f4c:	ab07      	add	r3, sp, #28
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	003a      	movs	r2, r7
 8003f52:	0021      	movs	r1, r4
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <_svfiprintf_r+0x1fc>)
 8003f56:	9803      	ldr	r0, [sp, #12]
 8003f58:	f000 f87c 	bl	8004054 <_printf_i>
 8003f5c:	e7ea      	b.n	8003f34 <_svfiprintf_r+0x1c0>
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	08004638 	.word	0x08004638
 8003f64:	0800463e 	.word	0x0800463e
 8003f68:	08004642 	.word	0x08004642
 8003f6c:	00000000 	.word	0x00000000
 8003f70:	08003cb1 	.word	0x08003cb1

08003f74 <_printf_common>:
 8003f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f76:	0015      	movs	r5, r2
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	688a      	ldr	r2, [r1, #8]
 8003f7c:	690b      	ldr	r3, [r1, #16]
 8003f7e:	000c      	movs	r4, r1
 8003f80:	9000      	str	r0, [sp, #0]
 8003f82:	4293      	cmp	r3, r2
 8003f84:	da00      	bge.n	8003f88 <_printf_common+0x14>
 8003f86:	0013      	movs	r3, r2
 8003f88:	0022      	movs	r2, r4
 8003f8a:	602b      	str	r3, [r5, #0]
 8003f8c:	3243      	adds	r2, #67	; 0x43
 8003f8e:	7812      	ldrb	r2, [r2, #0]
 8003f90:	2a00      	cmp	r2, #0
 8003f92:	d001      	beq.n	8003f98 <_printf_common+0x24>
 8003f94:	3301      	adds	r3, #1
 8003f96:	602b      	str	r3, [r5, #0]
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	069b      	lsls	r3, r3, #26
 8003f9c:	d502      	bpl.n	8003fa4 <_printf_common+0x30>
 8003f9e:	682b      	ldr	r3, [r5, #0]
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	602b      	str	r3, [r5, #0]
 8003fa4:	6822      	ldr	r2, [r4, #0]
 8003fa6:	2306      	movs	r3, #6
 8003fa8:	0017      	movs	r7, r2
 8003faa:	401f      	ands	r7, r3
 8003fac:	421a      	tst	r2, r3
 8003fae:	d027      	beq.n	8004000 <_printf_common+0x8c>
 8003fb0:	0023      	movs	r3, r4
 8003fb2:	3343      	adds	r3, #67	; 0x43
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	1e5a      	subs	r2, r3, #1
 8003fb8:	4193      	sbcs	r3, r2
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	0692      	lsls	r2, r2, #26
 8003fbe:	d430      	bmi.n	8004022 <_printf_common+0xae>
 8003fc0:	0022      	movs	r2, r4
 8003fc2:	9901      	ldr	r1, [sp, #4]
 8003fc4:	9800      	ldr	r0, [sp, #0]
 8003fc6:	9e08      	ldr	r6, [sp, #32]
 8003fc8:	3243      	adds	r2, #67	; 0x43
 8003fca:	47b0      	blx	r6
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d025      	beq.n	800401c <_printf_common+0xa8>
 8003fd0:	2306      	movs	r3, #6
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	682a      	ldr	r2, [r5, #0]
 8003fd6:	68e1      	ldr	r1, [r4, #12]
 8003fd8:	2500      	movs	r5, #0
 8003fda:	4003      	ands	r3, r0
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d103      	bne.n	8003fe8 <_printf_common+0x74>
 8003fe0:	1a8d      	subs	r5, r1, r2
 8003fe2:	43eb      	mvns	r3, r5
 8003fe4:	17db      	asrs	r3, r3, #31
 8003fe6:	401d      	ands	r5, r3
 8003fe8:	68a3      	ldr	r3, [r4, #8]
 8003fea:	6922      	ldr	r2, [r4, #16]
 8003fec:	4293      	cmp	r3, r2
 8003fee:	dd01      	ble.n	8003ff4 <_printf_common+0x80>
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	18ed      	adds	r5, r5, r3
 8003ff4:	2700      	movs	r7, #0
 8003ff6:	42bd      	cmp	r5, r7
 8003ff8:	d120      	bne.n	800403c <_printf_common+0xc8>
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	e010      	b.n	8004020 <_printf_common+0xac>
 8003ffe:	3701      	adds	r7, #1
 8004000:	68e3      	ldr	r3, [r4, #12]
 8004002:	682a      	ldr	r2, [r5, #0]
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	42bb      	cmp	r3, r7
 8004008:	ddd2      	ble.n	8003fb0 <_printf_common+0x3c>
 800400a:	0022      	movs	r2, r4
 800400c:	2301      	movs	r3, #1
 800400e:	9901      	ldr	r1, [sp, #4]
 8004010:	9800      	ldr	r0, [sp, #0]
 8004012:	9e08      	ldr	r6, [sp, #32]
 8004014:	3219      	adds	r2, #25
 8004016:	47b0      	blx	r6
 8004018:	1c43      	adds	r3, r0, #1
 800401a:	d1f0      	bne.n	8003ffe <_printf_common+0x8a>
 800401c:	2001      	movs	r0, #1
 800401e:	4240      	negs	r0, r0
 8004020:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004022:	2030      	movs	r0, #48	; 0x30
 8004024:	18e1      	adds	r1, r4, r3
 8004026:	3143      	adds	r1, #67	; 0x43
 8004028:	7008      	strb	r0, [r1, #0]
 800402a:	0021      	movs	r1, r4
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	3145      	adds	r1, #69	; 0x45
 8004030:	7809      	ldrb	r1, [r1, #0]
 8004032:	18a2      	adds	r2, r4, r2
 8004034:	3243      	adds	r2, #67	; 0x43
 8004036:	3302      	adds	r3, #2
 8004038:	7011      	strb	r1, [r2, #0]
 800403a:	e7c1      	b.n	8003fc0 <_printf_common+0x4c>
 800403c:	0022      	movs	r2, r4
 800403e:	2301      	movs	r3, #1
 8004040:	9901      	ldr	r1, [sp, #4]
 8004042:	9800      	ldr	r0, [sp, #0]
 8004044:	9e08      	ldr	r6, [sp, #32]
 8004046:	321a      	adds	r2, #26
 8004048:	47b0      	blx	r6
 800404a:	1c43      	adds	r3, r0, #1
 800404c:	d0e6      	beq.n	800401c <_printf_common+0xa8>
 800404e:	3701      	adds	r7, #1
 8004050:	e7d1      	b.n	8003ff6 <_printf_common+0x82>
	...

08004054 <_printf_i>:
 8004054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004056:	b08b      	sub	sp, #44	; 0x2c
 8004058:	9206      	str	r2, [sp, #24]
 800405a:	000a      	movs	r2, r1
 800405c:	3243      	adds	r2, #67	; 0x43
 800405e:	9307      	str	r3, [sp, #28]
 8004060:	9005      	str	r0, [sp, #20]
 8004062:	9204      	str	r2, [sp, #16]
 8004064:	7e0a      	ldrb	r2, [r1, #24]
 8004066:	000c      	movs	r4, r1
 8004068:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800406a:	2a78      	cmp	r2, #120	; 0x78
 800406c:	d807      	bhi.n	800407e <_printf_i+0x2a>
 800406e:	2a62      	cmp	r2, #98	; 0x62
 8004070:	d809      	bhi.n	8004086 <_printf_i+0x32>
 8004072:	2a00      	cmp	r2, #0
 8004074:	d100      	bne.n	8004078 <_printf_i+0x24>
 8004076:	e0c1      	b.n	80041fc <_printf_i+0x1a8>
 8004078:	2a58      	cmp	r2, #88	; 0x58
 800407a:	d100      	bne.n	800407e <_printf_i+0x2a>
 800407c:	e08c      	b.n	8004198 <_printf_i+0x144>
 800407e:	0026      	movs	r6, r4
 8004080:	3642      	adds	r6, #66	; 0x42
 8004082:	7032      	strb	r2, [r6, #0]
 8004084:	e022      	b.n	80040cc <_printf_i+0x78>
 8004086:	0010      	movs	r0, r2
 8004088:	3863      	subs	r0, #99	; 0x63
 800408a:	2815      	cmp	r0, #21
 800408c:	d8f7      	bhi.n	800407e <_printf_i+0x2a>
 800408e:	f7fc f841 	bl	8000114 <__gnu_thumb1_case_shi>
 8004092:	0016      	.short	0x0016
 8004094:	fff6001f 	.word	0xfff6001f
 8004098:	fff6fff6 	.word	0xfff6fff6
 800409c:	001ffff6 	.word	0x001ffff6
 80040a0:	fff6fff6 	.word	0xfff6fff6
 80040a4:	fff6fff6 	.word	0xfff6fff6
 80040a8:	003600a8 	.word	0x003600a8
 80040ac:	fff6009a 	.word	0xfff6009a
 80040b0:	00b9fff6 	.word	0x00b9fff6
 80040b4:	0036fff6 	.word	0x0036fff6
 80040b8:	fff6fff6 	.word	0xfff6fff6
 80040bc:	009e      	.short	0x009e
 80040be:	0026      	movs	r6, r4
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	3642      	adds	r6, #66	; 0x42
 80040c4:	1d11      	adds	r1, r2, #4
 80040c6:	6019      	str	r1, [r3, #0]
 80040c8:	6813      	ldr	r3, [r2, #0]
 80040ca:	7033      	strb	r3, [r6, #0]
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0a7      	b.n	8004220 <_printf_i+0x1cc>
 80040d0:	6808      	ldr	r0, [r1, #0]
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	1d0a      	adds	r2, r1, #4
 80040d6:	0605      	lsls	r5, r0, #24
 80040d8:	d50b      	bpl.n	80040f2 <_printf_i+0x9e>
 80040da:	680d      	ldr	r5, [r1, #0]
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	2d00      	cmp	r5, #0
 80040e0:	da03      	bge.n	80040ea <_printf_i+0x96>
 80040e2:	232d      	movs	r3, #45	; 0x2d
 80040e4:	9a04      	ldr	r2, [sp, #16]
 80040e6:	426d      	negs	r5, r5
 80040e8:	7013      	strb	r3, [r2, #0]
 80040ea:	4b61      	ldr	r3, [pc, #388]	; (8004270 <_printf_i+0x21c>)
 80040ec:	270a      	movs	r7, #10
 80040ee:	9303      	str	r3, [sp, #12]
 80040f0:	e01b      	b.n	800412a <_printf_i+0xd6>
 80040f2:	680d      	ldr	r5, [r1, #0]
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	0641      	lsls	r1, r0, #25
 80040f8:	d5f1      	bpl.n	80040de <_printf_i+0x8a>
 80040fa:	b22d      	sxth	r5, r5
 80040fc:	e7ef      	b.n	80040de <_printf_i+0x8a>
 80040fe:	680d      	ldr	r5, [r1, #0]
 8004100:	6819      	ldr	r1, [r3, #0]
 8004102:	1d08      	adds	r0, r1, #4
 8004104:	6018      	str	r0, [r3, #0]
 8004106:	062e      	lsls	r6, r5, #24
 8004108:	d501      	bpl.n	800410e <_printf_i+0xba>
 800410a:	680d      	ldr	r5, [r1, #0]
 800410c:	e003      	b.n	8004116 <_printf_i+0xc2>
 800410e:	066d      	lsls	r5, r5, #25
 8004110:	d5fb      	bpl.n	800410a <_printf_i+0xb6>
 8004112:	680d      	ldr	r5, [r1, #0]
 8004114:	b2ad      	uxth	r5, r5
 8004116:	4b56      	ldr	r3, [pc, #344]	; (8004270 <_printf_i+0x21c>)
 8004118:	2708      	movs	r7, #8
 800411a:	9303      	str	r3, [sp, #12]
 800411c:	2a6f      	cmp	r2, #111	; 0x6f
 800411e:	d000      	beq.n	8004122 <_printf_i+0xce>
 8004120:	3702      	adds	r7, #2
 8004122:	0023      	movs	r3, r4
 8004124:	2200      	movs	r2, #0
 8004126:	3343      	adds	r3, #67	; 0x43
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	6863      	ldr	r3, [r4, #4]
 800412c:	60a3      	str	r3, [r4, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	db03      	blt.n	800413a <_printf_i+0xe6>
 8004132:	2204      	movs	r2, #4
 8004134:	6821      	ldr	r1, [r4, #0]
 8004136:	4391      	bics	r1, r2
 8004138:	6021      	str	r1, [r4, #0]
 800413a:	2d00      	cmp	r5, #0
 800413c:	d102      	bne.n	8004144 <_printf_i+0xf0>
 800413e:	9e04      	ldr	r6, [sp, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00c      	beq.n	800415e <_printf_i+0x10a>
 8004144:	9e04      	ldr	r6, [sp, #16]
 8004146:	0028      	movs	r0, r5
 8004148:	0039      	movs	r1, r7
 800414a:	f7fc f873 	bl	8000234 <__aeabi_uidivmod>
 800414e:	9b03      	ldr	r3, [sp, #12]
 8004150:	3e01      	subs	r6, #1
 8004152:	5c5b      	ldrb	r3, [r3, r1]
 8004154:	7033      	strb	r3, [r6, #0]
 8004156:	002b      	movs	r3, r5
 8004158:	0005      	movs	r5, r0
 800415a:	429f      	cmp	r7, r3
 800415c:	d9f3      	bls.n	8004146 <_printf_i+0xf2>
 800415e:	2f08      	cmp	r7, #8
 8004160:	d109      	bne.n	8004176 <_printf_i+0x122>
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	07db      	lsls	r3, r3, #31
 8004166:	d506      	bpl.n	8004176 <_printf_i+0x122>
 8004168:	6863      	ldr	r3, [r4, #4]
 800416a:	6922      	ldr	r2, [r4, #16]
 800416c:	4293      	cmp	r3, r2
 800416e:	dc02      	bgt.n	8004176 <_printf_i+0x122>
 8004170:	2330      	movs	r3, #48	; 0x30
 8004172:	3e01      	subs	r6, #1
 8004174:	7033      	strb	r3, [r6, #0]
 8004176:	9b04      	ldr	r3, [sp, #16]
 8004178:	1b9b      	subs	r3, r3, r6
 800417a:	6123      	str	r3, [r4, #16]
 800417c:	9b07      	ldr	r3, [sp, #28]
 800417e:	0021      	movs	r1, r4
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	9805      	ldr	r0, [sp, #20]
 8004184:	9b06      	ldr	r3, [sp, #24]
 8004186:	aa09      	add	r2, sp, #36	; 0x24
 8004188:	f7ff fef4 	bl	8003f74 <_printf_common>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d14c      	bne.n	800422a <_printf_i+0x1d6>
 8004190:	2001      	movs	r0, #1
 8004192:	4240      	negs	r0, r0
 8004194:	b00b      	add	sp, #44	; 0x2c
 8004196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004198:	3145      	adds	r1, #69	; 0x45
 800419a:	700a      	strb	r2, [r1, #0]
 800419c:	4a34      	ldr	r2, [pc, #208]	; (8004270 <_printf_i+0x21c>)
 800419e:	9203      	str	r2, [sp, #12]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	6821      	ldr	r1, [r4, #0]
 80041a4:	ca20      	ldmia	r2!, {r5}
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	0608      	lsls	r0, r1, #24
 80041aa:	d516      	bpl.n	80041da <_printf_i+0x186>
 80041ac:	07cb      	lsls	r3, r1, #31
 80041ae:	d502      	bpl.n	80041b6 <_printf_i+0x162>
 80041b0:	2320      	movs	r3, #32
 80041b2:	4319      	orrs	r1, r3
 80041b4:	6021      	str	r1, [r4, #0]
 80041b6:	2710      	movs	r7, #16
 80041b8:	2d00      	cmp	r5, #0
 80041ba:	d1b2      	bne.n	8004122 <_printf_i+0xce>
 80041bc:	2320      	movs	r3, #32
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	439a      	bics	r2, r3
 80041c2:	6022      	str	r2, [r4, #0]
 80041c4:	e7ad      	b.n	8004122 <_printf_i+0xce>
 80041c6:	2220      	movs	r2, #32
 80041c8:	6809      	ldr	r1, [r1, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	6022      	str	r2, [r4, #0]
 80041ce:	0022      	movs	r2, r4
 80041d0:	2178      	movs	r1, #120	; 0x78
 80041d2:	3245      	adds	r2, #69	; 0x45
 80041d4:	7011      	strb	r1, [r2, #0]
 80041d6:	4a27      	ldr	r2, [pc, #156]	; (8004274 <_printf_i+0x220>)
 80041d8:	e7e1      	b.n	800419e <_printf_i+0x14a>
 80041da:	0648      	lsls	r0, r1, #25
 80041dc:	d5e6      	bpl.n	80041ac <_printf_i+0x158>
 80041de:	b2ad      	uxth	r5, r5
 80041e0:	e7e4      	b.n	80041ac <_printf_i+0x158>
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	680d      	ldr	r5, [r1, #0]
 80041e6:	1d10      	adds	r0, r2, #4
 80041e8:	6949      	ldr	r1, [r1, #20]
 80041ea:	6018      	str	r0, [r3, #0]
 80041ec:	6813      	ldr	r3, [r2, #0]
 80041ee:	062e      	lsls	r6, r5, #24
 80041f0:	d501      	bpl.n	80041f6 <_printf_i+0x1a2>
 80041f2:	6019      	str	r1, [r3, #0]
 80041f4:	e002      	b.n	80041fc <_printf_i+0x1a8>
 80041f6:	066d      	lsls	r5, r5, #25
 80041f8:	d5fb      	bpl.n	80041f2 <_printf_i+0x19e>
 80041fa:	8019      	strh	r1, [r3, #0]
 80041fc:	2300      	movs	r3, #0
 80041fe:	9e04      	ldr	r6, [sp, #16]
 8004200:	6123      	str	r3, [r4, #16]
 8004202:	e7bb      	b.n	800417c <_printf_i+0x128>
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	1d11      	adds	r1, r2, #4
 8004208:	6019      	str	r1, [r3, #0]
 800420a:	6816      	ldr	r6, [r2, #0]
 800420c:	2100      	movs	r1, #0
 800420e:	0030      	movs	r0, r6
 8004210:	6862      	ldr	r2, [r4, #4]
 8004212:	f000 f831 	bl	8004278 <memchr>
 8004216:	2800      	cmp	r0, #0
 8004218:	d001      	beq.n	800421e <_printf_i+0x1ca>
 800421a:	1b80      	subs	r0, r0, r6
 800421c:	6060      	str	r0, [r4, #4]
 800421e:	6863      	ldr	r3, [r4, #4]
 8004220:	6123      	str	r3, [r4, #16]
 8004222:	2300      	movs	r3, #0
 8004224:	9a04      	ldr	r2, [sp, #16]
 8004226:	7013      	strb	r3, [r2, #0]
 8004228:	e7a8      	b.n	800417c <_printf_i+0x128>
 800422a:	6923      	ldr	r3, [r4, #16]
 800422c:	0032      	movs	r2, r6
 800422e:	9906      	ldr	r1, [sp, #24]
 8004230:	9805      	ldr	r0, [sp, #20]
 8004232:	9d07      	ldr	r5, [sp, #28]
 8004234:	47a8      	blx	r5
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	d0aa      	beq.n	8004190 <_printf_i+0x13c>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	079b      	lsls	r3, r3, #30
 800423e:	d415      	bmi.n	800426c <_printf_i+0x218>
 8004240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004242:	68e0      	ldr	r0, [r4, #12]
 8004244:	4298      	cmp	r0, r3
 8004246:	daa5      	bge.n	8004194 <_printf_i+0x140>
 8004248:	0018      	movs	r0, r3
 800424a:	e7a3      	b.n	8004194 <_printf_i+0x140>
 800424c:	0022      	movs	r2, r4
 800424e:	2301      	movs	r3, #1
 8004250:	9906      	ldr	r1, [sp, #24]
 8004252:	9805      	ldr	r0, [sp, #20]
 8004254:	9e07      	ldr	r6, [sp, #28]
 8004256:	3219      	adds	r2, #25
 8004258:	47b0      	blx	r6
 800425a:	1c43      	adds	r3, r0, #1
 800425c:	d098      	beq.n	8004190 <_printf_i+0x13c>
 800425e:	3501      	adds	r5, #1
 8004260:	68e3      	ldr	r3, [r4, #12]
 8004262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	42ab      	cmp	r3, r5
 8004268:	dcf0      	bgt.n	800424c <_printf_i+0x1f8>
 800426a:	e7e9      	b.n	8004240 <_printf_i+0x1ec>
 800426c:	2500      	movs	r5, #0
 800426e:	e7f7      	b.n	8004260 <_printf_i+0x20c>
 8004270:	08004649 	.word	0x08004649
 8004274:	0800465a 	.word	0x0800465a

08004278 <memchr>:
 8004278:	b2c9      	uxtb	r1, r1
 800427a:	1882      	adds	r2, r0, r2
 800427c:	4290      	cmp	r0, r2
 800427e:	d101      	bne.n	8004284 <memchr+0xc>
 8004280:	2000      	movs	r0, #0
 8004282:	4770      	bx	lr
 8004284:	7803      	ldrb	r3, [r0, #0]
 8004286:	428b      	cmp	r3, r1
 8004288:	d0fb      	beq.n	8004282 <memchr+0xa>
 800428a:	3001      	adds	r0, #1
 800428c:	e7f6      	b.n	800427c <memchr+0x4>

0800428e <memcpy>:
 800428e:	2300      	movs	r3, #0
 8004290:	b510      	push	{r4, lr}
 8004292:	429a      	cmp	r2, r3
 8004294:	d100      	bne.n	8004298 <memcpy+0xa>
 8004296:	bd10      	pop	{r4, pc}
 8004298:	5ccc      	ldrb	r4, [r1, r3]
 800429a:	54c4      	strb	r4, [r0, r3]
 800429c:	3301      	adds	r3, #1
 800429e:	e7f8      	b.n	8004292 <memcpy+0x4>

080042a0 <memmove>:
 80042a0:	b510      	push	{r4, lr}
 80042a2:	4288      	cmp	r0, r1
 80042a4:	d902      	bls.n	80042ac <memmove+0xc>
 80042a6:	188b      	adds	r3, r1, r2
 80042a8:	4298      	cmp	r0, r3
 80042aa:	d303      	bcc.n	80042b4 <memmove+0x14>
 80042ac:	2300      	movs	r3, #0
 80042ae:	e007      	b.n	80042c0 <memmove+0x20>
 80042b0:	5c8b      	ldrb	r3, [r1, r2]
 80042b2:	5483      	strb	r3, [r0, r2]
 80042b4:	3a01      	subs	r2, #1
 80042b6:	d2fb      	bcs.n	80042b0 <memmove+0x10>
 80042b8:	bd10      	pop	{r4, pc}
 80042ba:	5ccc      	ldrb	r4, [r1, r3]
 80042bc:	54c4      	strb	r4, [r0, r3]
 80042be:	3301      	adds	r3, #1
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d1fa      	bne.n	80042ba <memmove+0x1a>
 80042c4:	e7f8      	b.n	80042b8 <memmove+0x18>
	...

080042c8 <_free_r>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	0005      	movs	r5, r0
 80042cc:	2900      	cmp	r1, #0
 80042ce:	d010      	beq.n	80042f2 <_free_r+0x2a>
 80042d0:	1f0c      	subs	r4, r1, #4
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	da00      	bge.n	80042da <_free_r+0x12>
 80042d8:	18e4      	adds	r4, r4, r3
 80042da:	0028      	movs	r0, r5
 80042dc:	f000 f918 	bl	8004510 <__malloc_lock>
 80042e0:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <_free_r+0x90>)
 80042e2:	6813      	ldr	r3, [r2, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <_free_r+0x2c>
 80042e8:	6063      	str	r3, [r4, #4]
 80042ea:	6014      	str	r4, [r2, #0]
 80042ec:	0028      	movs	r0, r5
 80042ee:	f000 f917 	bl	8004520 <__malloc_unlock>
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	42a3      	cmp	r3, r4
 80042f6:	d908      	bls.n	800430a <_free_r+0x42>
 80042f8:	6821      	ldr	r1, [r4, #0]
 80042fa:	1860      	adds	r0, r4, r1
 80042fc:	4283      	cmp	r3, r0
 80042fe:	d1f3      	bne.n	80042e8 <_free_r+0x20>
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	1841      	adds	r1, r0, r1
 8004306:	6021      	str	r1, [r4, #0]
 8004308:	e7ee      	b.n	80042e8 <_free_r+0x20>
 800430a:	001a      	movs	r2, r3
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <_free_r+0x4e>
 8004312:	42a3      	cmp	r3, r4
 8004314:	d9f9      	bls.n	800430a <_free_r+0x42>
 8004316:	6811      	ldr	r1, [r2, #0]
 8004318:	1850      	adds	r0, r2, r1
 800431a:	42a0      	cmp	r0, r4
 800431c:	d10b      	bne.n	8004336 <_free_r+0x6e>
 800431e:	6820      	ldr	r0, [r4, #0]
 8004320:	1809      	adds	r1, r1, r0
 8004322:	1850      	adds	r0, r2, r1
 8004324:	6011      	str	r1, [r2, #0]
 8004326:	4283      	cmp	r3, r0
 8004328:	d1e0      	bne.n	80042ec <_free_r+0x24>
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	1841      	adds	r1, r0, r1
 8004330:	6011      	str	r1, [r2, #0]
 8004332:	6053      	str	r3, [r2, #4]
 8004334:	e7da      	b.n	80042ec <_free_r+0x24>
 8004336:	42a0      	cmp	r0, r4
 8004338:	d902      	bls.n	8004340 <_free_r+0x78>
 800433a:	230c      	movs	r3, #12
 800433c:	602b      	str	r3, [r5, #0]
 800433e:	e7d5      	b.n	80042ec <_free_r+0x24>
 8004340:	6821      	ldr	r1, [r4, #0]
 8004342:	1860      	adds	r0, r4, r1
 8004344:	4283      	cmp	r3, r0
 8004346:	d103      	bne.n	8004350 <_free_r+0x88>
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	1841      	adds	r1, r0, r1
 800434e:	6021      	str	r1, [r4, #0]
 8004350:	6063      	str	r3, [r4, #4]
 8004352:	6054      	str	r4, [r2, #4]
 8004354:	e7ca      	b.n	80042ec <_free_r+0x24>
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	200001a0 	.word	0x200001a0

0800435c <sbrk_aligned>:
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	4e0f      	ldr	r6, [pc, #60]	; (800439c <sbrk_aligned+0x40>)
 8004360:	000d      	movs	r5, r1
 8004362:	6831      	ldr	r1, [r6, #0]
 8004364:	0004      	movs	r4, r0
 8004366:	2900      	cmp	r1, #0
 8004368:	d102      	bne.n	8004370 <sbrk_aligned+0x14>
 800436a:	f000 f8bf 	bl	80044ec <_sbrk_r>
 800436e:	6030      	str	r0, [r6, #0]
 8004370:	0029      	movs	r1, r5
 8004372:	0020      	movs	r0, r4
 8004374:	f000 f8ba 	bl	80044ec <_sbrk_r>
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	d00a      	beq.n	8004392 <sbrk_aligned+0x36>
 800437c:	2303      	movs	r3, #3
 800437e:	1cc5      	adds	r5, r0, #3
 8004380:	439d      	bics	r5, r3
 8004382:	42a8      	cmp	r0, r5
 8004384:	d007      	beq.n	8004396 <sbrk_aligned+0x3a>
 8004386:	1a29      	subs	r1, r5, r0
 8004388:	0020      	movs	r0, r4
 800438a:	f000 f8af 	bl	80044ec <_sbrk_r>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	d101      	bne.n	8004396 <sbrk_aligned+0x3a>
 8004392:	2501      	movs	r5, #1
 8004394:	426d      	negs	r5, r5
 8004396:	0028      	movs	r0, r5
 8004398:	bd70      	pop	{r4, r5, r6, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	200001a4 	.word	0x200001a4

080043a0 <_malloc_r>:
 80043a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043a2:	2203      	movs	r2, #3
 80043a4:	1ccb      	adds	r3, r1, #3
 80043a6:	4393      	bics	r3, r2
 80043a8:	3308      	adds	r3, #8
 80043aa:	0006      	movs	r6, r0
 80043ac:	001f      	movs	r7, r3
 80043ae:	2b0c      	cmp	r3, #12
 80043b0:	d232      	bcs.n	8004418 <_malloc_r+0x78>
 80043b2:	270c      	movs	r7, #12
 80043b4:	42b9      	cmp	r1, r7
 80043b6:	d831      	bhi.n	800441c <_malloc_r+0x7c>
 80043b8:	0030      	movs	r0, r6
 80043ba:	f000 f8a9 	bl	8004510 <__malloc_lock>
 80043be:	4d32      	ldr	r5, [pc, #200]	; (8004488 <_malloc_r+0xe8>)
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	001c      	movs	r4, r3
 80043c4:	2c00      	cmp	r4, #0
 80043c6:	d12e      	bne.n	8004426 <_malloc_r+0x86>
 80043c8:	0039      	movs	r1, r7
 80043ca:	0030      	movs	r0, r6
 80043cc:	f7ff ffc6 	bl	800435c <sbrk_aligned>
 80043d0:	0004      	movs	r4, r0
 80043d2:	1c43      	adds	r3, r0, #1
 80043d4:	d11e      	bne.n	8004414 <_malloc_r+0x74>
 80043d6:	682c      	ldr	r4, [r5, #0]
 80043d8:	0025      	movs	r5, r4
 80043da:	2d00      	cmp	r5, #0
 80043dc:	d14a      	bne.n	8004474 <_malloc_r+0xd4>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	0029      	movs	r1, r5
 80043e2:	18e3      	adds	r3, r4, r3
 80043e4:	0030      	movs	r0, r6
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	f000 f880 	bl	80044ec <_sbrk_r>
 80043ec:	9b01      	ldr	r3, [sp, #4]
 80043ee:	4283      	cmp	r3, r0
 80043f0:	d143      	bne.n	800447a <_malloc_r+0xda>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	3703      	adds	r7, #3
 80043f6:	1aff      	subs	r7, r7, r3
 80043f8:	2303      	movs	r3, #3
 80043fa:	439f      	bics	r7, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	2f0c      	cmp	r7, #12
 8004400:	d200      	bcs.n	8004404 <_malloc_r+0x64>
 8004402:	270c      	movs	r7, #12
 8004404:	0039      	movs	r1, r7
 8004406:	0030      	movs	r0, r6
 8004408:	f7ff ffa8 	bl	800435c <sbrk_aligned>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d034      	beq.n	800447a <_malloc_r+0xda>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	19df      	adds	r7, r3, r7
 8004414:	6027      	str	r7, [r4, #0]
 8004416:	e013      	b.n	8004440 <_malloc_r+0xa0>
 8004418:	2b00      	cmp	r3, #0
 800441a:	dacb      	bge.n	80043b4 <_malloc_r+0x14>
 800441c:	230c      	movs	r3, #12
 800441e:	2500      	movs	r5, #0
 8004420:	6033      	str	r3, [r6, #0]
 8004422:	0028      	movs	r0, r5
 8004424:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	1bd1      	subs	r1, r2, r7
 800442a:	d420      	bmi.n	800446e <_malloc_r+0xce>
 800442c:	290b      	cmp	r1, #11
 800442e:	d917      	bls.n	8004460 <_malloc_r+0xc0>
 8004430:	19e2      	adds	r2, r4, r7
 8004432:	6027      	str	r7, [r4, #0]
 8004434:	42a3      	cmp	r3, r4
 8004436:	d111      	bne.n	800445c <_malloc_r+0xbc>
 8004438:	602a      	str	r2, [r5, #0]
 800443a:	6863      	ldr	r3, [r4, #4]
 800443c:	6011      	str	r1, [r2, #0]
 800443e:	6053      	str	r3, [r2, #4]
 8004440:	0030      	movs	r0, r6
 8004442:	0025      	movs	r5, r4
 8004444:	f000 f86c 	bl	8004520 <__malloc_unlock>
 8004448:	2207      	movs	r2, #7
 800444a:	350b      	adds	r5, #11
 800444c:	1d23      	adds	r3, r4, #4
 800444e:	4395      	bics	r5, r2
 8004450:	1aea      	subs	r2, r5, r3
 8004452:	429d      	cmp	r5, r3
 8004454:	d0e5      	beq.n	8004422 <_malloc_r+0x82>
 8004456:	1b5b      	subs	r3, r3, r5
 8004458:	50a3      	str	r3, [r4, r2]
 800445a:	e7e2      	b.n	8004422 <_malloc_r+0x82>
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	e7ec      	b.n	800443a <_malloc_r+0x9a>
 8004460:	6862      	ldr	r2, [r4, #4]
 8004462:	42a3      	cmp	r3, r4
 8004464:	d101      	bne.n	800446a <_malloc_r+0xca>
 8004466:	602a      	str	r2, [r5, #0]
 8004468:	e7ea      	b.n	8004440 <_malloc_r+0xa0>
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	e7e8      	b.n	8004440 <_malloc_r+0xa0>
 800446e:	0023      	movs	r3, r4
 8004470:	6864      	ldr	r4, [r4, #4]
 8004472:	e7a7      	b.n	80043c4 <_malloc_r+0x24>
 8004474:	002c      	movs	r4, r5
 8004476:	686d      	ldr	r5, [r5, #4]
 8004478:	e7af      	b.n	80043da <_malloc_r+0x3a>
 800447a:	230c      	movs	r3, #12
 800447c:	0030      	movs	r0, r6
 800447e:	6033      	str	r3, [r6, #0]
 8004480:	f000 f84e 	bl	8004520 <__malloc_unlock>
 8004484:	e7cd      	b.n	8004422 <_malloc_r+0x82>
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	200001a0 	.word	0x200001a0

0800448c <_realloc_r>:
 800448c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800448e:	0007      	movs	r7, r0
 8004490:	000e      	movs	r6, r1
 8004492:	0014      	movs	r4, r2
 8004494:	2900      	cmp	r1, #0
 8004496:	d105      	bne.n	80044a4 <_realloc_r+0x18>
 8004498:	0011      	movs	r1, r2
 800449a:	f7ff ff81 	bl	80043a0 <_malloc_r>
 800449e:	0005      	movs	r5, r0
 80044a0:	0028      	movs	r0, r5
 80044a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044a4:	2a00      	cmp	r2, #0
 80044a6:	d103      	bne.n	80044b0 <_realloc_r+0x24>
 80044a8:	f7ff ff0e 	bl	80042c8 <_free_r>
 80044ac:	0025      	movs	r5, r4
 80044ae:	e7f7      	b.n	80044a0 <_realloc_r+0x14>
 80044b0:	f000 f83e 	bl	8004530 <_malloc_usable_size_r>
 80044b4:	9001      	str	r0, [sp, #4]
 80044b6:	4284      	cmp	r4, r0
 80044b8:	d803      	bhi.n	80044c2 <_realloc_r+0x36>
 80044ba:	0035      	movs	r5, r6
 80044bc:	0843      	lsrs	r3, r0, #1
 80044be:	42a3      	cmp	r3, r4
 80044c0:	d3ee      	bcc.n	80044a0 <_realloc_r+0x14>
 80044c2:	0021      	movs	r1, r4
 80044c4:	0038      	movs	r0, r7
 80044c6:	f7ff ff6b 	bl	80043a0 <_malloc_r>
 80044ca:	1e05      	subs	r5, r0, #0
 80044cc:	d0e8      	beq.n	80044a0 <_realloc_r+0x14>
 80044ce:	9b01      	ldr	r3, [sp, #4]
 80044d0:	0022      	movs	r2, r4
 80044d2:	429c      	cmp	r4, r3
 80044d4:	d900      	bls.n	80044d8 <_realloc_r+0x4c>
 80044d6:	001a      	movs	r2, r3
 80044d8:	0031      	movs	r1, r6
 80044da:	0028      	movs	r0, r5
 80044dc:	f7ff fed7 	bl	800428e <memcpy>
 80044e0:	0031      	movs	r1, r6
 80044e2:	0038      	movs	r0, r7
 80044e4:	f7ff fef0 	bl	80042c8 <_free_r>
 80044e8:	e7da      	b.n	80044a0 <_realloc_r+0x14>
	...

080044ec <_sbrk_r>:
 80044ec:	2300      	movs	r3, #0
 80044ee:	b570      	push	{r4, r5, r6, lr}
 80044f0:	4d06      	ldr	r5, [pc, #24]	; (800450c <_sbrk_r+0x20>)
 80044f2:	0004      	movs	r4, r0
 80044f4:	0008      	movs	r0, r1
 80044f6:	602b      	str	r3, [r5, #0]
 80044f8:	f7fc fe78 	bl	80011ec <_sbrk>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d103      	bne.n	8004508 <_sbrk_r+0x1c>
 8004500:	682b      	ldr	r3, [r5, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d000      	beq.n	8004508 <_sbrk_r+0x1c>
 8004506:	6023      	str	r3, [r4, #0]
 8004508:	bd70      	pop	{r4, r5, r6, pc}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	200001a8 	.word	0x200001a8

08004510 <__malloc_lock>:
 8004510:	b510      	push	{r4, lr}
 8004512:	4802      	ldr	r0, [pc, #8]	; (800451c <__malloc_lock+0xc>)
 8004514:	f000 f814 	bl	8004540 <__retarget_lock_acquire_recursive>
 8004518:	bd10      	pop	{r4, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	200001ac 	.word	0x200001ac

08004520 <__malloc_unlock>:
 8004520:	b510      	push	{r4, lr}
 8004522:	4802      	ldr	r0, [pc, #8]	; (800452c <__malloc_unlock+0xc>)
 8004524:	f000 f80d 	bl	8004542 <__retarget_lock_release_recursive>
 8004528:	bd10      	pop	{r4, pc}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	200001ac 	.word	0x200001ac

08004530 <_malloc_usable_size_r>:
 8004530:	1f0b      	subs	r3, r1, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	1f18      	subs	r0, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	da01      	bge.n	800453e <_malloc_usable_size_r+0xe>
 800453a:	580b      	ldr	r3, [r1, r0]
 800453c:	18c0      	adds	r0, r0, r3
 800453e:	4770      	bx	lr

08004540 <__retarget_lock_acquire_recursive>:
 8004540:	4770      	bx	lr

08004542 <__retarget_lock_release_recursive>:
 8004542:	4770      	bx	lr

08004544 <_init>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr

08004550 <_fini>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr
